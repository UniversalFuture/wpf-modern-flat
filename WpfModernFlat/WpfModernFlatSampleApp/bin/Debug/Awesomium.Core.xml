<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Core</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Core.AwesomiumSynchronizationContext">
            <summary>
            Provides a synchronization context for the Awesomium <see cref="T:Awesomium.Core.WebCore"/>
            updating model.
            </summary>
        </member>
        <member name="M:Awesomium.Core.AwesomiumSynchronizationContext.CreateCopy">
            <summary>
            Creates a copy of Awesomium's synchronization context.
            </summary>
            <returns>
            A new <see cref="T:Awesomium.Core.AwesomiumSynchronizationContext"/> object.
            </returns>
        </member>
        <member name="M:Awesomium.Core.AwesomiumSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to Awesomium's synchronization context.
            </summary>
            <param name="d">
            The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Awesomium.Core.WebCore"/> is not running or has been shut down.
            </exception>
        </member>
        <member name="M:Awesomium.Core.AwesomiumSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to Awesomium's synchronization context.
            </summary>
            <param name="d">
            The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.
            </param>
            <param name="state">
            The object passed to the delegate.
            </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Awesomium.Core.WebCore"/> is not running or has been shut down.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidAsynchronousStateException">
            The destination thread no longer exists.
            </exception>
        </member>
        <member name="T:Awesomium.Core.WebCoreUpdateState">
            <summary>
            Defines the various techniques the <see cref="T:Awesomium.Core.WebCore"/> is using to take care
            of automatic updating.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>State</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.NotUpdating"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is currently not updating. Either because it has not
            been started yet, or it has been shut down.
            
            <p/>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.WebCoreUpdateState.NotUpdating&quot;]/remarks/node()"/>
            </description>
            </item>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.InAutoUpdate"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is auto-updating using an internal background loop and an
            available <see cref="T:System.Threading.SynchronizationContext"/>.
            
            <p/>
            
            This state indicates that Awesomium is running in a UI context, where a message loop exists 
            on the thread and a valid <see cref="T:System.Threading.SynchronizationContext"/> is provided by the runtime.
            <p/>
            This state is usually temporary and the <see cref="T:Awesomium.Core.WebCore"/> is switched to
            <see cref="F:Awesomium.Core.WebCoreUpdateState.InTechnologyContext"/> when a technology-specific <c>WebControl</c>
            is created. However, if an application only creates <see cref="T:Awesomium.Core.WebView"/> components
            though it is a UI application, the <see cref="T:Awesomium.Core.WebCore"/> will remain at this state.
            
            </description>
            </item>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.InTechnologyContext"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is running in a .NET/Mono UI technology's context and is using 
            a technology-specific timer or synchronization model for updating.
            
            <p/>
            
            .NET UI technologies such as WPF and Windows Forms, provide their own <see cref="T:System.Threading.SynchronizationContext"/>,
            synchronization model and timers. Also, when used with Mono, certain technologies do not provide a standard
            .NET <see cref="T:System.Threading.SynchronizationContext"/> (such as Unity, Cocoa or Gtk), but they provide their own 
            synchronization model and timers.
            <p/>
            Whenever possible, Awesomium takes advantage of such available models and uses them for updating 
            the <see cref="T:Awesomium.Core.WebCore"/>, improving performance. For example, in WPF a special 
            <see cref="T:System.Windows.Threading.DispatcherTimer"/> is used for updating the <see cref="T:Awesomium.Core.WebCore"/>
            in intervals specified at initialization (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or through
            <see cref="P:Awesomium.Core.WebCore.AutoUpdatePeriod"/>.
            
            </description>
            </item>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.InSelfContext"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is running on a background (non-UI) thread and is
            executing its own update loop.
            
            <p/>
            
            This state is used when Awesomium has been started from a non-UI, dedicated thread
            that has no message loop, using <see cref="M:Awesomium.Core.WebCore.Run"/>.
            <p/>
            In this state, the <see cref="T:Awesomium.Core.WebCore"/> creates and installs an Awesomium-specific synchronization
            context and starts its own updating loop that updates the core in intervals specified at initialization
            (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or through <see cref="P:Awesomium.Core.WebCore.AutoUpdatePeriod"/>.
            <p/>
            When in this state, the users can execute code against the Awesomium API, using any of the methods
            described in the <b>Interacting with Awesomium Cross-Thread</b> section in the documentation
            of: <see cref="M:Awesomium.Core.WebCore.Run"/>.
            
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebCoreUpdateState.NotUpdating">
            <summary>
            The <see cref="T:Awesomium.Core.WebCore"/> is currently not updating. Either because it has not
            been started yet, or it has been shut down.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebCoreUpdateState.InAutoUpdate">
            <summary>
            The <see cref="T:Awesomium.Core.WebCore"/> is auto-updating using an internal background loop and an
            available <see cref="T:System.Threading.SynchronizationContext"/>.
            </summary>
            <remarks>
            This state indicates that Awesomium is running in a UI context, where a message loop exists 
            on the thread and a valid <see cref="T:System.Threading.SynchronizationContext"/> is provided by the runtime.
            <p/>
            This state is usually temporary and the <see cref="T:Awesomium.Core.WebCore"/> is switched to
            <see cref="F:Awesomium.Core.WebCoreUpdateState.InTechnologyContext"/> when a technology-specific <c>WebControl</c>
            is created. However, if an application only creates <see cref="T:Awesomium.Core.WebView"/> components
            though it is a UI application, the <see cref="T:Awesomium.Core.WebCore"/> will remain at this state.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebCoreUpdateState.InTechnologyContext">
            <summary>
            The <see cref="T:Awesomium.Core.WebCore"/> is running in a .NET/Mono UI technology's context and is using 
            a technology-specific timer or synchronization model for updating.
            </summary>
            <remarks>
            .NET UI technologies such as WPF and Windows Forms, provide their own <see cref="T:System.Threading.SynchronizationContext"/>,
            synchronization model and timers. Also, when used with Mono, certain technologies do not provide a standard
            .NET <see cref="T:System.Threading.SynchronizationContext"/> (such as Unity, Cocoa or Gtk), but they provide their own 
            synchronization model and timers.
            <p/>
            Whenever possible, Awesomium takes advantage of such available models and uses them for updating 
            the <see cref="T:Awesomium.Core.WebCore"/>, improving performance. For example, in WPF a special 
            <see cref="T:System.Windows.Threading.DispatcherTimer"/> is used for updating the <see cref="T:Awesomium.Core.WebCore"/>
            in intervals specified at initialization (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or through
            <see cref="P:Awesomium.Core.WebCore.AutoUpdatePeriod"/>.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebCoreUpdateState.InSelfContext">
            <summary>
            The <see cref="T:Awesomium.Core.WebCore"/> is running on a background (non-UI) thread and is
            executing its own update loop.
            </summary>
            <remarks>
            This state is used when Awesomium has been started from a non-UI, dedicated thread
            that has no message loop, using <see cref="M:Awesomium.Core.WebCore.Run"/>.
            <p/>
            In this state, the <see cref="T:Awesomium.Core.WebCore"/> creates and installs an Awesomium-specific synchronization
            context and starts its own updating loop that updates the core in intervals specified at initialization
            (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or through <see cref="P:Awesomium.Core.WebCore.AutoUpdatePeriod"/>.
            <p/>
            When in this state, the users can execute code against the Awesomium API, using any of the methods
            described in the <b>Interacting with Awesomium Cross-Thread</b> section in the documentation
            of: <see cref="M:Awesomium.Core.WebCore.Run"/>.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.Data.SQLite.SQLiteConnection">
            <summary>
            Represents an open connection to a SQLite database.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.#ctor(System.String,Awesomium.Core.Data.SQLite.SQLiteOpenFlags,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="F:Awesomium.Core.Data.SQLite.SQLiteConnection._preserveDuringLinkMagic">
            <summary>
            Used to list some code that we want the MonoTouch linker
            to see, but that we never want to actually execute.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.GetMapping(System.Type,Awesomium.Core.Data.SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>         
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>     
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.GetMapping``1">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.DropTable``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateTable``1(Awesomium.Core.Data.SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateTable(System.Type,Awesomium.Core.Data.SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <param name="createFlags">Optional flags allowing implicit PK and indexes based on naming conventions.</param>  
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateIndex(System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)" -->
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.NewCommand">
            <summary>
            Creates a new SQLiteCommand. Can be overridden to provide a sub-class.
            </summary>
            <seealso cref="M:Awesomium.Core.Data.SQLite.SQLiteCommand.OnInstanceCreated(System.Object)"/>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.CreateCommand(System.String,System.Object[])">
            <summary>
            Creates a new SQLiteCommand given the command text with arguments. Place a '?'
            in the command text for each of the arguments.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the command text.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.Data.SQLite.SQLiteCommand"/>
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Execute(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Query``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Query(Awesomium.Core.Data.SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:Awesomium.Core.Data.SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.DeferredQuery(Awesomium.Core.Data.SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:Awesomium.Core.Data.SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Get``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Find``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Find(System.Object,Awesomium.Core.Data.SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the object type.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Begins a new transaction. Call <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Commit"/> to end the transaction.
            </summary>
            <example cref="T:System.InvalidOperationException">Throws if a transaction has already begun.</example>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.SaveTransactionPoint">
            <summary>
            Creates a savepoint in the database at the current point in the transaction timeline.
            Begins a new transaction if one is not in progress.
            
            Call <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.RollbackTo(System.String)"/> to undo transactions since the returned savepoint.
            Call <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Release(System.String)"/> to commit transactions after the savepoint returned here.
            Call <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Commit"/> to end the transaction, committing all changes.
            </summary>
            <returns>A string naming the savepoint.</returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Rollback">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.BeginTransaction"/> or <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.SaveTransactionPoint"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.RollbackTo(System.String)">
            <summary>
            Rolls back the savepoint created by <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.BeginTransaction"/> or SaveTransactionPoint.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Rollback"/></param>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.RollbackTo(System.String,System.Boolean)">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
            <param name="noThrow">true to avoid throwing exceptions, false otherwise</param>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Release(System.String)">
            <summary>
            Releases a savepoint returned from <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.SaveTransactionPoint"/>.  Releasing a savepoint 
               makes changes since that savepoint permanent if the savepoint began the transaction,
               or otherwise the changes are permanent pending a call to <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Commit"/>.
            
            The RELEASE command is like a COMMIT for a SAVEPOINT.
            </summary>
            <param name="savepoint">The name of the savepoint to release.  The string should be the result of a call to <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.SaveTransactionPoint"/></param>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Commit">
            <summary>
            Commits the transaction that was begun by <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Awesomium.Core.Data.SQLite.SQLiteConnection.RunInTransaction(System.Action)" -->
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.String)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Type)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Insert(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.InsertOrReplace(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Insert(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.InsertOrReplace(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Insert(System.Object,System.String)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Insert(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Update(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Update(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.UpdateAll(System.Collections.IEnumerable)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Delete(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Delete``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteConnection.DeleteAll``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="P:Awesomium.Core.Data.SQLite.SQLiteConnection.BusyTimeout">
            <summary>
            Sets a busy handler to sleep the specified amount of time when a table is locked.
            The handler will sleep multiple times until a total time of <see cref="P:Awesomium.Core.Data.SQLite.SQLiteConnection.BusyTimeout"/> has accumulated.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.SQLite.SQLiteConnection.TableMappings">
            <summary>
            Returns the mappings from types to tables that the connection
            currently understands.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.SQLite.SQLiteConnection.IsInTransaction">
            <summary>
            Whether <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.BeginTransaction"/> has been called and the database is waiting for a <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.Commit"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.Cookies.#ctor(System.String)">
            <summary>
            Constructs a new Cookies and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
        </member>
        <member name="T:Awesomium.Core.WebCoreAsyncResult">
            <summary>
            Represents an operation to be executed during <see cref="M:Awesomium.Core.WebCore.Update"/>.
            </summary>
            <seealso cref="O:Awesomium.Core.WebCore.QueueWork"/>
        </member>
        <member name="M:Awesomium.Core.WebCoreAsyncResult.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebCoreAsyncResult.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebCoreAsyncResult.op_Equality(Awesomium.Core.WebCoreAsyncResult,Awesomium.Core.WebCoreAsyncResult)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebCoreAsyncResult"/> instances are equivalent.
            </summary>
            <param name="wca1">
            The <see cref="T:Awesomium.Core.WebCoreAsyncResult"/> instance that is to the left of the equality operator.
            </param>
            <param name="wca2">
            The <see cref="T:Awesomium.Core.WebCoreAsyncResult"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wca1"/> and <paramref name="wca2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebCoreAsyncResult.op_Inequality(Awesomium.Core.WebCoreAsyncResult,Awesomium.Core.WebCoreAsyncResult)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebCoreAsyncResult"/> instances are not equal.
            </summary>
            <param name="wca1">
            The <see cref="T:Awesomium.Core.WebCoreAsyncResult"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wca2">
            The <see cref="T:Awesomium.Core.WebCoreAsyncResult"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wca1"/> and <paramref name="wca2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.View">
            <summary>
            The <see cref="T:Awesomium.Core.IWebView"/> instance this operation is
            associated to.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.Action">
            <summary>
            A <see cref="T:System.Delegate"/> to the method to execute in Awesomium's
            context.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.Arguments">
            <summary>
            Arguments to be passed to the method invoked.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.DelaySteps">
            <summary>
            Indicates if this instance represents an empty update pass.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.AsyncState">
            <summary>
            Gets the value returned from the asynchronous execution of the <see cref="P:Awesomium.Core.WebCoreAsyncResult.Action"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCoreAsyncResult.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.AsyncDataSource">
            <summary>
            Represents a base <see cref="T:Awesomium.Core.Data.DataSource"/> that loads resources
            asynchronously.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Awesomium.Core.Data.DataSource">
            <summary>
            Represents the base class for custom managed resource loaders.
            </summary>
            <remarks>
            Local resources are requested using the <c>asset://</c> protocol by default.
            <p/>
            To choose the name of the protocol yourself, explicitly initialize the <see cref="T:Awesomium.Core.WebCore"/>
            (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) setting <see cref="P:Awesomium.Core.WebConfig.AssetProtocol"/>.
            <p/>
            This scenario allows you to override standard protocols (such as <c>http://</c>),
            or use DataSources to handle protocols that are not handled by default (such as
            <c>ftp://</c> and <c>mailto://</c>).
            <note>
            Once assigned to a <see cref="T:Awesomium.Core.WebSession"/>, a <see cref="T:Awesomium.Core.Data.DataSource"/>
            instance can only be used with that <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            It can however be bound to more than one asset hosts, on the same
            <see cref="T:Awesomium.Core.WebSession"/>.
            </note>
            <note type="caution">
            You cannot dispose a <see cref="T:Awesomium.Core.Data.DataSource"/> instance, while it
            is assigned to a <see cref="T:Awesomium.Core.WebSession"/>. Attempting to do so,
            will throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance assigned to a <see cref="T:Awesomium.Core.WebSession"/>,
            is usually destroyed internally when that <see cref="T:Awesomium.Core.WebSession"/> is
            destroyed, or at <see cref="M:Awesomium.Core.WebCore.Shutdown"/>.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <seealso cref="P:Awesomium.Core.WebConfig.AssetProtocol"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Awesomium.Core.NativeViewModel">
            <summary>
            Represents the base class of wrapped native instances
            that need to be properly disposed.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ViewModel">
            <summary>
            This abstract class implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            and provides the main logic that helps subclasses be MVVM friendly.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ViewModel.RaisePropertyChanged(System.String,System.Int32)">
            <summary>
            Helper method to raise a delayed <see cref="E:Awesomium.Core.ViewModel.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
            <param name="updateCycles">
            The number of <see cref="M:Awesomium.Core.WebCore.Update"/> cycles to wait till the event is fired.
            </param>
        </member>
        <member name="M:Awesomium.Core.ViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Core.ViewModel.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Core.ViewModel.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.ViewModel.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="E:Awesomium.Core.ViewModel.PropertyChanged">
            <summary>
            Occurs when the value of a property of this class, has changed.
            </summary>
        </member>
        <member name="M:Awesomium.Core.NativeViewModel.Dispose">
            <summary>
            Perform cleanup of managed resources.
            </summary>
        </member>
        <member name="M:Awesomium.Core.NativeViewModel.OnDispose">
            <summary>
            Called when an instance of this class is being disposed.
            </summary>
        </member>
        <member name="M:Awesomium.Core.NativeViewModel.OnDelete(System.Boolean)">
            <summary>
            Called when you need to invoke the native destructor of an instance, if any.
            </summary>
            <remarks>
            This method is not called for types with no public destructor in C++.
            The base method throws a <see cref="T:System.MethodAccessException"/>.
            </remarks>
            <exception cref="T:System.MethodAccessException">
            C++ destructor does not have public access.
            </exception>
        </member>
        <member name="E:Awesomium.Core.NativeViewModel.Disposed">
            <summary>
            Occurs when an instance of this class has been disposed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.NativeViewModel.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.DataSource.CATCH_ALL">
            <summary>
            The host name used to add a <see cref="T:Awesomium.Core.Data.DataSource"/> that
            catches any unmatched requests.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Called whenever a request is made for a certain path
            on the asset URL that this <see cref="T:Awesomium.Core.Data.DataSource"/> is bound to.
            It is your responsibility to call <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)"/> with a 
            response to this request.
            </summary>
            <param name="request">
            Provides details about the request.
            </param>
            <remarks>
            <note type="caution">
            This method is always called on the main thread. To avoid potential deadlocks, 
            you should not make any calls to <see cref="T:Awesomium.Core.IWebView"/>, <see cref="T:Awesomium.Core.WebCore"/>, 
            or <see cref="T:Awesomium.Core.JSObject"/> within this callback.
            </note>
            <note>
            This method will not be called if a <see cref="E:Awesomium.Core.Data.DataSource.Request"/> handler,
            has set <see cref="P:Awesomium.Core.Data.RequestEventArgs.Handled"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)">
            <summary>
            Sends the response for a previous request.
            </summary>
            <param name="request">
            The request to respond to.
            </param>
            <param name="response">
            A <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> that contains the response data.
            </param>
            <remarks>
            You can call this immediately within <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> or asynchronously 
            (once you've finished loading the resource). This method can be called from any thread.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataSource.SendRequestFailed(Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Sends a response indicating that the request failed.
            </summary>
            <param name="request">
            The request that has failed.
            </param>
            <remarks>
            You can call this immediately within <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> or asynchronously 
            (once you've finished loading the resource). This method can be called from any thread.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.Data.DataSource.Request">
            <summary>
            Occurs <b>before</b> on <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> is called.
            In advanced scenarios, this allows overriding the default handling
            of <see cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/> without the need to subclass the
            <see cref="T:Awesomium.Core.Data.DataSource"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSource.AssetHosts">
            <summary>
            Gets a list of asset hosts, this <see cref="T:Awesomium.Core.Data.DataSource"/>
            has been registered to handle, in this <see cref="P:Awesomium.Core.Data.DataSource.WebSession"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSource.WebSession">
            <summary>
            Gets the <see cref="T:Awesomium.Core.WebSession"/> instance this
            <see cref="T:Awesomium.Core.Data.DataSource"/> has been added to, to handle one or 
            more asset hosts (see <see cref="P:Awesomium.Core.Data.DataSource.AssetHosts"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSource.SyncRoot">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.AsyncDataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.AsyncDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Called asynchronously whenever a request is made for a certain path
            on the asset URL that this <see cref="T:Awesomium.Core.Data.DataSource"/> is bound to.
            It is your responsibility to call <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)"/> with a 
            response to this request.
            </summary>
            <param name="request">
            Provides details about the request.
            </param>
            <remarks>
            <note>
            This method will not be called if a <see cref="E:Awesomium.Core.Data.AsyncDataSource.RequestAsync"/> handler
            or a <see cref="E:Awesomium.Core.Data.DataSource.Request"/> handler, has set <see cref="P:Awesomium.Core.Data.RequestEventArgs.Handled"/> 
            to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.Data.AsyncDataSource.RequestAsync">
            <summary>
            Occurs <b>before</b> on <see cref="M:Awesomium.Core.Data.AsyncDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)"/> is called.
            In advanced scenarios, this allows overriding the default handling
            of <see cref="M:Awesomium.Core.Data.AsyncDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)"/> without the need to subclass the
            <see cref="T:Awesomium.Core.Data.AsyncDataSource"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.HttpDataSource.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.HttpDataSource.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.HttpDataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.Data.DataPakSource">
            <summary>
            Represents a special <see cref="T:Awesomium.Core.Data.DataSource"/> that loads all resources from a PAK file.
            </summary>
            <seealso cref="M:Awesomium.Core.Utilities.WriteDataPak(System.String,System.String,System.String[])"/>
            <seealso cref="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.Boolean,System.String[])"/>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Awesomium.Core.Data.DataPakSource"/> from a PAK file.
            </summary>
            <param name="pakPath">
            The path to the PAK file. This can contain environment variables.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pakPath"/> is empty or <c>null</c> (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified PAK file, was not found.
            </exception>
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a PAK file with the resources in the specified <paramref name="directory"/> and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/>
            instance that loads all resources from the generated PAK file.
            </summary>
            <param name="directory">
            The path to the input directory.
            </param>
            <param name="useExisting">
            Indicates if a an existing PAK file should be used, instead of generating a new one.
            </param>
            <param name="ignoreExt">
            A list of file extensions to ignore (it is not obligatory to prefix the extensions with a dot ".").
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads all resources from the generated PAK file,
            or <c>null</c> (<c>Nothing</c> in Visual Basic), if the specified <paramref name="directory"/> does not exist.
            </returns>
            <remarks>
            This procedure generates a PAK file in the specified <paramref name="directory"/>, that contains
            all the resources in the directory (filtered by <paramref name="ignoreExt"/>).It then creates
            and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads resources from the new PAK file.
            <p/>
            The generated PAK file, has the name of the specified <paramref name="directory"/>.
            <note>
            If a PAK file with the directory's name already exists in the specified <paramref name="directory"/>,
            it is silently overwritten.
            </note>
            <note>
            If you specify <c>true</c> for <paramref name="useExisting"/>, an existing PAK file (if any) with the
            directory's name in the specified <paramref name="directory"/>, will be used instead of generating
            a new one. In this case, extensions specified in <paramref name="ignoreExt"/> are ignored. Note however
            that the existing PAK file may have been created with a different filter (different extensions ignored)
            or before the contents of the specified <paramref name="directory"/> change and may therefore 
            contain outdated resources.
            </note>
            <note type="caution">
            User must have read-write permissions on the specified <paramref name="directory"/>.
            </note>
            <note>
            This procedure fails silently by returning <c>null</c> (<c>Nothing</c> in Visual Basic), 
            if the specified <paramref name="directory"/> does not exist.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.String[])">
            <summary>
            Creates a PAK file with the resources in the specified <paramref name="directory"/> and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/>
            instance that loads all resources from the generated PAK file.
            </summary>
            <param name="directory">
            The path to the input directory.
            </param>
            <param name="ignoreExt">
            A list of file extensions to ignore (it is not obligatory to prefix the extensions with a dot ".").
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads all resources from the generated PAK file,
            or <c>null</c> (<c>Nothing</c> in Visual Basic), if the specified <paramref name="directory"/> does not exist.
            </returns>
            <remarks>
            This procedure generates a PAK file in the specified <paramref name="directory"/>, that contains
            all the resources in the directory (filtered by <paramref name="ignoreExt"/>). It then creates
            and returns a <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance that loads resources from the new PAK file.
            <p/>
            The generated PAK file, has the name of the specified <paramref name="directory"/>.
            <note>
            If a PAK file with the directory's name already exists in the specified <paramref name="directory"/>,
            it is silently overwritten.
            </note>
            <note type="caution">
            User must have read-write permissions on the specified <paramref name="directory"/>.
            </note>
            <note>
            This procedure fails silently by returning <c>null</c> (<c>Nothing</c> in Visual Basic), 
            if the specified <paramref name="directory"/> does not exist.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.DataPakSource.PakPath">
            <summary>
            Gets the path to the PAK file used to load resources from.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CertError">
            <summary>
            Used with <see cref="E:Awesomium.Core.IWebView.CertificateError"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.None">
            <summary>
            The certificate has no errors.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.CommonNameInvalid">
            <summary>
            The certificate's common name does not match the host name.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.DateInvalid">
            <summary>
            The certificate, by our clock, appears to either not yet be 
            valid or to have already expired.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.AuthorityInvalid">
            <summary>
            The certificate is signed by an untrusted authority.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.ContainsErrors">
            <summary>
            The certificate contains errors.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.NoRevocationMechanism">
            <summary>
            The certificate has no mechanism for determining if it is revoked.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.UnableToCheckRevocation">
            <summary>
            The certificate's revocation information is currently unavailable.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.Revoked">
            <summary>
            The certificate has been revoked.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.Invalid">
            <summary>
            The certificate is invalid.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.WeakSignatureAlgorithm">
            <summary>
            The certificate was signed with a weak signature algorithm.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.WeakKey">
            <summary>
            The certificate contains a weak key (eg., a too-small RSA key).
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.NotInDNS">
            <summary>
            The domain has an exclusive list of CERT records with valid 
            fingerprints, none of which match the certificate.
            </summary>
        </member>
        <member name="F:Awesomium.Core.CertError.Unknown">
            <summary>
            The certificate has some other unknown error.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ContentStatusFlags">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebPageInfo"/>. Gives an overall summary of the 
            security of the page's actual content.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ContentStatusFlags.Normal">
            <summary>
            HTTP or HTTPS page has no insecure content.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ContentStatusFlags.DisplayedInsecureContent">
            <summary>
            HTTPS page displayed insecure HTTP resources (such as images or CSS).
            </summary>
        </member>
        <member name="F:Awesomium.Core.ContentStatusFlags.RanInsecureContent">
            <summary>
            HTTPS page ran insecure HTTP resources (such as scripts).
            </summary>
        </member>
        <member name="T:Awesomium.Core.JavascriptRequest">
            <summary>
            Represents a management request sent by a JavaScript
            client through <see cref="T:global.OSMJIF"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JavascriptRequest.Minimize">
            <summary>
            A <see cref="M:global.OSMJIF.minimize(global.Multiple)"/> request.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JavascriptRequest.Maximize">
            <summary>
            A <see cref="M:global.OSMJIF.maximize(global.Multiple)"/> request.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JavascriptRequest.Restore">
            <summary>
            A <see cref="M:global.OSMJIF.restore(global.Multiple)"/> request.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JavascriptRequest.Exit">
            <summary>
            A <see cref="M:global.OSMJIF.exit(global.Multiple)"/> request.
            </summary>
        </member>
        <member name="T:Awesomium.Core.JSDialogFlags">
            <summary>
            Used with <see cref="T:Awesomium.Core.JavascriptDialogEventArgs"/>.
            </summary>
            <seealso cref="P:Awesomium.Core.JavascriptDialogEventArgs.DialogFlags"/>
            <seealso cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/>
        </member>
        <member name="T:Awesomium.Core.SecurityStatus">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebPageInfo"/>. Gives an overall summary of the page's authentication status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.SecurityStatus.Unknown">
            <summary>
            We do not know the security status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.SecurityStatus.Unauthenticated">
            <summary>
            The page is unauthenticated (either retrieved over HTTP/FTP, 
            or retrieved over HTTPS with errors).
            </summary>
        </member>
        <member name="F:Awesomium.Core.SecurityStatus.AuthenticationBroken">
            <summary>
            The page was attempted to be retrieved in an authenticated 
            manner but we were unable to do so (HTTPS errors).
            </summary>
        </member>
        <member name="F:Awesomium.Core.SecurityStatus.Authenticated">
            <summary>
            The page was successfully retrieved over an authenticated protocol such as HTTPs.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebPageInfo">
            <summary>
            Provides security related information for a page currently loaded
            to an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebPageInfo.Empty">
            <summary>
            Gets an empty, uninitialized <see cref="T:Awesomium.Core.WebPageInfo"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebPageInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebPageInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebPageInfo.op_Equality(Awesomium.Core.WebPageInfo,Awesomium.Core.WebPageInfo)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebPageInfo"/> instances are equivalent.
            </summary>
            <param name="wpi1">
            The <see cref="T:Awesomium.Core.WebPageInfo"/> instance that is to the left of the equality operator.
            </param>
            <param name="wpi2">
            The <see cref="T:Awesomium.Core.WebPageInfo"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wpi1"/> and <paramref name="wpi2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebPageInfo.op_Inequality(Awesomium.Core.WebPageInfo,Awesomium.Core.WebPageInfo)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebPageInfo"/> instances are not equal.
            </summary>
            <param name="wpi1">
            The <see cref="T:Awesomium.Core.WebPageInfo"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wpi2">
            The <see cref="T:Awesomium.Core.WebPageInfo"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wpi1"/> and <paramref name="wpi2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebPageInfo.PageURL">
            <summary>
            Gets the current URL of the page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPageInfo.SecurityStatus">
            <summary>
            Gets the page's authentication status.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPageInfo.ContentStatus">
            <summary>
            Gets the page's content security status.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPageInfo.CertError">
            <summary>
            Gets the current error in the page's SSL certificate (if any).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPageInfo.CertSubject">
            <summary>
            Gets the subject of the page's SSL certificate (should match server hostname).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPageInfo.CertIssuer">
            <summary>
            Gets the issuer of the page's SSL certificate.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebTouchPointState">
            <summary>
            An enumeration of the different states for each touch-point.
            </summary>
            <seealso cref="F:Awesomium.Core.WebTouchPoint.State"/>
        </member>
        <member name="F:Awesomium.Core.WebTouchPointState.Undefined">
            <summary>
            Undefined state.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPointState.Released">
            <summary>
            The touch point is released.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPointState.Pressed">
            <summary>
            The touch point is pressed (touched for the first time).
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPointState.Moved">
            <summary>
            The touch point has moved.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPointState.Stationary">
            <summary>
            The touch point is pressed and still (doesn't move).
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPointState.Cancelled">
            <summary>
            The event is canceled.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebTouchEventType">
            <summary>
            Represents the different types of WebTouchEvents.
            </summary>
            <seealso cref="T:Awesomium.Core.WebTouchEvent"/>
        </member>
        <member name="F:Awesomium.Core.WebTouchEventType.Start">
            <summary>
            Indicates a new touch on the surface has occurred.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchEventType.Move">
            <summary>
            Indicates one or more fingers have moved.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchEventType.End">
            <summary>
            Indicates a finger has been lifted from the surface.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchEventType.Cancel">
            <summary>
            Indicates a finger has moved into an invalid area.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebTouchPoint">
            <summary>
            Represents a single touch-point in a multi-touch event.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.Id">
            <summary>
            The unique numeric ID of this touch-point (0 through 7).
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.State">
            <summary>
            The current state of this touch-point.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.ScreenPositionX">
            <summary>
            The horizontal coordinate (in pixels), relative to the screen.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.ScreenPositionY">
            <summary>
            The vertical coordinate (in pixels), relative to the screen.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.PositionX">
            <summary>
            The horizontal coordinate (in pixels), relative to the view.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.PositionY">
            <summary>
            The vertical coordinate (in pixels), relative to the view.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.RadiusX">
            <summary>
            The radius of the ellipse which most closely circumscribes the touch
            area along the x-axis (in pixels). Set this to <c>1</c> if not known.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.RadiusY">
            <summary>
            The radius of the ellipse which most closely circumscribes the touch
            area along the y-axis (in pixels). Set this to <c>1</c> if not known.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.RotationAngle">
            <summary>
            The angle (in degrees) that the ellipse described by <see cref="F:Awesomium.Core.WebTouchPoint.RadiusX"/> and
            <see cref="F:Awesomium.Core.WebTouchPoint.RadiusY"/> is rotated clockwise about its center; 0 if no value is known.
            The value must be greater than or equal to <c>0</c> and less than <c>90</c>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchPoint.Force">
            <summary>
            A relative value of pressure applied, in the range <c>0</c> to <c>1</c>,
            where <c>0</c> is no pressure, and <c>1</c> is the highest level of pressure the 
            touch device is capable of sensing. Set this to <c>0</c> if not known.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebTouchEvent">
            <summary>
            Represents a generic multi-touch event.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.InjectTouchEvent(Awesomium.Core.WebTouchEvent)"/>
        </member>
        <member name="F:Awesomium.Core.WebTouchEvent.Type">
            <summary>
            The type of this multi-touch event.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebTouchEvent.Touches">
            <summary>
            List of all touches which are currently down.
            </summary>
            <remarks>
            <note type="note">
            The maximum number of allowed <see cref="T:Awesomium.Core.WebTouchPoint"/> instances, is 8.
            If the assigned array contains more than 8 instances, only the first 8
            are processed and any additional instances are ignored.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebTouchEvent.ChangedTouches">
            <summary>
            List of all touches whose state has changed since the last <see cref="M:Awesomium.Core.IWebView.InjectTouchEvent(Awesomium.Core.WebTouchEvent)"/>.
            </summary>
            <remarks>
            <note type="note">
            The maximum number of allowed <see cref="T:Awesomium.Core.WebTouchPoint"/> instances, is 8.
            If the assigned array contains more than 8 instances, only the first 8
            are processed and any additional instances are ignored.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.DialogEventArgs">
            <summary>
            Provides data for all <see cref="T:Awesomium.Core.IWebView"/> events that
            expect a user dialog.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebViewCancelEventArgs">
            <summary>
            Provides data for cancelable <see cref="T:Awesomium.Core.IWebView"/> events.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IWebViewEventArgs">
            <summary>
            Interface implemented by the <see cref="T:System.EventArgs"/> passed to all 
            events of an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebViewEventArgs.EventType">
            <summary>
            Gets the type of the event that these event arguments provide information for.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebViewEventArgs.EventName">
            <summary>
            Gets the name of the event that these event arguments provide information for.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebViewCancelEventArgs.EventType">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebViewEventType"/> value identifying the
            <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebViewCancelEventArgs.EventName">
            <summary>
            Gets the name of the <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.DocumentReadyState">
            <summary>
            Represents the state of the DOM when a <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event is fired.
            </summary>
        </member>
        <member name="F:Awesomium.Core.DocumentReadyState.Ready">
            <summary>
            The user can interact with the DOM but the full content of the main frame, may not be loaded yet.
            <p/>
            A <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event with <see cref="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState"/>
            set to <see cref="F:Awesomium.Core.DocumentReadyState.Ready"/>, is guaranteed to always fire at least once
            when a view navigates to a new URL as well as for new views wrapped after a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            A <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event with <see cref="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState"/>
            set to <see cref="F:Awesomium.Core.DocumentReadyState.Ready"/>, may be fired more than once when a page loads.
            </note>
            </summary>
        </member>
        <member name="F:Awesomium.Core.DocumentReadyState.Loaded">
            <summary>
            The full DOM has been loaded and parsed and the user can interact with it.
            <p/>
            <note type="caution">
            A <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event with <see cref="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState"/>
            set to <see cref="F:Awesomium.Core.DocumentReadyState.Loaded"/>, may never be fired for certain views or navigations.
            This can be the case for new views created with JavaScript <c>window.open</c>, passing no URL to load.
            </note>
            </summary>
        </member>
        <member name="T:Awesomium.Core.JavascriptMessageEventHandler">
            <summary>
            Represents the method that will handle a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/> event
            fired upon messages sent by JavaScript clients through <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            and <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> (see: <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/>).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.JavascriptMessageEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.JavascriptMessageEventArgs">
            <summary>
            Provides data for a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/> event fired upon messages sent by JavaScript 
            clients through <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> and 
            <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.UrlEventArgs">
            <summary>
            Provides data for events that provide a URL.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebViewEventArgs">
            <summary>
            Provides data for <see cref="T:Awesomium.Core.IWebView"/> events.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventArgs.Empty">
            <summary>
            Represents an <see cref="T:Awesomium.Core.IWebView"/> event with no specific event data.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebViewEventArgs.EventType">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebViewEventType"/> value identifying the
            <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebViewEventArgs.EventName">
            <summary>
            Gets the name of the <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UrlEventArgs.Url">
            <summary>
            Gets a <see cref="T:System.Uri"/> instance representing the
            URL of the web page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UrlEventArgs.HasErrors">
            <summary>
            Gets if the URI provided by the event, is not a well formed URI.
            </summary>
            <remarks>
            If this property returns <c>true</c>, you can get the originally provided
            erroneous URI, from the <see cref="P:Awesomium.Core.UrlEventArgs.OriginalString"/> property.
            <note>
            When this property is <c>true</c>, the URI provided by the <see cref="P:Awesomium.Core.UrlEventArgs.Url"/>
            property, is usually: <c>"about:error"</c>. This is another way to identify
            that a bad formed URI was provided by the event.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.UrlEventArgs.OriginalString">
            <summary>
            Gets the original URI string provided by the event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMessageEventArgs.Environment">
            <summary>
            Provides access to essential objects of the web-page's current
            JavaScript environment.
            </summary>
            <remarks>
            <note type="note">
            This property only returns a value in an asynchronous Javascript Execution Context,
            i.e. when the <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/> event is the result of
            a <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> 
            and <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.IsSynchronous"/> returns <c>false</c>; otherwise it returns <c>null</c> (<c>Nothing</c> in Visual Basic).
            <p/>
            For details, read: <see href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</see>
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMessageEventArgs.Message">
            <summary>
            The message specified by the JavaScript caller, as the first parameter to a
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> or 
            <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> call.
            </summary>
            <remarks>
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> and 
            <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> allow
            callers pass an empty string for the <i><c>message</c></i> parameter. It is your responsibility
            to handle this situation. However this can never be <c>null</c> (<c>Nothing</c> in Visual Basic).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMessageEventArgs.IsSynchronous">
            <summary>
            Gets if the handler is called synchronously.
            </summary>
            <remarks>
            This is <c>true</c> if a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/> event is the result of
            a <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> call and <c>false</c> if the event
            is the result of a <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> call.
            <p/>
            If this is <c>false</c>, you can still return a response to JavaScript clients through the
            <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Result"/> property. The result will be passed to the <i><c>callback</c></i> function specified
            by the JavaScript caller as the second parameter to a <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> call.
            <p/>
            <note type="caution">
            When <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/> is called synchronously, the view process is blocked until the handler returns.
            Therefore, you cannot make synchronous invocations from inside a synchronous <see cref="T:Awesomium.Core.JavascriptMessageEventHandler"/>,
            as this would cause a deadlock.
            </note>
            <note type="note">
            The synchronous <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> call exceptionally allows JavaScript callers to pass certain kind of
            JavaScript objects to the managed application, that will be included in the <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> array.
            <p/>
            <b>For details, read the documentation of:</b>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            </description>
            </item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments">
            <summary>
            Gets an array of arguments passed after the <i><c>message</c></i> parameter to a
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> or after the <i><c>callback</c></i> parameter
            to a <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> call.
            </summary>
            <remarks>
            <note type="note">
            The synchronous <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> call exceptionally allows JavaScript callers to pass certain kind of
            JavaScript objects to the managed application, that will be included in the <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> array.
            <p/>
            <b>For details, read the documentation of:</b>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            </description>
            </item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMessageEventArgs.Result">
            <summary>
            Gets or sets the result (returned value) passed back to the JavaScript caller.
            </summary>
            <remarks>
            When a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/> is the result of a <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> call,
            the response is synchronously returned to the caller from the <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> call.
            <p/>
            When a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/> event is the result of a <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>
            call and <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.IsSynchronous"/> is <c>false</c>, you can still return a response to JavaScript clients through the
            <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Result"/> property. The result will be passed to the <i><c>callback</c></i> function specified by the JavaScript
            caller as the second parameter to a <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> call.
            <p/>
            <note type="note">
            If no <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Result"/> is specified, <see cref="F:Awesomium.Core.JSValue.Undefined"/> will be returned from a synchronous 
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> call or be passed to the <i><c>callback</c></i> function specified by
            the JavaScript caller as the second parameter to a <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/> call.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.JavascriptRequestEventHandler">
            <summary>
            Represents the method that will handle the will handle events fired upon
            requests issued by JavaScript clients through <see cref="T:global.OSMJIF"/>
            (see: <see cref="E:Awesomium.Core.IWebView.JavascriptRequest"/>).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.JavascriptRequestEventArgs">
            <summary>
            Provides data for a <see cref="E:Awesomium.Core.IWebView.JavascriptRequest"/> event fired upon requests 
            issued by JavaScript clients through <see cref="T:global.OSMJIF"/>.
            </summary>
            <remarks>
            <note type="note">
            Applications handling <see cref="E:Awesomium.Core.IWebView.JavascriptRequest"/>, must
            explicitly set <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.Handled"/> to <c>true</c>
            to let JavaScript clients know that the request has been accepted and processed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken">
            <summary>
            A token passed by the JavaScript client that can be used for
            a secure authentication of the request.
            </summary>
            <remarks>
            This can represent any primitive JavaScript value other than <c>Object</c>.
            Management requests (such as <see cref="M:global.OSMJIF.minimize(global.Multiple)"/>)
            are sent synchronously so that the native application can provide
            a response and therefore JavaScript objects (including JavaScript functions)
            cannot be passed to these requests. Any objects passed by a JavaScript client
            through any of these methods, will be replaced by <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            <p/>
            Note that any string literal or other primitive values passed to the native
            application, are passed through IPC messages. Though wrapped to a native
            <c>JSValue</c> proxy, such data can be intercepted and therefore applications
            and native clients should optionally utilize an encryption they can both
            understand, to increase security.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptRequestEventArgs.Request">
            <summary>
            The management request sent by the JavaScript client.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptRequestEventArgs.Handled">
            <summary>
            Gets or sets if an application has been accepted and processed
            the request.
            </summary>
            <remarks>
            Applications handling <see cref="E:Awesomium.Core.IWebView.JavascriptRequest"/>, must
            explicitly set <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.Handled"/> to <c>true</c>
            to let JavaScript clients know that the request has been accepted and processed.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.SurfaceResizedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.Surface.Resized"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.SurfaceResizedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceResizedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.Surface.Resized"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceResizedEventArgs.NewWidth">
            <summary>
            Gets the new width of the surface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceResizedEventArgs.NewHeight">
            <summary>
            Gets the new height of the surface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceResizedEventArgs.OldWidth">
            <summary>
            Gets the old width of the surface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceResizedEventArgs.OldHeight">
            <summary>
            Gets the old height of the surface.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PageInfoEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowPageInfo"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PageInfoEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PageInfoEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ShowPageInfo"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PageInfoEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebPageInfo"/> that provides security related information 
            for a page currently loaded to the <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PageInfoEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application. The default is <c>false</c>.
            </summary>
            <remarks>
            When set to <c>false</c> (default), a technology specific <c>WebControl</c> may display 
            its predefined dialog (if any).
            </remarks>
        </member>
        <member name="T:Awesomium.Core.DocumentReadyEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.DocumentReadyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.DocumentReadyEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DocumentReadyEventArgs.Environment">
            <summary>
            Provides access to essential objects of the web-page's current
            JavaScript environment.
            </summary>
            <remarks>
            <note type="note">
            This property only returns a value when <see cref="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState"/> is <see cref="F:Awesomium.Core.DocumentReadyState.Loaded"/>; 
            otherwise, it returns <c>null</c> (<c>Nothing</c> in Visual Basic).
            <p/>
            For details, read: <see href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</see>
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState">
            <summary>
            Gets the state of the DOM when a <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event is fired.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>
            A <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event with <see cref="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState"/>
            set to <see cref="F:Awesomium.Core.DocumentReadyState.Ready"/>, is guaranteed to always fire at least once
            when a view navigates to a new URL as well as for new views wrapped after a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            </description>
            </item>
            <item>
            <description>
            A <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event with <see cref="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState"/>
            set to <see cref="F:Awesomium.Core.DocumentReadyState.Ready"/>, may be fired more than once when a page loads.
            </description>
            </item>
            <item>
            <description>
            A <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event with <see cref="P:Awesomium.Core.DocumentReadyEventArgs.ReadyState"/>
            set to <see cref="F:Awesomium.Core.DocumentReadyState.Loaded"/>, may never be fired for certain views or navigations.
            This can be the case for new views created with JavaScript <c>window.open</c>, passing no URL to load.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Awesomium.Web.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:Awesomium.Web.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:Awesomium.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode. </param>
            <param name="output">The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="T:Awesomium.Core.JavascriptExecutionContextMethod`1">
            <summary>
            Represents the method executed in an asynchronous Javascript Execution Context
            created with <see cref="M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext``1(Awesomium.Core.JavascriptExecutionContextMethod{``0},``0)"/>.
            </summary>
            <param name="global">
            Provides access to essential objects of the web-page's current
            JavaScript environment.
            </param>
            <param name="state">
            A user defined object passed to the method through
            <see cref="M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext``1(Awesomium.Core.JavascriptExecutionContextMethod{``0},``0)"/>.
            </param>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="T:Awesomium.Core.JavascriptExecutionContextMethod">
            <summary>
            Represents the method executed in an asynchronous Javascript Execution Context
            created with <see cref="M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext(Awesomium.Core.JavascriptExecutionContextMethod)"/>.
            </summary>
            <param name="global">
            Provides access to essential objects of the web-page's current
            JavaScript environment.
            </param>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="T:Awesomium.Core.JSFunction">
            <summary>
            A <see cref="T:Awesomium.Core.JSObject"/> that represents a JavaScript <c>Function</c> object.
            </summary>
        </member>
        <member name="T:Awesomium.Core.JSObject">
            <summary>
            Represents an <c>Object</c> type in JavaScript. You can add, set, get,
            and remove named Properties and invoke named Methods.
            </summary>
            <remarks>
            There are two major types of <c>JSObjects</c>, <i>Local</i> and <i>Remote</i>. 
            Local objects only have Properties and can be accessed without error
            in the main process. Users can only create Local objects. Remote
            objects are defined within the V8 engine in a separate process
            and can have both Properties and Methods.
            <p/>
            Method calls on Remote objects are proxied to the process and execute synchronously but
            may fail for various reasons (see <see cref="M:Awesomium.Core.JSObject.GetLastError"/>).
            <p/>
            <see cref="T:Awesomium.Core.JSObject"/> supports the <b>Dynamic Language Runtime</b> (DLR). 
            This allows flexible coding, much similar to Javascript (which is a dynamic language).
            <p/>
            Users can create a subclass of a <see cref="T:Awesomium.Core.JSObject"/> to construct local
            objects with an interface that reflects standard features of the object. For details,
            read the documentation of <see cref="M:Awesomium.Core.JSObject.#ctor(Awesomium.Core.JSObject)"/>.
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary> 
            Provides the implementation of getting a member. Derived classes can override
            this method to customize behavior. When not overridden the call site requesting the 
            binder determines the behavior. 
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="result">The result of the get operation.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary> 
            Provides the implementation of setting a member. Derived classes can override
            this method to customize behavior. When not overridden the call site requesting the
            binder determines the behavior.
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="value">The value to set.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Provides the implementation of deleting a member.  Derived classes can override 
            this method to customize behavior.  When not overridden the call site requesting the
            binder determines the behavior. 
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation of calling a member. Derived classes can override 
            this method to customize behavior.  When not overridden the call site requesting the 
            binder determines the behavior.
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="args">The arguments to be used for the invocation.</param>
            <param name="result">The result of the invocation.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides the implementation of converting the IDynamicObject to another type. Derived classes
            can override this method to customize behavior. When not overridden the call site 
            requesting the binder determines the behavior.
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="result">The result of the conversion.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
            <summary> 
            Provides the implementation of creating an instance of the IDynamicObject. Derived classes
            can override this method to customize behavior. When not overridden the call site requesting 
            the binder determines the behavior.
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="args">The arguments used for creation.</param>
            <param name="result">The created instance.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary> 
            Provides the implementation of invoking the IDynamicObject. Derived classes can
            override this method to customize behavior. When not overridden the call site requesting 
            the binder determines the behavior. 
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="args">The arguments to be used for the invocation.</param>
            <param name="result">The result of the invocation.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>
            Provides the implementation of performing a binary operation. Derived classes can
            override this method to customize behavior. When not overridden the call site requesting
            the binder determines the behavior. 
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="arg">The right operand for the operation.</param>
            <param name="result">The result of the operation.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
            <summary> 
            Provides the implementation of performing a unary operation. Derived classes can
            override this method to customize behavior. When not overridden the call site requesting 
            the binder determines the behavior.
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="result">The result of the operation.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation of performing a get index operation. Derived classes can 
            override this method to customize behavior. When not overridden the call site requesting
            the binder determines the behavior. 
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="indexes">The indexes to be used.</param>
            <param name="result">The result of the operation.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary> 
            Provides the implementation of performing a set index operation. Derived classes can
            override this method to customize behavior. When not overridden the call site requesting
            the binder determines the behavior.
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="indexes">The indexes to be used.</param>
            <param name="value">The value to set.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
            <summary>
            Provides the implementation of performing a delete index operation. Derived classes 
            can override this method to customize behavior. When not overridden the call site 
            requesting the binder determines the behavior.
            </summary>
            <param name="binder">The binder provided by the call site.</param>
            <param name="indexes">The indexes to be deleted.</param>
            <returns>true if the operation is complete, false if the call site should determine behavior.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.IDynamicObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names. 
            </summary>
            <returns>The list of dynamic member names.</returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.#ctor(Awesomium.Core.JSObject)">
            <summary>
            Constructor implemented by inheritors to support restoration
            of a local <see cref="T:Awesomium.Core.JSObject"/> that has been passed to V8,
            back to the initial managed type.
            </summary>
            <param name="obj">
            The remote <see cref="T:Awesomium.Core.JSObject"/> that will be wrapped by an
            extended subclass.
            </param>
            <remarks>
            Local <c>JSObjects</c> created using the parameterless constructor
            that are passed to the web-page (either through a property or as
            arguments to a method call) are <i>disconnected</i> from the local
            instance and turned into remote objects. (Think of it as if local
            objects that are passed to the web-page, are treated as immutable
            value types the moment they are being passed.)
            <p/>
            Any further changes to the local object after it has been passed
            to the web-page, will not be reflected to the remote object.
            <p/>
            What's more, when this object is reacquired from the web-page, it is
            no longer the same local object that was initially passed, but a new 
            remote object.
            <p/>
            If local objects that are passed to the web-page were subclasses of
            <see cref="T:Awesomium.Core.JSObject"/>, Awesomium.NET provides a way to automatically 
            cast such objects back to their initial managed type.
            <p/>
            <h3>Requirements:</h3>
            To support automatic conversion of custom local objects back to their
            original type when they are reacquired from a web-page:
            <list type="bullet">
            <item>
            <description>
            The subclass of <see cref="T:Awesomium.Core.JSObject"/> must be public. If it's a class member,
            any parent classes must also be public.
            </description>
            </item>
            <item>
            <description>
            The subclass of <see cref="T:Awesomium.Core.JSObject"/> must implement a constructor that takes
            one parameter of type <see cref="T:Awesomium.Core.JSObject"/>. The constructor should call this 
            base constructor.
            </description>
            </item>
            </list>
            For an example, see the <b>Examples</b> section.
            <p/>
            <note type="caution">
            Do not use this constructor to create a copy of a <see cref="T:Awesomium.Core.JSObject"/> that
            persist outside a Javascript Execution Context (JEC). Objects created with this
            constructor inside a JEC, are still eligible for automatic disposal once the
            execution context is exited. Instead, use the <see cref="M:Awesomium.Core.JSObject.Clone"/> method to
            create persistent copies.
            </note>
            </remarks>
            <example>
            <code lang="C#">
            public class SizeObject : JSObject
            {
                private const string PROP_WIDTH = "width";
                private const string PROP_HEIGHT = "height";
            
                // Public parameterless constructor
                // to create the local object.
                public SizeObject()
                { }
            
                // Custom public constructor
                // to create the local object.
                public SizeObject( int width, int height )
                {
                    this.Width = width;
                    this.Height = height;
                }
            
                // Special constructor called by Awesomium.NET
                // to restore an instance of this object, after
                // it has been passed to the web-page.
                protected SizeObject( JSObject obj )
                    : base( obj )
                { }
                public int Width
                {
                    get
                    {
                        JSValue value = this[ PROP_WIDTH ];
                        if ( !value.IsNumber )
                            return -1;
            
                        return (int)value;
                    }
                    set
                    {
                        this[ PROP_WIDTH ] = value;
                    }
                }
            
                public int Height
                {
                    get
                    {
                        JSValue value = this[ PROP_HEIGHT ];
                        if ( !value.IsNumber )
                            return -1;
            
                        return (int)value;
                    }
                    set
                    {
                        this[ PROP_HEIGHT ] = value;
                    }
                }
            }
            
            [...]
            
            private void OnDocumentReady( object sender, DocumentReadyEventArgs e )
            {
                // When ReadyState is Ready, you can execute JavaScript against
                // the DOM but all resources are not yet loaded. Wait for Loaded.
                if ( e.ReadyState == DocumentReadyState.Ready )
                    return;
            
                // Create an instance of our custom JSObject and initialize it.
                SizeObject size = new SizeObject( 400, 200 );
                // Acquire the current window object from the web-page.
                JSObject window = webControl.ExecuteJavascriptWithResult( "window" );
                // Assign our object to a new property on window.
                window[ "sizeVar" ] = size;
            
                // Execute some JavaScript synchronously that will change the value
                // of the width property of our object.
                webControl.ExecuteJavascriptWithResult( "window.sizeVar.width = 300" );
            
                // Reacquire the object from the web-page (it's now a new remote instance).
                // Take some precautions and do not cast directly as JavaScript in the page
                // may have deleted or changed the value type of the window.sizeVar property.
                size = (JSObject)window[ "sizeVar" ] as SizeObject;
            
                // All JSObjects implement IEnumerable to enumerate their
                // properties, just as in JavaScript.
                foreach ( var property in size )
                    System.Diagnostics.Debug.Print( property );
            
                // Print the current size represented by our custom JSObject.
                System.Diagnostics.Debug.Print( String.Format( "{0}x{1}", size.Width, size.Height ) );
            }
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.JSObject.#ctor">
            <summary>
            Creates a <see cref="F:Awesomium.Core.JSObjectType.Local"/> JavaScript object.
            </summary>
            <remarks>
            <note>
            Local objects can only have Properties and can be accessed 
            without error in the main process.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Awesomium.Core.JSObject"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Awesomium.Core.JSObject.Dispose">
            <summary>
            Destroys and releases this <see cref="T:Awesomium.Core.JSObject"/> instance.
            </summary>
            <remarks>
            <note>
            Remote objects are proxies of the actual objects, 
            defined in a separate process within the V8 engine.
            Disposing them posses no risk to the actual remote object.
            <p/>
            You should only dispose remote objects acquired outside a Javascript Execution Context or objects that
            have been cloned using <see cref="M:Awesomium.Core.JSObject.Clone"/>. Wrapping your code with a <c>using</c> (<c>Using</c> in Visual Basic) 
            statement, is the suggested technique. <b>You do not need to dispose objects acquired inside a Javascript Execution Context</b>.
            <p/>
            For details, read: <see href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</see>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.Update(System.Int32)">
            <summary>
            Rebuild the object graph, bottom-up.
            </summary>
            <remarks>
            Awesomium treats a local object as immutable passed by value.
            If a local object A has a property that has been assigned as 
            value local object B, further changes to local object B
            will not be reflected to the object assigned to the property of
            object A. To resolve this in Awesomium.NET, local objects
            do not persist any properties to the native local object but
            instead they cache them to an internal dictionary. Only before
            the local object is passed to V8, we persist these properties
            to the underlying native local object, starting from the deep-most
            object to assure that the latest values are persisted. We use
            a depth limit of 12 which is similar to the one used by native
            Awesomium and it must be documented.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSObject.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSObject.ToString">
            <summary>
            Gets the textual representation of the object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> value representing
            the textual representation of the object.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetPropertyNames">
            <summary>
            Gets an array of names of this object's properties.
            </summary>
            <returns>
            An array of <see cref="T:System.String"/> representing the names of
            this object's properties.
            </returns>
            <remarks>
            When in a <see href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</see>,
            this property returns all properties owned by the JavaScript
            <c>Object</c>, including non-enumerable properties and properties 
            of type <c>Function</c> (methods). To get a list of methods only,
            use <see cref="M:Awesomium.Core.JSObject.GetMethodNames"/>.
            <p/>
            <see cref="M:Awesomium.Core.JSObject.GetPropertyNames"/> as well <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>), 
            report both data accessors as well as function members while <see cref="M:Awesomium.Core.JSObject.HasProperty(System.String)"/> reports the existence 
            of data accessors only and not of function members (methods).
            <p/>
            <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>), will return a value in all situations.
            If a property does not exist it returns <see cref="F:Awesomium.Core.JSValue.Undefined"/>. Even if you try to implicitly
            cast the returned value to a <see cref="T:Awesomium.Core.JSObject"/> or <see cref="T:Awesomium.Core.JSFunction"/> and the property
            does not exist or its value is not an <c>Object</c> or <c>Function</c>, the indexer will return
            a special invalid <see cref="T:Awesomium.Core.JSObject"/> or <see cref="T:Awesomium.Core.JSFunction"/> that is equivalent to
            <see cref="F:Awesomium.Core.JSValue.Undefined"/>. When these are checked against <c>null</c> (<c>Nothing</c> in
            Visual Basic) they will return <c>true</c> and when converted to <see cref="T:System.Boolean"/> they are
            converted to <c>false</c>. Therefore it is suggested that you directly attempt to acquire the
            value of a property using the <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>)
            and then check the validity of the returned value, without a prior call to either <see cref="M:Awesomium.Core.JSObject.HasProperty(System.String)"/>
            or <see cref="M:Awesomium.Core.JSObject.GetPropertyNames"/> that both perform an unnecessary synchronous call to the child process.
            <note type="note">
            <see cref="T:Awesomium.Core.JSObject"/> implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and it allows you to enumerate
            the names of enumerable properties owned by the JavaScript <c>Object</c>. Enumeration only reports
            enumerable properties while <see cref="M:Awesomium.Core.JSObject.GetPropertyNames"/> will return all property names, including
            those not enumerable. For details, read: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">
            Enumerability and ownership of properties</a>
            </note>
            </remarks>
            <example>
            The following example demonstrates the usage of <see cref="M:Awesomium.Core.JSObject.GetPropertyNames"/> and its
            behavior compared to enumerating the <see cref="T:Awesomium.Core.JSObject"/>.
            <code lang="JavaScript">
            var myObject = {};
            Object.defineProperty(myObject, "name", { value: 'John', enumerable: true });
            Object.defineProperty(myObject, "age", { value: 29, enumerable: false });
            </code>
            <code lang="C#">
            JSObject myObject = webView.ExecuteJavascriptWithResult( "myObject" );
            
            if ( !myObject )
                return;
            
            foreach ( var property in myObject )
                // Will print 'name' only.
                Console.WriteLine( property );
                
            String[] props = myObject.GetPropertyNames();
            
            foreach ( var property in props )
                // Will print 'name' and 'age'.
                Console.WriteLine( property );
            </code>
            </example>
            <seealso cref="M:Awesomium.Core.JSObject.HasProperty(System.String)"/>
        </member>
        <member name="M:Awesomium.Core.JSObject.HasProperty(System.String)">
            <summary>
            Gets if this object has a property with the specified name.
            </summary>
            <param name="name">
            The name of the property to look for.
            </param>
            <returns>
            <c>true</c> if this object has a property with the specified
            name; <c>false</c> otherwise.
            </returns>
            <remarks>
            <see cref="M:Awesomium.Core.JSObject.HasProperty(System.String)"/> reports the existence of data accessors only and not
            of function members (methods). <see cref="M:Awesomium.Core.JSObject.GetPropertyNames"/> as well <see cref="T:Awesomium.Core.JSObject"/>'s
            indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>), report both data accessors as well as function members.
            <p/>
            <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>), will return a value in all situations.
            If a property does not exist it returns <see cref="F:Awesomium.Core.JSValue.Undefined"/>. Even if you try to implicitly
            cast the returned value to a <see cref="T:Awesomium.Core.JSObject"/> or <see cref="T:Awesomium.Core.JSFunction"/> and the property
            does not exist or its value is not an <c>Object</c> or <c>Function</c>, the indexer will return
            a special invalid <see cref="T:Awesomium.Core.JSObject"/> or <see cref="T:Awesomium.Core.JSFunction"/> that is equivalent to
            <see cref="F:Awesomium.Core.JSValue.Undefined"/>. When these are checked against <c>null</c> (<c>Nothing</c> in
            Visual Basic) they will return <c>true</c> and when converted to <see cref="T:System.Boolean"/> they are
            converted to <c>false</c>. Therefore it is suggested that you directly attempt to acquire the
            value of a property using the <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>)
            and then check the validity of the returned value, without a prior call to either <see cref="M:Awesomium.Core.JSObject.HasProperty(System.String)"/>
            or <see cref="M:Awesomium.Core.JSObject.GetPropertyNames"/> that both perform an unnecessary synchronous call to the child process.
            </remarks>
            <example>
            The following example demonstrates the usage of <see cref="M:Awesomium.Core.JSObject.HasProperty(System.String)"/> and also explains
            why using it is most of the times unnecessary.
            <code lang="C#">
            JSObject window = webView.ExecuteJavascriptWithResult( "window" );
            
            if ( !window )
                return;
            
            // Notice the case. JavaScript is case-sensitive. There may be a property
            // named 'Close' but this is not the 'close' method.
            if ( !window.HasProperty( "Close" ) )
                return;
            
            // Attempt to get the value of the property and implicitly cast it to
            // a JSFunction, assuming it's going to be a function member.
            JSFunction closeMethod = window[ "Close" ];
            
            // 'closeMethod' will be a special invalid (undefined) object if the
            // property does not exist or if it is not a function member. When 
            // converted to Boolean, it will be 'false'. This check is enough, therefore
            // the synchronous 'HasProperty' call above, is not needed.
            if ( !closeMethod )
                return;
            </code>
            <code lang="VB">
            Dim window As JSObject = webView.ExecuteJavascriptWithResult("window")
            
            If Not window Then Return
            
            ' Notice the case. JavaScript is case-sensitive. There may be a property
            ' named 'Close' but this is not the 'close' method.
            If Not window.HasProperty("Close") Then Return
            
            ' Attempt to get the value of the property and implicitly cast it to
            ' a JSFunction, assuming it's going to be a function member.
            Dim closeMethod As JSFunction = window("Close")
            
            ' 'closeMethod' will be a special invalid (undefined) object if the
            ' property does not exist or if it is not a function member. When 
            ' converted to Boolean, it will be 'False'. This check is enough, therefore
            ' the synchronous 'HasProperty' call above, is not needed.
            If Not CBool(closeMethod) Then Return
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.JSObject.RemoveProperty(System.String)">
            <summary>
            Removes the property with the specified name, if any.
            </summary>
            <param name="name">
            The name of the property to remove.
            </param>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetMethodNames">
            <summary>
            Gets an array of names of this object's methods.
            </summary>
            <returns>
            An array of <see cref="T:System.String"/> representing the names of
            this object's methods.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSObject.HasMethod(System.String)">
            <summary>
            Gets if this object has a method with the specified name.
            </summary>
            <param name="name">
            The name of the method to look for.
            </param>
            <returns>
            <c>true</c> if this object has a method with the specified
            name; <c>false</c> otherwise.
            </returns>
            <remarks>
            <see cref="M:Awesomium.Core.JSObject.HasMethod(System.String)"/> reports the existence of function members (methods) only.
            <see cref="M:Awesomium.Core.JSObject.GetPropertyNames"/> as well <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>), 
            report both data accessors as well as function members.
            <p/>
            <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>), will return a value in all situations.
            If a property does not exist it returns <see cref="F:Awesomium.Core.JSValue.Undefined"/>. Even if you try to implicitly
            cast the returned value to a <see cref="T:Awesomium.Core.JSObject"/> or <see cref="T:Awesomium.Core.JSFunction"/> and the property
            does not exist or its value is not an <c>Object</c> or <c>Function</c>, the indexer will return
            a special invalid <see cref="T:Awesomium.Core.JSObject"/> or <see cref="T:Awesomium.Core.JSFunction"/> that is equivalent to
            <see cref="F:Awesomium.Core.JSValue.Undefined"/>. When these are checked against <c>null</c> (<c>Nothing</c> in
            Visual Basic) they will return <c>true</c> and when converted to <see cref="T:System.Boolean"/> they are
            converted to <c>false</c>. Therefore it is suggested that you directly attempt to acquire the
            value of a property using the <see cref="T:Awesomium.Core.JSObject"/>'s indexer (<see cref="P:Awesomium.Core.JSObject.Property(System.String)"/>)
            and then check the validity of the returned value, without a prior call to either <see cref="M:Awesomium.Core.JSObject.HasMethod(System.String)"/>
            or <see cref="M:Awesomium.Core.JSObject.GetMethodNames"/> that both perform an unnecessary synchronous call to the child process.
            </remarks>
            <example>
            The following example demonstrates the usage of <see cref="M:Awesomium.Core.JSObject.HasMethod(System.String)"/> and also explains
            why using it is most of the times unnecessary.
            <code lang="C#">
            JSObject window = webView.ExecuteJavascriptWithResult( "window" );
            
            if ( !window )
                return;
            
            // Check if a function member named 'close' exists.
            if ( !window.HasMethod( "close" ) )
                return;
            
            // Attempt to get the value of the property and implicitly cast it to
            // a JSFunction, assuming it's going to be a function member.
            JSFunction closeMethod = window[ "close" ];
            
            // 'closeMethod' will be a special invalid (undefined) object if the
            // property does not exist or if it is not a function member. When 
            // converted to Boolean, it will be 'false'. This check is enough, therefore
            // the synchronous 'HasMethod' call above, is not needed.
            if ( !closeMethod )
                return;
            </code>
            <code lang="VB">
            Dim window As JSObject = webView.ExecuteJavascriptWithResult("window")
            
            If Not window Then Return
            
            ' Check if a function member named 'close' exists.
            If Not window.HasMethod("close") Then Return
            
            ' Attempt to get the value of the property and implicitly cast it to
            ' a JSFunction, assuming it's going to be a function member.
            Dim closeMethod As JSFunction = window("close")
            
            ' 'closeMethod' will be a special invalid (undefined) object if the
            ' property does not exist or if it is not a function member. When 
            ' converted to Boolean, it will be 'False'. This check is enough, therefore
            ' the synchronous 'HasMethod' call above, is not needed.
            If Not CBool(closeMethod) Then Return
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetPropertyDescriptor(System.String)">
            <summary>
            Gets a <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> instance representing the property 
            descriptor of a JavaScript object's property.
            </summary>
            <param name="propertyName">
            The name of the property whose description is to be retrieved.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> instance representing the property 
            descriptor of a JavaScript object's property, or <c>null</c> (<c>Nothing</c>
            in Visual Basic) if no property descriptor was specified for this property.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            You cannot get a property descriptor synchronously from inside a synchronous
            <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>.
            </exception>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">
            Object.getOwnPropertyDescriptor()
            </seealso>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">
            Object.defineProperty()
            </seealso>
        </member>
        <member name="M:Awesomium.Core.JSObject.Bind(System.String,System.Boolean,Awesomium.Core.JavascriptMethodEventHandler)">
            <summary>
            <b>[This method is deprecated. Please use any of the new overloads.]</b>
            </summary>
            <param name="methodName"></param>
            <param name="hasReturnValue"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Awesomium.Core.JSObject.Bind(System.String,Awesomium.Core.JavascriptMethodHandler)">
            <summary>
            Creates a custom method that returns a value, and binds it to a <see cref="T:Awesomium.Core.JavascriptMethodHandler"/> delegate.
            </summary>
            <param name="methodName">
            The name of the method to create or substitute.
            </param>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JavascriptMethodHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            If the method exists already, it is substituted by the custom method. This
            allows you to bind standard methods of HTML DOM objects, to managed
            event handlers that are called when the methods are called from JavaScript.
            <p/>
            <note type="caution">
            Methods that return a value are called synchronously (the view process is blocked until the handler returns).
            Therefore, you cannot make synchronous invocations from inside a synchronous <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            as this would cause a deadlock. For the same reason, no JavaScript objects can be passed to a <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            that is called synchronously. Any such objects passed from JavaScript, will be replaced with <see cref="F:Awesomium.Core.JSValue.Undefined"/> in the 
            <see cref="P:Awesomium.Core.JavascriptMethodEventArgs.Arguments"/> array.
            </note>
            <p/>
            To create and bind to a custom method that is called asynchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.BindAsync(System.String,Awesomium.Core.JavascriptAsyncMethodHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            You can create and bind to custom methods, using both the regular API and the Dynamic
            Language Runtime (DLR) supported by <see cref="T:Awesomium.Core.JSObject"/>. The following examples, demonstrate both:
            <p/>
            <h3>Regular API:</h3>
            <code lang="C#">
            if ( !webView.IsLive )
            	return;
            
            // Create and acquire a Global Javascript object.
            // These object persist for the lifetime of the web-view.
            using ( JSObject myGlobalObject = webView.CreateGlobalJavascriptObject( "myGlobalObject" ) )
            {
            	// The handler is of type JavascriptMethodHandler. Here we define it
            	// using a lambda expression.
            	myGlobalObject.Bind( "myMethod", ( s, e ) =&gt;
            	{
            	    // Provide a response.
            		return "My response";
            	} );
            }
            </code>
            <code lang="VB">
            If (Not webView.IsLive) Then Return
            
            ' Create and acquire a Global Javascript object.
            ' These object persist for the lifetime of the web-view.
            Using myGlobalObject As JSObject = webView.CreateGlobalJavascriptObject("myGlobalObject")
            	' The handler is of type JavascriptMethodHandler. Here we define it
            	' using a lambda expression.
            	myGlobalObject.Bind("myMethod", 
            		Function(s, e)
            	        ' Provide a response.
            			Return "My response"
            		End Function)
            End Using
            </code>
            <h3>Dynamic Language Runtime (DLR)</h3>
            <code lang="C#">
            if ( !webView.IsLive )
            	return;
            
            // Create and acquire a Global Javascript object. These object persist for the lifetime of the web-view.
            // Notice that we need to explicitly cast to JSObject before assigning to a dynamic. Since all Awesomium
            // Javascript Integration API members normally return JSValue, the CLR would not know what to assign to
            // 'dynamic'. Only JSObject (and subclasses of it) support the DLR.
            dynamic myGlobalObject = (JSObject)webView.CreateGlobalJavascriptObject( "myGlobalObject" );
            
            // Make sure we have the object.
            if ( !myGlobalObject )
            	return;
            
            using ( myGlobalObject )
            {
            	// Create and bind to a synchronous custom method dynamically.
            	myGlobalObject.myMethod = (JavascriptMethodDelegate)OnCustomJavascriptMethod;
            
            	// Our method can now be executed from JavaScript. It could be JavaScript already available in the page.
            	// For this sample, we will inject the JavaScript ourselves and execute it.
            	string jsResponse = webView.ExecuteJavascriptWithResult( "myGlobalObject.myMethod('This is a call from Javascript.');" );
            
            	if ( !String.IsNullOrEmpty( jsResponse ) )
            		// Print the response.
            		Debug.Print( String.Format( "And this is the response: {0}", jsResponse ) );
            }
            </code>
            <code lang="VB">
            Option Strict Off
            
            [...]
            
            If Not webView.IsLive Then Return
            
            ' Create and acquire a Global Javascript object. These object persist for the lifetime of the web-view.
            ' Notice that we need to explicitly cast to JSObject before assigning to a dynamic. Since all Awesomium
            ' Javascript Integration API members normally return JSValue, the CLR would not know what to assign to
            ' Dim. Only JSObject (and subclasses of it) support the DLR.
            Dim myGlobalObject = CType(webView.ExecuteJavascriptWithResult("myGlobalObject"), JSObject)
            
            ' Make sure we have the object.
            If Not myGlobalObject Then
            	Return
            End If
            
            Using myGlobalObject
            	' Create and bind to a synchronous custom method dynamically.
            	myGlobalObject.myMethod = CType(AddressOf OnCustomJavascriptMethod, JavascriptMethodHandler)
            
            	' Our method can now be executed from JavaScript. It could be JavaScript already available in the page.
            	' For this sample, we will inject the JavaScript ourselves and execute it.
            	Dim jsResponse As String = webView.ExecuteJavascriptWithResult("myGlobalObject.myMethod('This is a call from Javascript.');")
            
            	If Not String.IsNullOrEmpty(jsResponse) Then
            		' Print the response.
            		Debug.Print(String.Format("And this is the response: {0}", jsResponse))
            	End If
            End Using
            </code>
            </example>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.Bind(Awesomium.Core.JavascriptMethodHandler)">
            <summary>
            Creates a custom method that returns a value, and binds it to a <see cref="T:Awesomium.Core.JavascriptMethodHandler"/> delegate.
            </summary>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JavascriptMethodHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            The name of the method is determined by checking the <see cref="P:System.Reflection.MemberInfo.Name"/> of the managed handler.
            Therefore, you cannot pass an anonymous delegate, a lambda expression or a delegate returned from a property getter to this method.
            Instead, use an overload that takes a <c>methodName</c> parameter.
            <p/>
            If the method exists already, it is substituted by the custom method. This allows you to bind standard methods of HTML DOM objects, 
            to managed event handlers that are called when the methods are called from JavaScript.
            <p/>
            <note type="caution">
            Methods that return a value are called synchronously (the view process is blocked until the handler returns).
            Therefore, you cannot make synchronous invocations from inside a synchronous <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            as this would cause a deadlock. For the same reason, no JavaScript objects can be passed to a <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            that is called synchronously. Any such objects passed from JavaScript, will be replaced with <see cref="F:Awesomium.Core.JSValue.Undefined"/> in the 
            <see cref="P:Awesomium.Core.JavascriptMethodEventArgs.Arguments"/> array.
            </note>
            <p/>
            To create and bind to a custom method that is called asynchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.BindAsync(Awesomium.Core.JavascriptAsyncMethodHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            You can create and bind custom methods, using both the regular and the dynamic
            API. The following examples, demonstrate both:
            <p/>
            <b>Regular API:</b>
            <code lang="C#">
            if ( !webView.IsLive )
            	return;
            
            // Create and acquire a Global Javascript object.
            // These objects persist for the lifetime of the web-view.
            using ( JSObject myGlobalObject = webView.CreateGlobalJavascriptObject( "myGlobalObject" ) )
            {
            	// The method name is determined from the passed handler's name.
            	// Therefore we cannot pass a lambda expression to this overload.
            	myGlobalObject.Bind( myMethod );
            }
            
            private JSValue myMethod( object sender, JavascriptMethodEventArgs e )
            {
                // Provide a response.
                return "My response";
            }
            </code>
            <code lang="VB">
            If (Not webView.IsLive) Then Return
            
            ' Create and acquire a Global Javascript object.
            ' These object persist for the lifetime of the web-view.
            Using myGlobalObject As JSObject = webView.CreateGlobalJavascriptObject("myGlobalObject")
            	' The method name is determined from the defined handler's name.
            	' Therefore we cannot pass a lambda expression to this overload.
            	myGlobalObject.Bind(myMethod)
            End Using
            
            Public Function myMethod(sender As Object, e As JavascriptMethodEventArgs) As JSValue
                ' Provide a response.
            	Return "My response"
            End Function
            </code>
            </example>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.ArgumentException">
            You cannot pass an anonymous delegate, a lambda expression or a delegate returned from or representing 
            a property getter to this method. Instead, use an overload that takes a <c>methodName</c> parameter.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.Bind(System.String,Awesomium.Core.JSFunctionHandler)">
            <summary>
            Creates a custom method that returns a value, and binds it to a <see cref="T:Awesomium.Core.JSFunctionHandler"/> delegate.
            </summary>
            <param name="methodName">
            The name of the method to create or substitute.
            </param>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JSFunctionHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            If the method exists already, it is substituted by the custom method. This
            allows you to bind standard methods of HTML DOM objects, to managed
            event handlers that are called when the methods are called from JavaScript.
            <p/>
            <note type="caution">
            Methods that return a value are called synchronously (the view process is blocked until the handler returns).
            Therefore, you cannot make synchronous invocations from inside a synchronous <see cref="T:Awesomium.Core.JSFunctionHandler"/>
            as this would cause a deadlock. For the same reason, no JavaScript objects can be passed to a <see cref="T:Awesomium.Core.JSFunctionHandler"/>
            that is called synchronously. Any such objects passed from JavaScript, will be replaced with <see cref="F:Awesomium.Core.JSValue.Undefined"/> in the 
            <c>arguments</c> array.
            </note>
            <p/>
            To create and bind to a custom method that is called asynchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.BindAsync(System.String,Awesomium.Core.JSFunctionAsyncHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            You can create and bind to custom methods, using both the regular API and the Dynamic
            Language Runtime (DLR) supported by <see cref="T:Awesomium.Core.JSObject"/>. The following examples, demonstrate both:
            <p/>
            <h3>Regular API:</h3>
            <code lang="C#">
            if ( !webView.IsLive )
            	return;
            
            // Create and acquire a Global Javascript object.
            // These object persist for the lifetime of the web-view.
            using ( JSObject myGlobalObject = webView.CreateGlobalJavascriptObject( "myGlobalObject" ) )
            {
            	// The handler is of type JavascriptMethodHandler. Here we define it
            	// using a lambda expression.
            	myGlobalObject.Bind( "myMethod", ( s, e ) =&gt;
            	{
            	    // Provide a response.
            		return "My response";
            	} );
            }
            </code>
            <code lang="VB">
            If (Not webView.IsLive) Then Return
            
            ' Create and acquire a Global Javascript object.
            ' These object persist for the lifetime of the web-view.
            Using myGlobalObject As JSObject = webView.CreateGlobalJavascriptObject("myGlobalObject")
            	' The handler is of type JavascriptMethodHandler. Here we define it
            	' using a lambda expression.
            	myGlobalObject.Bind("myMethod", 
            		Function(s, e)
            	        ' Provide a response.
            			Return "My response"
            		End Function)
            End Using
            </code>
            <h3>Dynamic Language Runtime (DLR)</h3>
            <code lang="C#">
            if ( !webView.IsLive )
            	return;
            
            // Create and acquire a Global Javascript object. These object persist for the lifetime of the web-view.
            // Notice that we need to explicitly cast to JSObject before assigning to a dynamic. Since all Awesomium
            // Javascript Integration API members normally return JSValue, the CLR would not know what to assign to
            // 'dynamic'. Only JSObject (and subclasses of it) support the DLR.
            dynamic myGlobalObject = (JSObject)webView.CreateGlobalJavascriptObject( "myGlobalObject" );
            
            // Make sure we have the object.
            if ( !myGlobalObject )
            	return;
            
            using ( myGlobalObject )
            {
            	// Create and bind to a synchronous custom method dynamically.
            	myGlobalObject.myMethod = (JavascriptMethodHandler)OnCustomJavascriptMethod;
            
            	// Our method can now be executed from JavaScript. It could be JavaScript already available in the page.
            	// For this sample, we will inject the JavaScript ourselves and execute it.
            	string jsResponse = webView.ExecuteJavascriptWithResult( "myGlobalObject.myMethod('This is a call from Javascript.');" );
            
            	if ( !String.IsNullOrEmpty( jsResponse ) )
            		// Print the response.
            		Debug.Print( String.Format( "And this is the response: {0}", jsResponse ) );
            }
            </code>
            <code lang="VB">
            Option Strict Off
            
            [...]
            
            If Not webView.IsLive Then Return
            
            ' Create and acquire a Global Javascript object. These object persist for the lifetime of the web-view.
            ' Notice that we need to explicitly cast to JSObject before assigning to a dynamic. Since all Awesomium
            ' Javascript Integration API members normally return JSValue, the CLR would not know what to assign to
            ' Dim. Only JSObject (and subclasses of it) support the DLR.
            Dim myGlobalObject = CType(webView.ExecuteJavascriptWithResult("myGlobalObject"), JSObject)
            
            ' Make sure we have the object.
            If Not CBool(myGlobalObject) Then
            	Return
            End If
            
            Using myGlobalObject
            	' Create and bind to a synchronous custom method dynamically.
            	myGlobalObject.myMethod = CType(AddressOf OnCustomJavascriptMethod, JavascriptMethodHandler)
            
            	' Our method can now be executed from JavaScript. It could be JavaScript already available in the page.
            	' For this sample, we will inject the JavaScript ourselves and execute it.
            	Dim jsResponse As String = webView.ExecuteJavascriptWithResult("myGlobalObject.myMethod('This is a call from Javascript.');")
            
            	If Not String.IsNullOrEmpty(jsResponse) Then
            		' Print the response.
            		Debug.Print(String.Format("And this is the response: {0}", jsResponse))
            	End If
            End Using
            </code>
            </example>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.Bind(Awesomium.Core.JSFunctionHandler)">
            <summary>
            Creates a custom method that returns a value, and binds it to a <see cref="T:Awesomium.Core.JSFunctionHandler"/> delegate.
            </summary>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JSFunctionHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            The name of the method is determined by checking the <see cref="P:System.Reflection.MemberInfo.Name"/> of the managed handler.
            Therefore, you cannot pass an anonymous delegate, a lambda expression or a delegate returned from a property getter to this method.
            Instead, use an overload that takes a <c>methodName</c> parameter.
            <p/>
            If the method exists already, it is substituted by the custom method. This allows you to bind standard methods of HTML DOM objects, 
            to managed event handlers that are called when the methods are called from JavaScript.
            <p/>
            <note type="caution">
            Methods that return a value are called synchronously (the view process is blocked until the handler returns).
            Therefore, you cannot make synchronous invocations from inside a synchronous <see cref="T:Awesomium.Core.JSFunctionHandler"/>
            as this would cause a deadlock. For the same reason, no JavaScript objects can be passed to a <see cref="T:Awesomium.Core.JSFunctionHandler"/>
            that is called synchronously. Any such objects passed from JavaScript, will be replaced with <see cref="F:Awesomium.Core.JSValue.Undefined"/> in the 
            <c>arguments</c> array.
            </note>
            <p/>
            To create and bind to a custom method that is called asynchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.BindAsync(Awesomium.Core.JSFunctionAsyncHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            You can create and bind custom methods, using both the regular and the dynamic
            API. The following examples, demonstrate both:
            <p/>
            <b>Regular API:</b>
            <code lang="C#">
            if ( !webView.IsLive )
            	return;
            
            // Create and acquire a Global Javascript object.
            // These objects persist for the lifetime of the web-view.
            using ( JSObject myGlobalObject = webView.CreateGlobalJavascriptObject( "myGlobalObject" ) )
            {
            	// The method name is determined from the passed handler's name.
            	// Therefore we cannot pass a lambda expression to this overload.
            	myGlobalObject.Bind( myMethod );
            }
            
            private JSValue myMethod( JSValue[] arguments )
            {
                // Provide a response.
                return "My response";
            }
            </code>
            <code lang="VB">
            If (Not webView.IsLive) Then Return
            
            ' Create and acquire a Global Javascript object.
            ' These object persist for the lifetime of the web-view.
            Using myGlobalObject As JSObject = webView.CreateGlobalJavascriptObject("myGlobalObject")
            	' The method name is determined from the defined handler's name.
            	' Therefore we cannot pass a lambda expression to this overload.
            	myGlobalObject.Bind(myMethod)
            End Using
            
            Public Function myMethod(arguments() As JSValue) As JSValue
                ' Provide a response.
            	Return "My response"
            End Function
            </code>
            </example>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.ArgumentException">
            You cannot pass an anonymous delegate, a lambda expression or a delegate returned from or representing 
            a property getter to this method. Instead, use an overload that takes a <c>methodName</c> parameter.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.BindAsync(System.String,Awesomium.Core.JavascriptAsyncMethodHandler)">
            <summary>
            Creates a custom method that is called asynchronously, and binds it to a <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/> delegate.
            </summary>
            <param name="methodName">
            The name of the method to create or substitute.
            </param>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            If the method exists already, it is substituted by the custom method. This
            allows you to bind standard methods of HTML DOM objects, to managed
            event handlers that are called when the methods are called from JavaScript.
            <p/>
            To create and bind to a custom method that is called synchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.Bind(System.String,Awesomium.Core.JavascriptMethodHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.BindAsync(Awesomium.Core.JavascriptAsyncMethodHandler)">
            <summary>
            Creates a custom method that is called asynchronously, and binds it to a <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/> delegate.
            </summary>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            The name of the method is determined by checking the <see cref="P:System.Reflection.MemberInfo.Name"/> of the managed handler.
            Therefore, you cannot pass an anonymous delegate, a lambda expression or a delegate returned from a property getter to this method.
            Instead, use an overload that takes a <c>methodName</c> parameter.
            <p/>
            If the method exists already, it is substituted by the custom method. This allows you to bind standard methods of HTML DOM objects, 
            to managed event handlers that are called when the methods are called from JavaScript.
            <p/>
            To create and bind to a custom method that is called asynchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.Bind(Awesomium.Core.JavascriptMethodHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.ArgumentException">
            You cannot pass an anonymous delegate, a lambda expression or a delegate returned from or representing 
            a property getter to this method. Instead, use an overload that takes a <c>methodName</c> parameter.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.BindAsync(System.String,Awesomium.Core.JSFunctionAsyncHandler)">
            <summary>
            Creates a custom method that is called asynchronously, and binds it to a <see cref="T:Awesomium.Core.JSFunctionAsyncHandler"/> delegate.
            </summary>
            <param name="methodName">
            The name of the method to create or substitute.
            </param>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JSFunctionAsyncHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            If the method exists already, it is substituted by the custom method. This
            allows you to bind standard methods of HTML DOM objects, to managed
            event handlers that are called when the methods are called from JavaScript.
            <p/>
            To create and bind to a custom method that is called asynchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.Bind(System.String,Awesomium.Core.JSFunctionHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.BindAsync(Awesomium.Core.JSFunctionAsyncHandler)">
            <summary>
            Creates a custom method that is called asynchronously, and binds it to a <see cref="T:Awesomium.Core.JSFunctionAsyncHandler"/> delegate.
            </summary>
            <param name="handler">
            A <see cref="T:Awesomium.Core.JSFunctionAsyncHandler"/> method used to handle calls to the custom method.
            </param>
            <remarks>
            The name of the method is determined by checking the <see cref="P:System.Reflection.MemberInfo.Name"/> of the managed handler.
            Therefore, you cannot pass an anonymous delegate, a lambda expression or a delegate returned from a property getter to this method.
            Instead, use an overload that takes a <c>methodName</c> parameter.
            <p/>
            If the method exists already, it is substituted by the custom method. This allows you to bind standard methods of HTML DOM objects, 
            to managed event handlers that are called when the methods are called from JavaScript.
            <p/>
            To create and bind to a custom method that is called asynchronously and does not return a value,
            use the <see cref="M:Awesomium.Core.JSObject.Bind(Awesomium.Core.JSFunctionHandler)"/> overload.
            <p/>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.ArgumentException">
            You cannot pass an anonymous delegate, a lambda expression or a delegate returned from or representing 
            a property getter to this method. Instead, use an overload that takes a <c>methodName</c> parameter.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.Invoke(System.String,Awesomium.Core.JSValue[])">
            <summary>
            Invokes a method with a set of arguments and returns a result.
            </summary>
            <param name="methodName">The name of the method to call.</param>
            <param name="args">The arguments to pass.</param>
            <returns>Returns the result of the method call.</returns>
            <remarks>
            <note>
            This operation is only valid on <c>Remote</c> objects.
            </note>
            <note type="caution">
            Methods that return a value are called synchronously (the view process is blocked until the handler returns).
            Therefore, you cannot make synchronous invocations from inside a synchronous <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            or <see cref="T:Awesomium.Core.JSFunctionHandler"/> as this would cause a deadlock.
            </note>
            To invoke a JavaScript method synchronously when using <c>dynamic</c>, all you
            need to do is make sure you use/cache the returned value, even if the JavaScript
            method is not expected to return a useful one.
            <p/>
            <b>For details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#calling_javaScript_functions">Calling JavaScript Functions</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/sync_async_js_api.html">Synchronous &amp; Asynchronous JavaScript API</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.InvalidOperationException">
            You cannot make synchronous invocations from inside a synchronous
            <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.InvokeAsync(System.String,Awesomium.Core.JSValue[])">
            <summary>
            Invoke a method asynchronously with a set of arguments, ignoring the result.
            </summary>
            <param name="methodName">The name of the method to call.</param>
            <param name="args">The arguments to pass.</param>
            <remarks>
            <note>
            This operation is only valid on <c>Remote</c> objects.
            </note>
            To invoke a JavaScript method asynchronously when using <c>dynamic</c>, all you
            need to do is make sure you discard any returned value.
            <p/>
            <b>For details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#calling_javaScript_functions">Calling JavaScript Functions</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/sync_async_js_api.html">Synchronous &amp; Asynchronous JavaScript API</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This operation is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and 
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects."
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.Clone">
            <summary>
            Creates a copy of this <see cref="T:Awesomium.Core.JSObject"/> instance.
            </summary>
            <remarks>
            This is useful if you intend to cache a <see cref="T:Awesomium.Core.JSObject"/> instance
            passed as argument to a JavaScript method handler (see <see cref="O:Awesomium.Core.JSObject.Bind"/> and
            <see cref="O:Awesomium.Core.JSObject.BindAsync"/>).
            <p/>
            <see cref="T:Awesomium.Core.JSObject"/> instances passed as arguments or acquired in an asynchronous
            <see href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</see>,
            are destroyed by default when the associated routine exits. To cache a <see cref="T:Awesomium.Core.JSObject"/> 
            instance and keep it alive, create a copy of it using <see cref="M:Awesomium.Core.JSObject.Clone"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            You cannot create a clone of a disposed <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is not allowed on an invalid (undefined) <see cref="T:Awesomium.Core.JSObject"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSObject.GetLastError">
            <summary>
            Gets the latest error that may have occurred.
            </summary>
            <returns>
            Gets an <see cref="T:Awesomium.Core.Error"/> value representing the error that may have
            occurred, during the last call to any of this object's synchronous 
            methods or properties.
            </returns>
            <remarks>
            Accessing any of the synchronous methods and properties of a 
            <see cref="T:Awesomium.Core.JSObject"/>, may fail if the object is of type 
            <see cref="F:Awesomium.Core.JSObjectType.Remote"/>. You should check if there 
            was an error, via this method.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.op_Equality(Awesomium.Core.JSObject,Awesomium.Core.JSObject)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSObject"/> instances represent the same Javascript objects.
            </summary>
            <param name="o1">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the left of the equality operator.
            </param>
            <param name="o2">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSObject"/> instances
            represent the same JavaScript objects; <c>false</c> otherwise.
            </returns>
            <remarks>
            <note type="note">
            Invalid (undefined) objects tested against <c>null</c> (<c>Nothing</c> in Visual Basic),
            return <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.op_Inequality(Awesomium.Core.JSObject,Awesomium.Core.JSObject)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSObject"/> instances represent different Javascript objects.
            </summary>
            <param name="o1">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the left of the inequality operator.
            </param>
            <param name="o2">
            The <see cref="T:Awesomium.Core.JSObject"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSObject"/> instances
            represent different JavaScript objects; <c>false</c> otherwise.
            </returns>
            <remarks>
            <note type="note">
            Invalid (undefined) objects tested against <c>null</c> (<c>Nothing</c> in Visual Basic),
            return <c>false</c>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSObject.op_Implicit(Awesomium.Core.JSObject)~System.Boolean">
            <summary>
            Implicitly converts a <see cref="T:Awesomium.Core.JSObject"/> to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">
            The object to convert.
            </param>
            <returns>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the object is not <c>null</c>
            (<c>Nothing</c> in Visual Basic) and not an invalid (undefined) object; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Core.JSObject.RefCount">
            <summary>
            Native reference count.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.IsUndefined">
            <summary>
            Gets if this is an invalid object, equivalent to <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.IsDisposable">
            <summary>
            Indicates if the object will be added to the Javascript
            Dynamic Execution Context and be eligible for disposal.
            Inheritors that return false, are still disposable but
            they must be disposed manually.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.View">
            <summary>
            Gets the owner view as IWebViewInternal.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.Count">
            <summary>
            Number of elements in this object.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.OrderedKeys">
            <summary>
            A list of keys in the object, in the order which they are deserialized.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.Entries">
            <summary>
            The actual storage of key-value pair.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.IsDisposed">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSObject"/> instance has been disposed.
            </summary>
            <remarks>
            Disposing a <see cref="T:Awesomium.Core.JSObject"/> instance, does not mean that the actual
            Javascript object is destroyed. You can later acquire it again (using
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/> for example).
            <note>
            It is generally suggested that you dispose of <see cref="T:Awesomium.Core.JSObject"/>
            instances, when you have finished using them, and acquire them 
            once they are needed again. The ideal way, is by wrapping your code
            in a <c>using</c> (<c>Using</c> in Visual Basic) block.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSObject.Type">
            <summary>
            Gets this object's type.
            </summary>
            <seealso cref="T:Awesomium.Core.JSObjectType"/>
        </member>
        <member name="P:Awesomium.Core.JSObject.RemoteId">
            <summary>
            Get the remote identifier for this <see cref="T:Awesomium.Core.JSObject"/> instance
            (will be <c>0</c> if this object is of type <see cref="F:Awesomium.Core.JSObjectType.Local"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSObject.Owner">
            <summary>
            Get this object's owning <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This is only valid for <see cref="F:Awesomium.Core.JSObjectType.Remote"/> objects. 
            Local objects will return <c>null</c> (<c>Nothing</c> in Visual Basic).
            If the connection has gone away, this will also return <c>null</c>
            (<c>Nothing</c> in Visual Basic).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSObject.Property(System.String)">
            <summary>
            Gets or sets the value of the specified named property.
            </summary>
            <param name="propertyName">
            The name of the property whose value will be set or retrieved.
            If the property being set does not exist, it will be created.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing the value of the specified named property.
            </returns>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to all data types available with the 
            Javascript Integration API.
            <note type="caution">
            Trying to retrieve the value of a property from inside a synchronous <b>Javascript Execution Context</b>,
            will return <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            <p/>
            Trying to synchronously set the value of a property from inside a synchronous 
            <b>Javascript Execution Context</b>, will throw a <see cref="T:System.InvalidOperationException"/>.
            For details, read the <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            article.
            </note>
            </remarks>
            <example>
            <code lang="C#">
            using ( JSObject myObj = new JSObject() )
            {
            	// Create a property and assign a value to it.
            	myObj[ "myProperty" ] = "Test";
            
            	// Prints 'Test'.
            	Debug.Print( myObj[ "myProperty" ] );
            }
            </code>
            <code lang="VB">
            Using myObj As New JSObject()
            	' Create a property and assign a value to it.
            	myObj("myProperty") = "Test"
            
            	' Prints 'Test'.
            	Debug.Print(myObj("myProperty"))
            End Using
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            You cannot set a property synchronously from inside a synchronous Javascript Execution Context
            (see: <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>)
            </exception>
        </member>
        <member name="P:Awesomium.Core.JSObject.Property(System.String,System.Boolean)">
            <summary>
            Gets or sets the value of the specified named property.
            </summary>
            <param name="propertyName">
            The name of the property whose value will be set or retrieved.
            If the property being set does not exist, it will be created.
            </param>
            <param name="setAsynchronously">
            Indicates if the property should be set asynchronously. This parameter is only meaningful when you are 
            setting a property. It is ignored when you are retrieving the value of a property.
            <note>
            Setting a property asynchronously is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> objects
            and it is ignored if used to configure the property of a <see cref="F:Awesomium.Core.JSObjectType.Local"/> or
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> object.
            </note>
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing the value of the specified named property.
            </returns>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to all data types available with the 
            Javascript Integration API.
            <note type="caution">
            Trying to retrieve the value of a property from inside a synchronous <b>Javascript Execution Context</b>,
            will return <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            <p/>
            Trying to synchronously set the value of a property from inside a synchronous 
            <b>Javascript Execution Context</b>, will throw a <see cref="T:System.InvalidOperationException"/>.
            For details, read the <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            article.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Setting a property asynchronously is only supported on valid 
            <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            You cannot set a property synchronously from inside a synchronous Javascript Execution Context
            (see: <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>)
            </exception>
        </member>
        <member name="P:Awesomium.Core.JSObject.Property(System.String,Awesomium.Core.JSPropertyDescriptor)">
            <summary>
            Gets or sets the value of the specified named property.
            </summary>
            <param name="propertyName">
            The name of the property whose value will be set or retrieved.
            If the property being set does not exist, it will be created.
            </param>
            <param name="descriptor">
            A <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> instance representing the data property descriptor used
            to configure the property. This parameter is only meaningful when you are 
            setting a property. It is ignored when you are retrieving the value of a property.
            <note>
            Specifying a data property descriptor is only supported on valid <c>Remote</c> objects.
            </note>
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing the value of the specified named property.
            </returns>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to all data types available with the 
            Javascript Integration API.
            <note type="caution">
            Trying to retrieve the value of a property from inside a synchronous <b>Javascript Execution Context</b>,
            will return <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            <p/>
            Trying to synchronously set the value of a property from inside a synchronous 
            <b>Javascript Execution Context</b>, will throw a <see cref="T:System.InvalidOperationException"/>.
            For details, read the <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            article.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            You cannot set a property synchronously from inside a synchronous Javascript Execution Context
            (see: <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>)
            </exception>
            <seealso cref="M:Awesomium.Core.JSObject.GetPropertyDescriptor(System.String)"/>
        </member>
        <member name="P:Awesomium.Core.JSObject.Property(System.String,System.Boolean,Awesomium.Core.JSPropertyDescriptor)">
            <summary>
            Gets or sets the value of the specified named property.
            </summary>
            <param name="propertyName">
            The name of the property whose value will be set or retrieved.
            If the property being set does not exist, it will be created.
            </param>
            <param name="setAsynchronously">
            Indicates if the property should be set asynchronously. This parameter is only meaningful when you are 
            setting a property. It is ignored when you are retrieving the value of a property.
            <note>
            Setting a property asynchronously is only supported on valid <see cref="F:Awesomium.Core.JSObjectType.Remote"/> objects
            and it is ignored if used to configure the property of a <see cref="F:Awesomium.Core.JSObjectType.Local"/> or
            <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> object.
            </note>
            </param>
            <param name="descriptor">
            A <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> instance representing the data property descriptor used
            to configure the property. This parameter is only meaningful when you are 
            setting a property. It is ignored when you are retrieving the value of a property.
            <note>
            Specifying a data property descriptor is only supported on valid <c>Remote</c> objects.
            </note>
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing the value of the specified named property.
            </returns>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to all data types available with the 
            Javascript Integration API.
            <note type="caution">
            Trying to retrieve the value of a property from inside a synchronous <b>Javascript Execution Context</b>,
            will return <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            <p/>
            Trying to synchronously set the value of a property from inside a synchronous 
            <b>Javascript Execution Context</b>, will throw a <see cref="T:System.InvalidOperationException"/>.
            For details, read the <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            article.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Setting a property asynchronously is only supported on valid 
            <see cref="F:Awesomium.Core.JSObjectType.Remote"/> and <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/> objects.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            You cannot set a property synchronously from inside a synchronous Javascript Execution Context
            (see: <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>)
            </exception>
            <seealso cref="M:Awesomium.Core.JSObject.GetPropertyDescriptor(System.String)"/>
        </member>
        <member name="P:Awesomium.Core.JSObject.GlobalObjectName">
            <summary>
            Gets the name of the remote global object.
            <p/>
            Only valid if this is a global JavaScript object created with
            <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/> (see <see cref="P:Awesomium.Core.JSObject.Type"/>).
            </summary>
            <returns>
            The name of the global JavaScript object, or an empty string if this is
            not an object of type <see cref="F:Awesomium.Core.JSObjectType.RemoteGlobal"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSFunction.#ctor(Awesomium.Core.IWebView,Awesomium.Core.JavascriptAsyncMethodHandler)">
            <summary>
            Creates a remote anonymous JavaScript <c>Function</c> object bound to a
            managed handler, that is called asynchronously.
            </summary>
            <param name="owner">
            The view on whose currently loaded web-page the function is created.
            </param>
            <param name="handler">
            The managed handler bound to the created function.
            </param>
            <remarks>
            This constructor creates an anonymous JavaScript <c>Function</c> object
            in the global scope of the page currently loaded to the specified <paramref name="owner"/>
            view, and binds it to a managed handler.
            <p/>
            The created <see cref="T:Awesomium.Core.JSFunction"/> instance can only be used with the specified
            <paramref name="owner"/> view, in any of the following ways:
            <list type="bullet">
            <item>
            <description>
            Passed as an argument to a method of a remote object.
            </description>
            </item>
            <item>
            <description>
            Assigned as the value of a property of a remote object, which actually creates
            a method and is equivalent to calling <see cref="M:Awesomium.Core.JSObject.BindAsync(Awesomium.Core.JavascriptAsyncMethodHandler)"/>
            on the remote object.
            </description>
            </item>
            <item>
            <description>
            Assigned as the value of a property of a local object, that is later passed as argument
            to a method of a remote object or assigned as value of a property of a remote object. This
            allows you to add methods to a local object, as long as this object will only be used with
            remote objects owned by the same view as the specified <paramref name="owner"/> view.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSFunction.#ctor(Awesomium.Core.IWebView,Awesomium.Core.JavascriptMethodHandler)">
            <summary>
            Creates a remote anonymous JavaScript <c>Function</c> object bound to a
            managed handler, that is called synchronously.
            </summary>
            <param name="owner">
            The view on whose currently loaded web-page the function is created.
            </param>
            <param name="handler">
            The managed handler bound to the created function.
            </param>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.JSFunction.#ctor(IWebView,JavascriptAsyncMethodHandler)&quot;]/remarks/."/>
        </member>
        <member name="M:Awesomium.Core.JSFunction.#ctor(Awesomium.Core.IWebView,Awesomium.Core.JSFunctionAsyncHandler)">
            <summary>
            Creates a remote anonymous JavaScript <c>Function</c> object bound to a
            managed handler, that is called asynchronously.
            </summary>
            <param name="owner">
            The view on whose currently loaded web-page the function is created.
            </param>
            <param name="handler">
            The managed handler bound to the created function.
            </param>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.JSFunction.#ctor(IWebView,JavascriptAsyncMethodHandler)&quot;]/remarks/."/>
        </member>
        <member name="M:Awesomium.Core.JSFunction.#ctor(Awesomium.Core.IWebView,Awesomium.Core.JSFunctionHandler)">
            <summary>
            Creates a remote anonymous JavaScript <c>Function</c> object bound to a
            managed handler, that is called synchronously.
            </summary>
            <param name="owner">
            The view on whose currently loaded web-page the function is created.
            </param>
            <param name="handler">
            The managed handler bound to the created function.
            </param>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.JSFunction.#ctor(IWebView,JavascriptAsyncMethodHandler)&quot;]/remarks/."/>
        </member>
        <member name="M:Awesomium.Core.JSFunction.Call(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])">
            <summary>
            Calls the function with a given <c>this</c> value and arguments provided individually.
            </summary>
            <param name="thisArg">
            The value of <c>this</c> provided for the call to the function. 
            <note type="note">
            This may not be the actual value seen by the method: if the method is a function in non-strict mode code,
            <c>null</c> and <c>undefined</c> will be replaced with the global object, and primitive values will be boxed.
            </note>
            </param>
            <param name="arguments">
            The arguments passed to the function.
            </param>
            <returns>
            The return value of the function call, or <see cref="F:Awesomium.Core.JSValue.Undefined"/> if the function
            returns no value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been passed for <paramref name="thisArg"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="thisArg"/> has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The specified <paramref name="thisArg"/> must be a valid remote object.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSFunction.Apply(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])">
            <summary>
            Calls the function with a given <c>this</c> value and arguments provided as an array.
            </summary>
            <param name="thisArg">
            The value of <c>this</c> provided for the call to the function. 
            <note type="note">
            This may not be the actual value seen by the method: if the method is a function in non-strict mode code,
            <c>null</c> and <c>undefined</c> will be replaced with the global object, and primitive values will be boxed.
            </note>
            </param>
            <param name="arguments">
            An array of <see cref="T:Awesomium.Core.JSValue"/>, specifying the arguments with which the function should be called, 
            or <c>null</c> (<c>Nothing</c> in Visual Basic) if no arguments should be provided to the function.
            </param>
            <returns>
            The return value of the function call, or <see cref="F:Awesomium.Core.JSValue.Undefined"/> if the function
            returns no value.
            </returns>
            <remarks>
            <note type="note">
            While the syntax of this function is almost identical to that of <see cref="M:Awesomium.Core.JSFunction.Call(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])"/>, the fundamental difference
            is that <see cref="M:Awesomium.Core.JSFunction.Call(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])"/> accepts an argument list, while <see cref="M:Awesomium.Core.JSFunction.Apply(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])"/> accepts a single array of arguments.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been passed for <paramref name="thisArg"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="thisArg"/> has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The specified <paramref name="thisArg"/> must be a valid remote object.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSFunction.Bind(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])">
            <summary>
            Creates a new function that, when called, has its <c>this</c> keyword set to the provided value, 
            with a given sequence of arguments preceding any provided when the new function is called.
            </summary>
            <param name="thisArg">
            The value to be passed as the <c>this</c> parameter to the target function when the bound function is called.
            </param>
            <param name="arguments">
            Arguments to prepend to arguments provided to the bound function when invoking the target function.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.JSFunction"/> that, when called, has its <c>this</c> keyword set to the provided <paramref name="thisArg"/>, 
            with a given sequence of arguments preceding any provided when the new function is called.
            </returns>
            <remarks>
            The <see cref="M:Awesomium.Core.JSFunction.Bind(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])"/> function creates a new function (a <b>bound function</b>) with the same function body as the function
            it is being called on (the bound function's <b>target function</b>) with the <c>this</c> value bound to the first parameter
            of <see cref="M:Awesomium.Core.JSFunction.Bind(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])"/>, which cannot be overridden. <see cref="M:Awesomium.Core.JSFunction.Bind(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])"/> also accepts leading default arguments to provide to the 
            target function when the bound function is called.
            <p/>
            The simplest use of <see cref="M:Awesomium.Core.JSFunction.Bind(Awesomium.Core.JSObject,Awesomium.Core.JSValue[])"/> is to make a function that, no matter how it is called, is called with a particular <c>this</c> value.
            A common mistake for JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use 
            the original object as its <c>this</c> (e.g. by using that method in callback-based code). Without special care, however, the original object is usually lost.
            Creating a bound function from the function, passing the original object as <paramref name="thisArg"/>, neatly solves this problem.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been passed for <paramref name="thisArg"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="thisArg"/> has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The specified <paramref name="thisArg"/> must be a valid remote object.
            </exception>
        </member>
        <member name="P:Awesomium.Core.JSFunction.Name">
            <summary>
            Gets the name of the function, or an empty string if the function is anonymous.
            </summary>
            <remarks>
            Functions created in JavaScript with the syntax <c>new Function(...)</c> or just <c>Function(...)</c>
            have their <see cref="P:Awesomium.Core.JSFunction.Name"/> property set to an empty string.
            <p/>
            You can only define a function with a name, when using a JavaScript
            <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope">function expression</see>.
            <p/>
            You cannot change the name of a function, this property is read-only.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.JSONObject">
            <summary>
            Represent a JavaScript object deserialized from JSON.
            </summary>
            <remarks>
            This class honors the original ordering of the inner elements of the JSON object.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSONObject.RemoveProperty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Awesomium.Core.JSONObject.Add(System.String,System.Object)">
            <summary>
            Add a new element into the object.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="P:Awesomium.Core.JSONObject.Item(System.String,System.Boolean,Awesomium.Core.JSPropertyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="T:Awesomium.Core.JsonReader">
            <summary>Json text reader.</summary>
            <remarks>Does not dispose the reader, since we don't own the underlying stream.</remarks>
        </member>
        <member name="F:Awesomium.Core.JsonReader.RecursionLimit">
            <summary>Maximum recursion limit on reader.</summary>
        </member>
        <member name="F:Awesomium.Core.JsonReader.DateTimeFormat">
            <summary>Compiled Regex for DateTime Format.</summary>
        </member>
        <member name="F:Awesomium.Core.JsonReader.reader">
            <summary>Reader to reader text into.</summary>
        </member>
        <member name="F:Awesomium.Core.JsonReader.recursionDepth">
            <summary>Depth of recursion.</summary>
        </member>
        <member name="F:Awesomium.Core.JsonReader.emptyObject">
            <summary>An empty JSONObject.</summary>
        </member>
        <member name="F:Awesomium.Core.JsonReader.DatetimeMinTimeTicks">
            <summary>Constant tick value for calculating tick values</summary>
        </member>
        <member name="M:Awesomium.Core.JsonReader.#ctor(System.IO.StreamReader)">
            <summary>
            Creates a new instance of Json reader which readers the json text 
            from the given reader
            </summary>
            <param name="reader">text reader from which json payload needs to be read.
            Does not dispose the reader, since we don't own the underlying stream.</param>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadValue">
            <summary>
            Converts the given value into the right type.
            </summary>
            <returns>Returns the equivalent CLR object instance.</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadNextCharacter">
            <summary>
            Gets the next character from the reader. This function moves the enumerator by 1 position
            </summary>
            <returns>the next character from the current reader position</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.PeekNextCharacter">
            <summary>
            peeks the next character from the reader. This does not move the current reader position.
            </summary>
            <returns>the next character from the current reader position</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.GetCharacters(System.Int32)">
            <summary>
            Returns the next count characters from the reader's current position
            </summary>
            <param name="count">number of characters to return</param>
            <returns>string consisting of next count characters</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.PeekNextSignificantCharacter">
            <summary>
            Sets the readers position to the next significant character position
            </summary>
            <returns>returns the next significant character without changing the current position of the reader</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadArray">
            <summary>
            Converts the given text into an arrayList
            </summary>
            <returns>returns the arraylist containing the list of objects</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadBoolean">
            <summary>
            Reads the boolean value
            </summary>
            <returns>returns the boolean value as read from the reader</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadName(System.Boolean)">
            <summary>
            Reads the name string from the reader
            </summary>
            <param name="allowQuotes">true, if you want to allow quotes, otherwise false</param>
            <returns>string name value</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadNull">
            <summary>
            Reads the null literal from the reader
            </summary>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadNumber">
            <summary>Reads the number from the reader.</summary>
            <returns>Returns the CLR number object.</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadObject">
            <summary>
            Reads the object from the reader
            </summary>
            <returns>returns hashtable containing the list of property names and values</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadString">
            <summary>
            Read the string value from the reader
            </summary>
            <returns>returns the string value read from the reader</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.ReadString(System.Boolean@)">
            <summary>
            Read the string value from the reader
            </summary>
            <param name="hasLeadingSlash">out parameter indicating whether the string has a leading slash or not</param>
            <returns>returns the string value read from the reader</returns>
        </member>
        <member name="M:Awesomium.Core.JsonReader.RecurseEnter">
            <summary>Marks the fact that a recursive method was entered, and checks that the depth is allowed.</summary>
        </member>
        <member name="M:Awesomium.Core.JsonReader.RecurseLeave">
            <summary>Marks the fact that a recursive method is leaving..</summary>
        </member>
        <member name="M:Awesomium.Core.JsonReader.RecurseEnter(System.Int32,System.Int32@)">
            <summary>Marks the fact that a recursive method was entered, and checks that the depth is allowed.</summary>
            <param name="recursionLimit">Maximum recursion limit.</param>
            <param name="recursionDepth">Depth of recursion.</param>
        </member>
        <member name="M:Awesomium.Core.JsonReader.RecurseLeave(System.Int32@)">
            <summary>Marks the fact that a recursive method is leaving.</summary>
            <param name="recursionDepth">Depth of recursion.</param>
        </member>
        <member name="T:Awesomium.Core.Global">
            <summary>
            Represents the <c>global</c> JavaScript environment passed to
            an asynchronous Javascript Execution Context.
            </summary>
            <remarks>
            <b>For details, read the <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a> article</b>.
            </remarks>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="M:Awesomium.Core.Global.op_Implicit(Awesomium.Core.Global)~System.Boolean">
            <summary>
            Implicitly converts a <see cref="T:Awesomium.Core.Global"/> to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">
            The <c>global</c> instance to convert.
            </param>
            <returns>
            A <see cref="T:System.Boolean"/> value that is <c>true</c> if the object is not <c>null</c>
            (<c>Nothing</c> in Visual Basic) and not disposed or invalidated (see <see cref="P:Awesomium.Core.Global.IsValid"/>);
            <c>false</c> otherwise.
            </returns>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.Current">
            <summary>
            Gets the <c>global</c> JavaScript environment of the current
            asynchronous Javascript Execution Context, if any.
            </summary>
            <remarks>
            When this property is accessed from inside an asynchronous 
            Javascript Execution Context, it returns an instance of <see cref="T:Awesomium.Core.Global"/>
            that provides access to essential objects of the web-page's
            current JavaScript environment.
            <p/>
            For details, read: <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </remarks>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.IsValid">
            <summary>
            Gets if this <c>global</c> JavaScript environment reference,
            is valid.
            </summary>
            <remarks>
            <note type="note">
            An instance of <see cref="T:Awesomium.Core.Global"/> is only valid within a Javascript
            Execution Context. Upon exiting the routine associated with the context,
            <see cref="T:Awesomium.Core.Global"/> instances are disposed and rendered invalid.
            Therefore, you should never cache the <see cref="T:Awesomium.Core.Global"/> instance
            passed to a Javascript Execution Context.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Global.window">
            <summary>
            The current <a href="https://developer.mozilla.org/en/docs/Web/API/window">window</a> instance.
            </summary>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.document">
            <summary>
            The current <a href="https://developer.mozilla.org/en-US/docs/Web/API/document">document</a> instance.
            </summary>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.console">
            <summary>
            The current <a href="https://developer.mozilla.org/en/docs/Web/API/console">console</a> object instance.
            </summary>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.JSON">
            <summary>
            The built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON">JSON</a> object that contains 
            methods for parsing JavaScript Object Notation (JSON) and converting values to JSON.
            </summary>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.Object">
            <summary>
            The JavaScript built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">Object</a>.
            This can be useful to access and use <i>generic</i> methods of <c>Object</c>.
            </summary>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.ArrayPrototype">
            <summary>
            The JavaScript built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">Array</a> prototype.
            This can be useful to directly access and use methods of the <c>Array</c> prototype.
            </summary>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="P:Awesomium.Core.Global.FunctionPrototype">
            <summary>
            The JavaScript built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">Function</a> prototype.
            This can be useful to directly access and use methods of the <c>Function</c> prototype.
            </summary>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="M:Awesomium.Core.JSEventListener.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSEventListener.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.JSFunctionHandler">
            <summary>
            Represents a method that will handle calls to one or more custom Javascript methods, synchronously.
            </summary>
            <param name="arguments">
            An array of <see cref="T:Awesomium.Core.JSValue"/> representing the arguments passed to the method from
            JavaScript.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> encapsulating the response that will be sent to JavaScript.
            This can also be a <see cref="F:Awesomium.Core.JSObjectType.Local"/> <see cref="T:Awesomium.Core.JSObject"/> with
            custom properties.
            </returns>
            <remarks>
            This delegate is used with <see cref="M:Awesomium.Core.JSObject.Bind(Awesomium.Core.JSFunctionHandler)"/>, 
            <see cref="M:Awesomium.Core.JSObject.Bind(System.String,Awesomium.Core.JSFunctionHandler)"/> and in DLR to tell
            the <see cref="T:Awesomium.Core.JSObject"/> to create a custom method that returns a value, 
            therefore called synchronously.
            <p/>
            The limitations of a synchronous handler are:
            <list type="bullet">
            <item>
            <description>
            You cannot make synchronous invocations from inside a synchronous handler.
            </description>
            </item>
            <item>
            <description>
            You cannot pass JavaScript objects to a synchronous handler.
            </description>
            </item>
            </list>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            <note type="note">
            A <see cref="T:Awesomium.Core.JSFunctionHandler"/> method is always called in a <i>synchronous</i> 
            <b>Javascript Execution Context (JEC)</b>. Read <a href="http://wiki.awesomium.net/javascript/jec.html">this article</a>
            for details about Javascript Execution Contexts.
            </note>
            <note>
            To create a method that is called asynchronously, use the
            <see cref="T:Awesomium.Core.JSFunctionAsyncHandler"/> delegate.
            </note>
            </remarks>
            <seealso cref="O:Awesomium.Core.JSObject.Bind"/>
            <seealso cref="T:Awesomium.Core.JavascriptMethodHandler"/>
        </member>
        <member name="T:Awesomium.Core.JSFunctionAsyncHandler">
            <summary>
            Represents a method that will handle calls to one or more custom Javascript methods, asynchronously.
            </summary>
            <param name="arguments">
            An array of <see cref="T:Awesomium.Core.JSValue"/> representing the arguments passed to the method from
            JavaScript.
            </param>
            <remarks>
            This delegate is used with <see cref="M:Awesomium.Core.JSObject.BindAsync(Awesomium.Core.JSFunctionAsyncHandler)"/>, 
            <see cref="M:Awesomium.Core.JSObject.BindAsync(System.String,Awesomium.Core.JSFunctionAsyncHandler)"/> and in DLR to tell 
            the <see cref="T:Awesomium.Core.JSObject"/> to create a custom method that does not return a value, 
            therefore called asynchronously.
            <p/>
            The benefits of an asynchronous handler are:
            <list type="bullet">
            <item>
            <description>
            You can make synchronous invocations from inside an asynchronous handler.
            </description>
            </item>
            <item>
            <description>
            You can pass JavaScript objects to an asynchronous handler.
            </description>
            </item>
            </list>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            <note type="note">
            A <see cref="T:Awesomium.Core.JSFunctionAsyncHandler"/> method is always called in an <i>asynchronous</i> 
            <b>Javascript Execution Context (JEC)</b>. Read <a href="http://wiki.awesomium.net/javascript/jec.html">this article</a>
            for details about Javascript Execution Contexts.
            </note>
            </remarks>
            <example>
            <code lang="C#">
            private void OnDocumentReady( object sender, DocumentReadyEventArgs e )
            {
                // Create a global object and assign it to a dynamic.
                dynamic myGlobalObject = (JSObject)webView.CreateGlobalJavascriptObject( "myGlobalObject" );
            
                // Make sure we have the object.
                if ( !myGlobalObject )
                    return;
            
                // Create and bind a custom method dynamically. In a dynamic expression, use
                // a JavascriptAsyncMethodHandler delegate to create a JavaScript method
                // that does not return a value and is called asynchronously.
                myGlobalObject.myMethod = (JSFunctionAsyncHandler)OnCustomJavascriptMethod;
            }
            
            // Asynchronous JavaScript method handler.
            private static void OnCustomJavascriptMethod( JSValue[] arguments )
            {
                IWebView webView = (IWebView)sender;
                
                if ( !webView.IsLive )
                    return;
                
                // Access essential objects of the web-page's current JavaScript environment.
                var global = Global.Current;
                    
                // We can have the same handler handling many remote methods.
                // Check here the method that is calling the handler.
                if ( e.MethodName == "myMethod" )
                {
                    // Make another synchronous call.
                    var res = global.window.confirm( "Called from an asynchronous handler.\nDo you confirm?" );
                }
            }
            </code>
            <code lang="VB">
            Option Explicit Off
            
            Private Sub OnDocumentReady(sender As Object, e As DocumentReadyEventArgs)
                ' Create a global object and assign it to a dynamic object.
                Dim myGlobalObject As Object = DirectCast(webView.CreateGlobalJavascriptObject("myGlobalObject"), JSObject)
            
                ' Make sure we have the object.
                If Not myGlobalObject Then
                    Return
                End If
            
                ' Create and bind a custom method dynamically. In a dynamic expression, use
                ' the JavascriptAsyncMethodHandler delegate to create a Javascript method
                ' that does not return a value and is called asynchronously.
                myGlobalObject.myMethod = DirectCast(AddressOf OnCustomJavascriptMethod, JSFunctionAsyncHandler)
            End Sub
            
            ' Asynchronous JavaScript method handler.
            Private Shared Sub OnCustomJavascriptMethod(arguments() As JSValue)
                Dim webView As IWebView = DirectCast(sender, IWebView)
            
                If Not webView.IsLive Then
                    Return
                End If
            
                ' Access essential objects of the web-page's current JavaScript environment.
                Dim js As [Global] = [Global].Current
            
                ' We can have the same handler handling many remote methods.
                ' Check here the method that is calling the handler.
                If e.MethodName = "myMethod" Then
                    ' Make another synchronous call.
                    Dim res = js.window.confirm("Called from an asynchronous handler." &amp; vbLf &amp; "Do you confirm?")
                End If
            End Sub
            </code>
            </example>
            <seealso cref="O:Awesomium.Core.JSObject.BindAsync"/>
            <seealso cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/>
        </member>
        <member name="T:Awesomium.Core.JSPropertyDescriptor">
            <summary>
            Represents the property descriptor of a JavaScript object's property.
            </summary>
            <remarks>
            <note type="note">
            A <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> acquired in a JavaScript Execution Context,
            is eligible for automatic disposal upon exiting the context, just like any other
            <see cref="T:Awesomium.Core.JSObject"/>. If you need a copy of it, use <see cref="M:Awesomium.Core.JSObject.Clone"/>.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.JSObject.GetPropertyDescriptor(System.String)"/>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">
            Object.getOwnPropertyDescriptor()
            </seealso>
            <seealso href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.10">
            The Property Descriptor and Property Identifier Specification Types
            </seealso>
        </member>
        <member name="F:Awesomium.Core.JSPropertyDescriptor.Default">
            <summary>
            A default instance of <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> representing a
            <i><a hreaf="http://www.ecma-international.org/ecma-262/5.1/#sec-8.10">data property descriptor</a></i>.
            </summary>
            <remarks>
            A default instance of <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> has <see cref="P:Awesomium.Core.JSPropertyDescriptor.Configurable"/>,
            <see cref="P:Awesomium.Core.JSPropertyDescriptor.Enumerable"/> and <see cref="P:Awesomium.Core.JSPropertyDescriptor.Writable"/> set to <c>true</c>.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.JSPropertyDescriptor.ECMAScriptDefault">
            <summary>
            A default instance of <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> representing a
            <i><a hreaf="http://www.ecma-international.org/ecma-262/5.1/#sec-8.10">data property descriptor</a></i>
            that has all the data property descriptor properties set to <c>false</c>.
            </summary>
            <remarks>
            An <b>ECMAScript</b> default instance of <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> has <see cref="P:Awesomium.Core.JSPropertyDescriptor.Configurable"/>,
            <see cref="P:Awesomium.Core.JSPropertyDescriptor.Enumerable"/> and <see cref="P:Awesomium.Core.JSPropertyDescriptor.Writable"/> set to <c>false</c>.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSPropertyDescriptor.#ctor(System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Awesomium.Core.JSPropertyDescriptor"/> that can be used with
            <see cref="P:Awesomium.Core.JSObject.Property(System.String,System.Boolean,Awesomium.Core.JSPropertyDescriptor)"/>.
            </summary>
            <param name="ecmaScriptDefault">
            If this is <c>false</c> (default), <see cref="P:Awesomium.Core.JSPropertyDescriptor.Configurable"/>, <see cref="P:Awesomium.Core.JSPropertyDescriptor.Enumerable"/>
            and <see cref="P:Awesomium.Core.JSPropertyDescriptor.Writable"/> are initially set to <c>true</c>; otherwise, they are set to
            <c>false</c>.
            </param>
        </member>
        <member name="M:Awesomium.Core.JSPropertyDescriptor.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.JSPropertyDescriptor.Value">
            <summary>
            Gets the value associated with the property (data descriptors only).
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSPropertyDescriptor.Configurable">
            <summary>
            Gets or sets if the type of this property descriptor may be changed 
            and if the property may be deleted from the corresponding object.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSPropertyDescriptor.Enumerable">
            <summary>
            Gets or sets if this property shows up during enumeration of the 
            properties on the corresponding object.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSPropertyDescriptor.Writable">
            <summary>
            Gets or sets if the value associated with the property may be changed (data descriptors only).
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSPropertyDescriptor.Get">
            <summary>
            Gets a <see cref="T:Awesomium.Core.JSFunction"/> representing the function which serves as a getter for the property, 
            or an invalid <see cref="T:Awesomium.Core.JSFunction"/> instance equivalent to <see cref="F:Awesomium.Core.JSValue.Undefined"/> if there 
            is no getter (accessor descriptors only).
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSPropertyDescriptor.Set">
            <summary>
            Gets a <see cref="T:Awesomium.Core.JSFunction"/> representing the function which serves as a setter for the property, 
            or an invalid <see cref="T:Awesomium.Core.JSFunction"/> instance equivalent to <see cref="F:Awesomium.Core.JSValue.Undefined"/> if there 
            is no setter (accessor descriptors only).
            </summary>
        </member>
        <member name="T:Awesomium.Core.IEval">
            <summary>
            [This type supports the Awesomium.NET infrastructure and is not intended to be used directly from your code.]
            </summary>
            <exclude />
        </member>
        <member name="T:Awesomium.Core.LogSeverity">
            <summary>
            Specifies the severity level for a log message.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Log(System.String,Awesomium.Core.LogSeverity,System.String,System.Int32)"/>
        </member>
        <member name="F:Awesomium.Core.LogSeverity.Info">
            <summary>
            Info message.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogSeverity.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogSeverity.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogSeverity.ErrorReport">
            <summary>
            Error report message.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogSeverity.Fatal">
            <summary>
            Fatal error message, terminates application.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.SQLite.SQLiteConnectionString">
            <summary>
            Represents a parsed connection string.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.SQLiteCommand.OnInstanceCreated(System.Object)">
             <summary>
             Invoked every time an instance is loaded from the database.
             </summary>
             <param name="obj">
             The newly created object.
             </param>
             <remarks>
             This can be overridden in combination with the <see cref="M:Awesomium.Core.Data.SQLite.SQLiteConnection.NewCommand"/>
             method to hook into the life-cycle of objects.
            
             Type safety is not possible because MonoTouch does not support virtual generic methods.
             </remarks>
        </member>
        <member name="T:Awesomium.Core.Data.SQLite.PreparedSqlLiteInsertCommand">
            <summary>
            Since the insert never changed, we only need to prepare once.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.SQLite.TableQuery`1.CompileNullBinaryExpression(System.Linq.Expressions.BinaryExpression,Awesomium.Core.Data.SQLite.TableQuery{`0}.CompileResult)">
            <summary>
            Compiles a BinaryExpression where one of the parameters is null.
            </summary>
            <param name="parameter">The non-null parameter</param>
        </member>
        <member name="T:Awesomium.Core.IResourceRequest">
            <summary>
            Represents a request for a resource provided either through
            an <see cref="T:Awesomium.Core.IResourceInterceptor"/>, or through a
            <see cref="T:Awesomium.Core.Data.DataSource"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.ProcessId">
            <summary>
            Gets the process identifier where this request originated from. This corresponds
            to <see cref="P:Awesomium.Core.IWebView.ProcessId"/>
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.ViewId">
            <summary>
            Gets the unique identifier of the view where this request originated from.
            This corresponds to <see cref="P:Awesomium.Core.IWebView.Identifier"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.Url">
            <summary>
            Gets the URL associated with this request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.Method">
            <summary>
            Gets the HTTP method (usually "GET" or "POST")
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.Referrer">
            <summary>
            Gets the referrer.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.ExtraHeaders">
            <summary>
            Gets the extra headers for the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.Count">
            <summary>
            Gets the number of upload elements (essentially, batches of POST data).
            </summary>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.Item(System.UInt32)">
            <summary>
            Gets a certain upload element.
            </summary>
            <param name="index">The index of the upload element to seek.</param>
            <returns>An <see cref="T:Awesomium.Core.UploadElement"/> instance.</returns>
        </member>
        <member name="P:Awesomium.Core.IResourceRequest.IsWindowOpen">
            <summary>
            Gets if this is the first request sent by a new view that is the
            result of JavaScript <c>window.open</c>.
            </summary>
            <remarks>
            The initial request (<see cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/>) of new views that are the result 
            of JavaScript <c>window.open</c>, is always issued before the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event is fired. 
            <p/>
            By default, Requests that are the result of JavaScript <c>window.open</c> or are <c>POST</c> requests 
            (such as the submission of HTML forms with method <c>POST</c> and target <c>_blank</c>), are not canceled. The user is 
            expected to wrap the new view (see: <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>) when 
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs, without reloading the target URL since navigation to the target URL 
            is already queued on the new view.
            <p/>
            In order to avoid double requests issued to a target URL, any other requests (most possibly links with target 
            <c>_blank</c> or the submission of HTML forms with target <c>_blank</c> and method <c>GET</c> where data is passed through 
            the URL therefore there's no danger of loosing data), <b>are canceled by default</b>, before <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>,
            and the user must then load the target URL manually.
            <p/>
            <c>POST</c> or <c>window.open</c> requests cannot be canceled in advance, as we do not know if the user chooses to wrap 
            the new view (which is the expected behavior). This however can cause implications in certain scenarios (such as in a 
            <i>popup blocker</i> scenario), where users may want to cancel such requests too.
            <p/>
            <see cref="P:Awesomium.Core.IResourceRequest.IsWindowOpen"/> allows you to implement an <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel such requests yourself
            prior to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, if you do not intend to wrap the new view at <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            </remarks>
            <seealso cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>
        </member>
        <member name="T:Awesomium.Core.NativeHandle">
            <summary>
            Wraps a managed object holding a handle to a resource that is passed to 
            unmanaged code using platform invoke.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NativeHandle.Empty">
            <summary>
            Represents an empty instance of <see cref="T:Awesomium.Core.NativeHandle"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.NativeHandle.#ctor(System.Object,System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Core.NativeHandle"/>
            with the object to wrap and a handle to the resource used by unmanaged
            code.
            </summary>
            <param name="wrapper">
            A managed object that should not be finalized until the platform invoke call
            returns.
            </param>
            <param name="handle">
            An <see cref="T:System.IntPtr"/> that indicates a handle to a resource.
            </param>
            <param name="threadSafe">
            Indicates if the object that wraps the handle, is thread-safe.
            </param>
        </member>
        <member name="M:Awesomium.Core.NativeHandle.op_Implicit(Awesomium.Core.NativeHandle)~System.IntPtr">
            <summary>
            Returns the handle to a resource of the specified <see cref="T:Awesomium.Core.NativeHandle"/>.
            </summary>
            <param name="value">
            The object that needs a handle.
            </param>
            <returns>
            The handle to a resource of the specified <see cref="T:Awesomium.Core.NativeHandle"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.NativeHandle.op_Implicit(Awesomium.Core.NativeHandle)~System.Runtime.InteropServices.HandleRef">
            <summary>
            Returns a <see cref="T:System.Runtime.InteropServices.HandleRef"/> equivalent of the specified <see cref="T:Awesomium.Core.NativeHandle"/>
            that can be used with P/Invoke.
            </summary>
            <param name="value">
            The <see cref="T:Awesomium.Core.NativeHandle"/> wrapping a <see cref="T:System.Runtime.InteropServices.HandleRef"/>.
            </param>
            <returns>
            A <see cref="T:System.Runtime.InteropServices.HandleRef"/> equivalent of the specified <see cref="T:Awesomium.Core.NativeHandle"/>
            that can be used with P/Invoke.
            </returns>
        </member>
        <member name="P:Awesomium.Core.NativeHandle.ThreadSafe">
            <summary>
            Gets if the object holding the handle to a native resource
            (see <see cref="P:Awesomium.Core.NativeHandle.Wrapper"/>), is thread-safe.
            </summary>
        </member>
        <member name="P:Awesomium.Core.NativeHandle.Handle">
            <summary>
            Gets the handle to a native resource.
            </summary>
            <returns>
            The handle to a native resource.
            </returns>
        </member>
        <member name="P:Awesomium.Core.NativeHandle.Wrapper">
            <summary>
            Gets the object holding the handle to a resource. 
            </summary>
            <returns>
            The object holding the handle to a resource.
            </returns>
        </member>
        <member name="P:Awesomium.Core.NativeHandle.IsEmpty">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.NativeHandle"/> represents an empty,
            uninitialized instance.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ThreadAffinityEnsuredAttribute">
            <summary>
            Assign this to an executing assembly that hosts Awesomium, to tell Awesomium that 
            code in the assembly is ensured to never attempt calling on Awesomium.NET API cross-thread, 
            unless by using any of the available synchronization methods.
            </summary>
            <remarks>
            <b>Awesomium</b> and <b>Awesomium.NET</b> are not thread-safe. Any call to members of
            the Awesomium API, should originate from the thread that initialized the <see cref="T:Awesomium.Core.WebCore"/> 
            or created the first <see cref="T:Awesomium.Core.WebView"/>, <see cref="T:Awesomium.Core.WebSession"/> or technology-specific 
            <c>WebControl</c> if <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/> is not explicitly called.
            <note>
            Awesomium.NET provides synchronization methods that allow you to safely access Awesomium API
            cross-thread. For details, read the <b>Remarks</b> section of: <see cref="M:Awesomium.Core.WebCore.Run"/>.
            </note>
            For API calls that are not Awesomium.NET-specific and need to be propagated to native
            Awesomium (using P/Invoke), Awesomium.NET performs several thread affinity checks whenever
            such a call is made. This ensures that no <see cref="T:System.AccessViolationException"/> will occur,
            which is usually difficult to identify. Instead, if the checks conclude that the call being made
            is not thread-safe (does not originate from the correct thread), an <see cref="T:System.InvalidOperationException"/>
            is thrown with a clear message and stack trace.
            <p/>
            Thread affinity checks are performed on each native Awesomium API call. This procedure may
            under certain conditions affect performance. If you notice performance cost and you are
            sure that you have carefully taken care of ensuring thread affinity yourself, you can
            apply this attribute to your executing (entry) assembly. This will tell Awesomium.NET
            to bypass most thread affinity checks.
            <note type="caution">
            Do not apply this attribute to your assembly unless you are absolutely certain that
            no illegal cross-thread calls to Awesomium are being made from your code.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.UUIDUtilities.DnsNamespace">
            <summary>
            The namespace for fully-qualified domain names (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Awesomium.Core.UUIDUtilities.UrlNamespace">
            <summary>
            The namespace for URLs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Awesomium.Core.UUIDUtilities.IsoOidNamespace">
            <summary>
            The namespace for ISO OIDs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Awesomium.Core.UUIDUtilities.OsmNamespace">
            <summary>
            The custom (non-standard) system-global Awesomium namespace.
            </summary>
        </member>
        <member name="M:Awesomium.Core.UUIDUtilities.Create(System.Guid,System.String)">
            <summary>
            Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <returns>A UUID derived from the namespace and name.</returns>
        </member>
        <member name="M:Awesomium.Core.UUIDUtilities.Create(System.Guid,System.String,System.Int32)">
            <summary>
            Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <param name="version">
            The version number of the UUID to create; this value must be either
            3 (for MD5 hashing) or 5 (for SHA-1 hashing).
            </param>
            <returns>A UUID derived from the namespace and name.</returns>
        </member>
        <member name="T:Awesomium.Core.NavigationRequest">
            <summary>
            Provides information for a navigation request.
            </summary>
            <seealso cref="M:Awesomium.Core.IResourceInterceptor.OnFilterNavigation(Awesomium.Core.NavigationRequest)"/>
        </member>
        <member name="F:Awesomium.Core.NavigationRequest.Empty">
            <summary>
            An empty, uninitialized <see cref="T:Awesomium.Core.NavigationRequest"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Core.NavigationRequest.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.NavigationRequest.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.NavigationRequest.op_Equality(Awesomium.Core.NavigationRequest,Awesomium.Core.NavigationRequest)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.NavigationRequest"/> instances are equivalent.
            </summary>
            <param name="nv1">
            The <see cref="T:Awesomium.Core.NavigationRequest"/> instance that is to the left of the equality operator.
            </param>
            <param name="nv2">
            The <see cref="T:Awesomium.Core.NavigationRequest"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="nv1"/> and <paramref name="nv2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.NavigationRequest.op_Inequality(Awesomium.Core.NavigationRequest,Awesomium.Core.NavigationRequest)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.NavigationRequest"/> instances are not equal.
            </summary>
            <param name="nv1">
            The <see cref="T:Awesomium.Core.NavigationRequest"/> instance that is to the left of the inequality operator.
            </param>
            <param name="nv2">
            The <see cref="T:Awesomium.Core.NavigationRequest"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="nv1"/> and <paramref name="nv2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.NavigationRequest.ProcessId">
            <summary>
            Gets the process identifier where this request originated from. This corresponds
            to <see cref="P:Awesomium.Core.IWebView.ProcessId"/>
            </summary>
        </member>
        <member name="P:Awesomium.Core.NavigationRequest.ViewId">
            <summary>
            The unique identifier of the view where this request originated from. This corresponds
            to <see cref="P:Awesomium.Core.IWebView.Identifier"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.NavigationRequest.Method">
            <summary>
            Gets or sets the HTTP method (usually "GET" or "POST")
            </summary>
        </member>
        <member name="P:Awesomium.Core.NavigationRequest.IsMainFrame">
            <summary>
            Gets if the navigation request originated from the main frame
            of the page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.NavigationRequest.Url">
            <summary>
            Gets the URL associated with this navigation request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.NavigationRequest.IsEmpty">
            <summary>
            Gets if this is an empty, uninitialized <see cref="T:Awesomium.Core.NavigationRequest"/>
            instance.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebViewEventType">
            <summary>
            Represents the events of an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <seealso cref="T:Awesomium.Core.IWebViewEventArgs"/>
            <seealso cref="T:Awesomium.Windows.WebViewEventManager"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.None">
            <summary>
            Not an <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary><remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.InitializeView">
            <summary>
            Occurs when the underlying web-view of a <c>WebControl</c>is about to be instantiated and wrapped or, 
            for child views created in response to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, the native view assigned to 
            the <c>NativeView</c> property of a <c>WebControl</c>, is about to be wrapped.
            </summary><remarks>
            This is the last moment for setting any of the following properties, on a <c>WebControl</c>:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Properties
            </description>
            </listheader>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            These properties are implemented as read-write properties on <c>WebControls</c> and
            can only be set before the underlying web-view of a <c>WebControl</c> is created,
            or a previously created native view is wrapped (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            <p/>
            Right after this event is fired, the <c>WebControl</c> goes live (<see cref="P:Awesomium.Core.IWebView.IsLive"/>
            is set to <c>true</c>) and these properties can no longer be changed.
            <note type="caution">
            Attempting to set some of the above properties after a <c>WebControl</c> is live,
            is usually silently ignored but may also throw an exception. For details, refer to the
            documentation of the properties.
            </note>
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately at creation.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.NativeViewInitialized">
            <summary>
            Occurs when the native underlying web-view of a <c>WebControl</c>, has been initialized.
            </summary><remarks>
            This event occurs right after <see cref="P:Awesomium.Core.IWebView.IsLive"/> is set to <c>true</c> and 
            also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately after creation.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.WindowClose">
            <summary>
            Occurs when Javascript in the page calls <c>window.close</c>.
            </summary><remarks>
            You can ignore this event, or respond depending on the current context.
            For example, if the page is open in the main window of an application
            or a tab, browsers display a confirmation dialog asking the user if he
            wants to acknowledge the page's request.
            <p/>
            If the page is open in a popup window, browsers usually respect the
            request and close the popup window, without any confirmation from the user.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.JavascriptRequest">
            <summary>
            Occurs when a JavaScript client sends a management request through
            <see cref="T:global.OSMJIF"/> (such as <see cref="M:global.OSMJIF.minimize(global.Multiple)"/>, 
            <see cref="M:global.OSMJIF.maximize(global.Multiple)"/> etc.).
            </summary><remarks>
            The request sent is identified by <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.Request"/>.
            <p/>
            A request token can be passed by JavaScript clients to the native application and
            it's received through <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs.RequestToken&quot;]/remarks/node()"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs&quot;]/remarks/node()"/>
            <p/>
            Unless the request originates from a page that has been created by the application
            (such as pages provided though a <see cref="T:Awesomium.Core.Data.DataSource"/>), applications should be careful
            when handling management requests. For example, a <see cref="M:global.OSMJIF.exit(global.Multiple)"/>
            command asks from the native application to exit immediately. The <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            is provided so that native applications can validate such requests.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.JavascriptMessage">
            <summary>
            Occurs when a JavaScript client sends a message through <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            or <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>.
            </summary><remarks>
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> and the asynchronous
            <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>, 
            can be used instead of creating and binding to custom methods of a global JavaScript object
            created with <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>.
            <p/>
            Unlike regular <b>synchronous</b> custom JavaScript methods created by the managed application
            through <see cref="O:Awesomium.Core.JSObject.Bind"/> or using the Dynamic Language Runtime (DLR),
            <b><see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> allows callers to pass 
            JavaScript objects to the <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> array, even though the method 
            is called synchronously</b> (see <a href="http://wiki.awesomium.net/javascript/sync_async_js_api.html">Synchronous &amp; Asynchronous API</a>).
            <p/>
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> are being serialized,
            any function members (methods) are stripped out and they are deserialized to the hosting
            application as local JSObjects. Nevertheless, the objects are still passed by reference.
            <b>Any changes applied to passed objects in the handler of a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/>
            event, will be reflected back to the original remote instances when <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            returns</b>.
            <p/>
            <note type="note">
            Function members (methods) of objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>,
            are being stripped out when the object is passed to the hosting application (calling them from the hosting
            application would cause a deadlock). However this does not affect the original client-side instances.
            </note>
            <note type="caution">
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>, are serialized
            and deserialized using JSON. Objects whose structure includes a circular reference, cannot be passed.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.WindowUnload">
            <exclude />
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ShowJavascriptDialog">
            <summary>
            Occurs when a JavaScript call that requires the creation of a modal dialog, is called.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.AddressChanged">
            <summary>
            Occurs when the page URL has changed, usually after navigation to a new
            URL has started.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed.
            </summary><remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            <note>
            When setting <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>
            to handle tooltips yourself, you should expect an empty string passed
            to <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> and in response to it,
            hide your tooltip (if any).
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary><remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ConsoleMessage">
            <summary>
            Occurs when a message is added to the console on the page.
            This is usually the result of a JavaScript error being encountered
            on a page.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link).
            </summary><remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance creates a new child view 
            (usually the result of <c>window.open</c>, clicking on a link with <c>target="_blank"</c> or submitting a <c>form</c>
            with <c>target="_blank"</c>). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <p/>
            <note>
            The <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event must always be handled in your application to wrap views created by
            Awesomium in response to users clicking a link or JavaScript <c>window.open</c> calls.
            <p/>
            If you don't handle this event, the unused web-view instance will be immediately destroyed.
            </note>
            There are a number of facts you need to take into consideration, before taking the appropriate actions in response 
            to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. The following list presents these facts and some general suggestions:
            <list type="bullet">
            <item>
            <description>
            The created child view, has the same type (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>) and is assigned to the same session
            (see <see cref="P:Awesomium.Core.IWebView.WebSession"/>) as its parent (opener) view. Therefore, you should not attempt to set these 
            properties if you are wrapping the new child view with a technology specific <c>WebControl</c>.
            </description>
            </item>
            <item>
            <description>
            In order to maintain the relationship with their parent view, child views execute and render under 
            the same process (<c>awesomium_process</c>) as their parent view. If for any reason the child process crashes,
            all views related to it will be affected.
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of a Javascript <c>window.open</c>,
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b> the created child view instance
            (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to maintain the parent-child window relationship (the child page can access
            the parent through the <c>window.opener</c> property; the parent can manipulate the child through the
            <c>window</c> object returned from the <c>window.open</c> call, which is why <c>window.open</c> was most
            probably used in the first place).
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of an HTML form with <c>target="_blank"</c> and
            <c>method="post"</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b>
            the created child view instance (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to allow <c>POST</c> data be properly passed.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>, it most possibly indicates that the event is the result of
            a user clicking on a link with <c>target="_blank"</c>. Since maintaining a parent-child relationship is not important
            in this scenario, <b>you should cancel the event</b> by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> (this tells the core 
            to destroy the unused web-view instance), then create a new <see cref="T:Awesomium.Core.WebView"/> (using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>)
            or <c>WebControl</c> and navigate to the provided <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any. This allows you to take advantage
            of the isolated process architecture of Awesomium and let each view be rendered in a separate process.
            <note type="caution">
            Failing to cancel the event when you are not wrapping the new child view instance, will keep the native instance alive until 
            the <see cref="T:Awesomium.Core.WebCore"/> is shut down. This can result in numerous unused views being spawned, but never actually used.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, 
            is already queued on the created child view. Therefore you should not attempt to set the <see cref="P:Awesomium.Core.IWebView.Source"/> when you 
            are wrapping the child view, as this would again break the parent-child relationship (<c>window.opener</c> on the child page and the 
            <c>window</c> object returned from the <c>window.open</c> call on the parent page, will be rendered invalid) or prevent passing
            <c>POST</c> data to the server respectively.
            <note>
            Also note that since navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, has already started by the moment the child
            view is wrapped, <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> will not be fired for the main frame of the new <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            </note>
            </description>
            </item>
            <item>
            <description>
            Navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, is blocked on the created child view, when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> and 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>. As applications will generally choose to cancel the event and create a new <see cref="T:Awesomium.Core.IWebView"/> 
            instance to navigate to the target URL (or even choose to navigate to the target URL on the same <see cref="T:Awesomium.Core.IWebView"/> instance that 
            fired the event), Awesomium.NET does this to prevent <i>false hits</i> to the target URL, that would have occurred by the time the 
            event handler returns and the unused child view instance, is destroyed. What's more, users may also implement 
            <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel requests to new views that are the result of JavaScript <c>window.open</c>
            (see <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>). Therefore, if your application chooses to wrap the created 
            child view even though it is most possibly the result of a user clicking on a link with <c>target="_blank"</c> or navigation
            to the target URL has already been canceled by an <see cref="T:Awesomium.Core.IResourceInterceptor"/> (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>), 
            you should in this scenario only, after wrapping the child view, set the <see cref="P:Awesomium.Core.IWebView.Source"/> property to 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> to resume navigation to the target URL.
            <note>
            Applications can occasionally choose to wrap a child view even when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>false</c> or 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>, if they want to apply a <i>single process</i> architecture where all new 
            views created will be rendered by the same <c>awesomium_process</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> returns a valid, initialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
            instance. This may be initialized to default values if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>false</c>, or reflect the <i>specs</i> 
            specified to the <c>window.open</c> call, if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>.
            </description>
            </item>
            <item>
            <description>
            If <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, applications should generally wrap and present the native view in a new popup application
            window. This window should have the size and location specified in <see cref="P:Awesomium.Core.JSWindowOpenSpecs.InitialPosition"/>, <b>if this is not
            empty</b>. They should also respect the rest of the specs available through <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, when creating
            the new application window that will host the child view.
            <note>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is always also <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> will only be <c>true</c>, if <i>specs</i> were specified to the <c>window.open</c> call. These can be
            standard specs such as <c>width=400,height=400,menubar=no</c>, only user defined, non-standard specs such as <c>background=black</c>
            or a combination of both. These specs are available through the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> property.
            </description>
            </item>
            <item>
            <description>
            If only user defined, non-standard <i>specs</i> were specified to the <c>window.open</c> call, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will
            be <c>true</c>. In this scenario, if your application does not recognize user defined, non-standard specs, it can ignore the 
            value of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> all together and wrap the new child view in a regular new application window, tab or control.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData"/> returns an array of <see cref="T:Awesomium.Core.UploadElement"/>,
            representing the <i>upload</i> data passed to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> using <c>POST</c>.
            </description>
            </item>
            <item>
            <description>
            Finally note that only an empty <i>name</i> parameter or a <c>_blank</c> target attribute specified as the <i>name</i> parameter 
            in a <c>window.open</c> call or in a link or <c>form</c>, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. Other target 
            attributes (such as <c>_top</c>), passed to either a <c>window.open</c> call, a link or a <c>form</c>, are handled by Awesomium internally.
            </description>
            </item>
            </list>
            <note type="caution">
            Several members of <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>, may not return valid values if Javascript is disabled.
            For details, read the documentation of: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>.
            </note>
            Given the facts and suggestions presented before, if your application is about to wrap the created child view, the following 
            table shows the methods available, to wrap the created child view using any of the <b>Awesomium.NET</b> web-view components:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Method and Notes
            </description>
            </listheader>
            <item>
            <term>
            Core
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Pass <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>
            to wrap the new view with a <see cref="T:Awesomium.Core.WebView"/>.
            </description>
            </item>
            <item>
            <description>
            For <i>windowed</i> views (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>), you should now assign a <see cref="P:Awesomium.Core.WebView.ParentWindow"/>.
            <i>Offscreen</i> views have a <see cref="T:Awesomium.Core.BitmapSurface"/> assigned by default but depending on your application's design,
            you may have to assign a new <see cref="T:Awesomium.Core.ISurface"/> by either monitoring the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event, 
            or setting the <see cref="P:Awesomium.Core.IWebView.Surface"/> property.
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Core.WebView"/> to match its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Controls.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Controls.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Controls.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by binding the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property
            in XAML (see examples in the <b>Awesomium.NET Samples</b> solution available with the SDK), or by monitoring the 
            <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Controls.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Forms.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Forms.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Forms.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by assigning the <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property
            right after the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is created (see examples in the <b>Awesomium.NET Samples</b> solution available 
            with the SDK),or by monitoring the <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Forms.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks><example>
            The following example illustrates handling the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event in a WPF application that uses
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> controls. In this example, we create a <i>ChildWindow</i> window
            that hosts a <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This window and its hosted <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            will be used to wrap and present the child view passed to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, or navigate to the
            target URL, if <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of a link with <c>target="_blank"</c>.
            <p/>
            Below is the XAML of our <b>ChildWindow</b>.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WebControlSample.ChildWindow" 
                x:Name="childWindow"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                Title="{Binding Title, ElementName=webControl}" 
                Height="480" 
                Width="600">
                <Window.Resources>
                    <!-- We do not need to set any WebPreferences or DataSources 
                    on this provider. It uses the same DataPath as the provider in
                    MainWindow, therefore, this provider will provide the same session,
                    already created by the WebSessionProvider in MainWindow. -->
                    <awe:WebSessionProvider x:Key="mySession" DataPath=".\Cache" />
                </Window.Resources>
                <Grid>
                    <!-- Note that the WebSession assigned to this WebControl, will
                         be effectively ignored when this WebControl wraps a created
                         child view. Child views share the same session as their parent
                         (opener) view. -->
                    <awe:WebControl 
                        Name="webControl" 
                        WebSession="{Binding Source={StaticResource mySession}}"
                        Source="{Binding Source, ElementName=childWindow}"
                        NativeView="{Binding NativeView, ElementName=childWindow}" />
                </Grid>
            </Window>
            ]]>
            </code>
            This is the code-behind of the <b>ChildWindow</b>:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for ChildWindow.xaml
                /// </summary>
                public partial class ChildWindow : Window
                {
                    public ChildWindow()
                    {
                        InitializeComponent();
            
                        // In this example, ShowCreatedWebView of all WebControls, 
                        // is handled by a common handler.
                        webControl.ShowCreatedWebView += App.OnShowNewView;
                    }
            
                    protected override void OnClosed( EventArgs e )
                    {
                        base.OnClosed( e );
            
                        // Destroy the WebControl and its underlying view.
                        webControl.Dispose();
                    }
            
                    // This will be set to the target URL, when this ChildWindow does not
                    // host a created child view. The WebControl, is bound to this property.
                    public Uri Source
                    {
                        get { return this.GetValue( SourceProperty ) as Uri; }
                        set { SetValue( SourceProperty, value ); }
                    }
            
                    public static readonly DependencyProperty SourceProperty = 
                        DependencyProperty.Register( "Source",
                        typeof( Uri ), typeof( ChildWindow ),
                        new UIPropertyMetadata( null ) );
            
                    // This will be set to the created child view that the WebControl will wrap,
                    // when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    // is bound to this property.
                    public IntPtr NativeView
                    {
                        get { return (IntPtr)this.GetValue( ChildWindow.NativeViewProperty ); }
                        internal set { this.SetValue( ChildWindow.NativeViewPropertyKey, value ); }
                    }
            
                    private static readonly DependencyPropertyKey NativeViewPropertyKey = 
                        DependencyProperty.RegisterReadOnly( "NativeView",
                        typeof( IntPtr ), typeof( ChildWindow ),
                        new FrameworkPropertyMetadata( IntPtr.Zero ) );
            
                    public static readonly DependencyProperty NativeViewProperty =
                        NativeViewPropertyKey.DependencyProperty;
            
                }
            }
            ]]>
            </code>
            <code lang="VB.NET">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            
            Namespace WebControlSample
                ''' <summary>
                ''' Interaction logic for ChildWindow.xaml
                ''' </summary>
                Partial Public Class ChildWindow
                    Inherits Window
            
                    Public Sub New()
                        InitializeComponent()
            
                        ' In this example, ShowCreatedWebView of all WebControls, 
                        ' is handled by a common handler.
                        AddHandler webControl.ShowCreatedWebView, AddressOf App.OnShowNewView
                    End Sub
            
                    Protected Overrides Sub OnClosed(ByVal e As EventArgs)
                        MyBase.OnClosed(e)
            
                        ' Destroy the WebControl and its underlying view.
                        webControl.Dispose()
                    End Sub
            
                    ' This will be set to the target URL, when this ChildWindow does not
                    ' host a created child view. The WebControl, is bound to this property.
                    Public Property Source() As Uri
                        Get
                            Return TryCast(Me.GetValue(SourceProperty), Uri)
                        End Get
                        Set(ByVal value As Uri)
                            SetValue(SourceProperty, value)
                        End Set
                    End Property
            
                    Public Shared ReadOnly SourceProperty As DependencyProperty =
                        DependencyProperty.Register("Source", GetType(Uri),
                        GetType(ChildWindow), New UIPropertyMetadata(Nothing))
            
                    ' This will be set to the created child view that the WebControl will wrap,
                    ' when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    ' is bound to this property.
                    Public Property NativeView() As IntPtr
                        Get
                            Return CType(Me.GetValue(ChildWindow.NativeViewProperty), IntPtr)
                        End Get
                        Friend Set(ByVal value As IntPtr)
                            Me.SetValue(ChildWindow.NativeViewPropertyKey, value)
                        End Set
                    End Property
            
                    Private Shared ReadOnly NativeViewPropertyKey As DependencyPropertyKey =
                        DependencyProperty.RegisterReadOnly("NativeView", GetType(IntPtr),
                        GetType(ChildWindow), New FrameworkPropertyMetadata(IntPtr.Zero))
            
                    Public Shared ReadOnly NativeViewProperty As DependencyProperty =
                        NativeViewPropertyKey.DependencyProperty
                End Class
            End Namespace
            ]]>
            </code>
            Below is the common <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> handler, defined in our <see cref="T:System.Windows.Application"/> object
            code-behind:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            using Awesomium.Windows.Controls;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for App.xaml
                /// </summary>
                public partial class App : Application
                {
                    private void Application_Exit( object sender, ExitEventArgs e )
                    {
                        // Shutdown the Core.
                        WebCore.Shutdown();
                    }
            
                    // This static handler, will handle the ShowCreatedWebView event for both the 
                    // WebControl of our main application window, as well as for any other windows
                    // hosting WebControls.
                    internal static void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
                    {
                        WebControl webControl = sender as WebControl;
            
                        if ( webControl == null )
                            return;
            
                        if ( !webControl.IsLive )
                            return;
            
                        // Create an instance of our application's child window, that will
                        // host the new view instance, either we wrap the created child view,
                        // or we let the WebControl create a new underlying web-view.
                        ChildWindow newWindow  = new ChildWindow();
            
                        // Treat popups differently. If IsPopup is true, the event is always
                        // the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
                        // Our application does not recognize user defined, non-standard specs. 
                        // Therefore child views opened with non-standard specs, will not be presented as 
                        // popups but as regular new windows (still wrapping the child view however -- se below).
                        if ( e.IsPopup && !e.IsUserSpecsOnly )
                        {
                            // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
                            Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();
            
                            // Set the created native view as the underlying view of the
                            // WebControl. This will maintain the relationship between
                            // the parent view and the child, usually required when the new view
                            // is the result of 'window.open' (JS can access the parent window through
                            // 'window.opener'; the parent window can manipulate the child through the 'window'
                            // object returned from the 'window.open' call).
                            newWindow.NativeView = e.NewViewInstance;
                            // Do not show in the taskbar.
                            newWindow.ShowInTaskbar = false;
                            // Set a border-style to indicate a popup.
                            newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow;
                            // Set resizing mode depending on the indicated specs.
                            newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;
            
                            // If the caller has not indicated a valid size for the new popup window,
                            // let it be opened with the default size specified at design time.
                            if ( ( screenRect.Width > 0 ) && ( screenRect.Height > 0 ) )
                            {
                                // Assign the indicated size.
                                newWindow.Width = screenRect.Width;
                                newWindow.Height = screenRect.Height;
                            }
            
                            // Show the window.
                            newWindow.Show();
            
                            // If the caller has not indicated a valid position for the new popup window,
                            // let it be opened in the default position specified at design time.
                            if ( ( screenRect.Y > 0 ) && ( screenRect.X > 0 ) )
                            {
                                // Move it to the indicated coordinates.
                                newWindow.Top = screenRect.Y;
                                newWindow.Left = screenRect.X;
                            }
                        }
                        else if ( e.IsWindowOpen || e.IsPost )
                        {
                            // No specs or only non-standard specs were specified, but the event is still 
                            // the result of 'window.open', or of an HTML form with tagret="_blank" and method="post". 
                            // We will open a normal window but we will still wrap the new native child view, 
                            // maintaining its relationship with the parent window.
                            newWindow.NativeView = e.NewViewInstance;
                            // Show the window.
                            newWindow.Show();
                        }
                        else
                        {
                            // The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
                            // and method="post"., therefore it's most probably the result of a link with target='_blank'.
                            // We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
                            // create its own underlying view. Setting Cancel to true tells the core to destroy the 
                            // created child view.
                            //
                            // Why don't we always wrap the native view passed to ShowCreatedWebView?
                            //
                            // - In order to maintain the relationship with their parent view,
                            // child views execute and render under the same process (awesomium_process)
                            // as their parent view. If for any reason this child process crashes,
                            // all views related to it will be affected. When maintaining a parent-child 
                            // relationship is not important, we prefer taking advantage of the isolated process 
                            // architecture of Awesomium and let each view be rendered in a separate process.
                            e.Cancel = true;
                            // Note that we only explicitly navigate to the target URL, when a new view is 
                            // about to be created, not when we wrap the created child view. This is because 
                            // navigation to the target URL (if any), is already queued on created child views. 
                            // We must not interrupt this navigation as we would still be breaking the parent-child
                            // relationship.
                            newWindow.Source = e.TargetURL;
                            // Show the window.
                            newWindow.Show();
                        }
                    }
                }
            }
            ]]>
            </code>
            <code lang="VB">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            Imports Awesomium.Windows.Controls
            
            Namespace WebControlSample
            	''' <summary>
            	''' Interaction logic for App.xaml
            	''' </summary>
            	Partial Public Class App
            		Inherits Application
            
            		Private Sub Application_Exit(ByVal sender As Object, ByVal e As ExitEventArgs)
            			' Shutdown the Core.
            			WebCore.Shutdown()
            		End Sub
            
            		' This static handler, will handle the ShowCreatedWebView event for both the 
            		' WebControl of our main application window, as well as for any other windows
            		' hosting WebControls.
            		Friend Shared Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            			Dim webControl As WebControl = TryCast(sender, WebControl)
            
            			If webControl Is Nothing Then Return
            
            			If Not webControl.IsLive Then Return
            
            			' Create an instance of our application's child window, that will
            			' host the new view instance, either we wrap the created child view,
            			' or we let the WebControl create a new underlying web-view.
            			Dim newWindow As New ChildWindow()
            
            			' Treat popups differently. If IsPopup is true, the event is always
            			' the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
            			' Our application does not recognize user defined, non-standard specs. 
            			' Therefore child views opened with non-standard specs, will not be presented as 
            			' popups but as regular new windows (still wrapping the child view however -- se below).
            			If e.IsPopup AndAlso (Not e.IsUserSpecsOnly) Then
            				' JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
            				Dim screenRect As Int32Rect = e.Specs.InitialPosition.GetInt32Rect()
            
            				' Set the created native view as the underlying view of the
            				' WebControl. This will maintain the relationship between
            				' the parent view and the child, usually required when the new view
            				' is the result of 'window.open' (JS can access the parent window through
            				' 'window.opener'; the parent window can manipulate the child through the 'window'
            				' object returned from the 'window.open' call).
            				newWindow.NativeView = e.NewViewInstance
            				' Do not show in the taskbar.
            				newWindow.ShowInTaskbar = False
            				' Set a border-style to indicate a popup.
            				newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow
            				' Set resizing mode depending on the indicated specs.
            				newWindow.ResizeMode = If(e.Specs.Resizable, ResizeMode.CanResizeWithGrip, ResizeMode.NoResize)
            
            				' If the caller has not indicated a valid size for the new popup window,
            				' let it be opened with the default size specified at design time.
            				If (screenRect.Width > 0) AndAlso (screenRect.Height > 0) Then
            					' Assign the indicated size.
            					newWindow.Width = screenRect.Width
            					newWindow.Height = screenRect.Height
            				End If
            
            				' Show the window.
            				newWindow.Show()
            
            				' If the caller has not indicated a valid position for the new popup window,
            				' let it be opened in the default position specified at design time.
            				If (screenRect.Y > 0) AndAlso (screenRect.X > 0) Then
            					' Move it to the indicated coordinates.
            					newWindow.Top = screenRect.Y
            					newWindow.Left = screenRect.X
            				End If
            			ElseIf (e.IsWindowOpen OrElse e.IsPost) Then
            				' No specs or only non-standard specs were specified, but the event is still 
            				' the result of 'window.open' or of an HTML form with tagret="_blank" and method="post".
            				' We will open a normal window but we will still wrap the new native child view, 
            				' maintaining its relationship with the parent window.
            				newWindow.NativeView = e.NewViewInstance
            				' Show the window.
            				newWindow.Show()
            			Else
            				' The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
            				' and method="post"., therefore it's most probably the result of a link with target='_blank'.
            				' We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
            				' create its own underlying view. Setting Cancel to true tells the core to destroy the 
            				' created child view.
            				'
            				' Why don't we always wrap the native view passed to ShowCreatedWebView?
            				'
            				' - In order to maintain the relationship with their parent view,
            				' child views execute and render under the same process (awesomium_process)
            				' as their parent view. If for any reason this child process crashes,
            				' all views related to it will be affected. When maintaining a parent-child 
            				' relationship is not important, we prefer taking advantage of the isolated process 
            				' architecture of Awesomium and let each view be rendered in a separate process.
            				e.Cancel = True
            				' Note that we only explicitly navigate to the target URL, when a new view is 
            				' about to be created, not when we wrap the created child view. This is because 
            				' navigation to the target URL (if any), is already queued on created child views. 
            				' We must not interrupt this navigation as we would still be breaking the parent-child
            				' relationship.
            				newWindow.Source = e.TargetURL
            				' Show the window.
            				newWindow.Show()
            			End If
            		End Sub
            	End Class
            End Namespace
            ]]>
            </code>
            For the complete sample, see the <b>C# WebControlSample</b> of the <b>Awesomium.NET Samples</b> solution, available with the SDK.
            </example><seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/><seealso cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary><remarks>
            
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary><remarks>
            The main frame usually finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary><remarks>
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> 
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event either <b>modally</b> or <b>non-modally</b>. 
            <b>Only default or modal handling is officially supported by Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>.
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the above <see cref="T:Awesomium.Core.IWebView"/>
            member, is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            <note type="caution">
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
             No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.CertificateError">
            <summary>
            Occurs when an SSL certificate error is encountered while attempting to navigate
            to a new address.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event is handled, 
            when <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), navigation to the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/> will be canceled
            due to the SLL certificate error.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/> property, 
            <b>before</b> the event handler exits.
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the error and navigation to <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/>
            will be canceled, unless you call <see cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>.
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this method.
            </note>
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            </list>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.Printing">
            <summary>
            Occurs when a printing operation has started.
            </summary><remarks>
            This event occurs:
            <list type="bullet">
            <item>
            <description>
            On any <see cref="T:Awesomium.Core.IWebView"/> instance, right after a call to <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>.
            </description>
            </item>
            <item>
            <description>
            On technology specific <c>WebControls</c>, right after a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> 
            event that has not been handled, or canceled (either programmatically or by canceling the 
            <i>Select Folder</i> dialog).
            </description>
            </item>
            </list>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary><remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <p/>
            Optionally, you can easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ShowPageInfo">
            <summary>
            Occurs in response to a <see cref="M:Awesomium.Core.IWebView.RequestPageInfo"/>
            call, requesting for the page's security related information.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewEventType.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CertificateErrorEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CertificateErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CertificateErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
            <seealso cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>
        </member>
        <member name="P:Awesomium.Core.CertificateErrorEventArgs.Url">
            <summary>
            Gets a <see cref="T:System.Uri"/> instance representing the
            the URL a frame navigates to.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable">
            <summary>
            Gets if it's safe to ignore this error and continue loading the page. 
            </summary>
            <remarks>
            <note type="caution">
            If this is <c>false</c>, you must always ask for the user's confirmation
            to proceed loading the page.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/>
        </member>
        <member name="P:Awesomium.Core.CertificateErrorEventArgs.Error">
            <summary>
            Gets the specific certificate error that has occurred
            while attempting to navigate to <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CertificateErrorEventArgs.Ignore">
            <summary>
            Gets or sets if the SSL certificate error should be ignored
            and navigation must proceed.
            </summary>
            <remarks> 
            <note>
            Set this property when you handle the event modally 
            (see <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>).
            <p/>
            The value of this property is ignored when 
            <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to
            any other value than <see cref="F:Awesomium.Core.EventHandling.Modal"/>.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/>
            <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
        </member>
        <member name="P:Awesomium.Core.CertificateErrorEventArgs.Handled">
            <summary>
            Gets or sets if the event is handled by an application.
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event is handled, 
            when <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), navigation to the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/> will be canceled
            due to the SLL certificate error.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/> property, 
            <b>before</b> the event handler exits.
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the error and navigation to <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/>
            will be canceled, unless you call <see cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>.
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this method.
            </note>
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/>
            <seealso cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/>
        </member>
        <member name="T:Awesomium.Core.BeginNavigationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.INavigationInterceptor.BeginNavigation"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.NavigationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.NavigationEventArgs">
            <summary>
            Provides data for navigation events.
            </summary>
            <seealso cref="E:Awesomium.Core.INavigationInterceptor.BeginNavigation"/>
            <seealso cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.NavigationEventArgs.Url">
            <summary>
            Gets a <see cref="T:System.Uri"/> instance representing the
            the URL a frame navigates to.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FrameEventHandler">
            <summary>
            Represents the method that will handle events that provide a frame id.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.FrameEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.FrameEventArgs">
            <summary>
            Provides data for events that provide a frame id.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.FrameEventArgs.FrameId">
            <summary>
            Gets the frame's identifier.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.FrameEventArgs.IsMainFrame">
            <summary>
            Indicates if this is the main frame of the page.
            </summary>
            <remarks>
            When a page is loaded, the main frame usually finishes loading last.
            This is helpful when you want to know when a page is fully loaded.
            <note>
            While a specific page load may appear as complete, asynchronous
            requests (AJAX etc.) may still be in progress. The fact that the main frame
            of a page has loaded, does not guarantee that the visual content of the
            page is fully rendered.
            </note>
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="T:Awesomium.Core.WebViewCancelEventHandler">
            <summary>
            Represents the method that will handle a cancelable <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.WebViewCancelEventArgs"/> instance that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WebViewEventHandler">
            <summary>
            Represents the method that will handle an <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.WebViewEventArgs"/> instance that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.INavigationInterceptor">
            <summary>
            Represents a service on a <see cref="T:Awesomium.Core.IWebView"/> instance, that allows you to
            cancel frame navigations or add/remove navigation filtering rules to the view.
            </summary>
            <remarks>
            You can acquire this service by calling <see cref="M:System.IServiceProvider.GetService(System.Type)"/> on a <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            <p/>
            Events on this service are called after the <see cref="M:Awesomium.Core.IResourceInterceptor.OnFilterNavigation(Awesomium.Core.NavigationRequest)"/>
            of a global <see cref="T:Awesomium.Core.IResourceInterceptor"/> assigned to <see cref="P:Awesomium.Core.WebCore.ResourceInterceptor"/>,
            has been called. Returning <c>true</c> at <see cref="M:Awesomium.Core.IResourceInterceptor.OnFilterNavigation(Awesomium.Core.NavigationRequest)"/> will
            prevent the events of this service from being called. Rules applied to this service will also be ignored.
            <note type="caution">
            This events on this service are called on the I/O Thread. Therefore, you should not
            make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
            <example>
            This example demonstrates adding navigation rules to a <see cref="T:Awesomium.Core.INavigationInterceptor"/>.
            <code lang="C#">
            private void webView_NativeViewInitialized( object sender, WebViewEventArgs e )
            {
                INavigationInterceptor navigationInterceptor = webView.GetService( typeof( INavigationInterceptor ) ) as INavigationInterceptor;
                 
                 if ( navigationInterceptor == null )
                     return;
                     
                CollectionChangeAction res;
            
                // 1.
                // This call will successfully add a Deny rule for the specified URL pattern.
                res = navigationInterceptor.AddRule( @"http?://*.somedomain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 2.
                // This call will be ignored, as it attempts to narrow an already wider rule (1).
                res = navigationInterceptor.AddRule( @"http?://*admin.somedomain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 3.
                // This call will replace the first (1) rule.
                res = navigationInterceptor.AddRule( @"http?://*domain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 4.
                // This call will successfully add an Allow rule for the specified URL pattern.
                // Although the pattern narrows the one specified in the third (3) call, this call is not 
                // ignored as it specifies an Allow (Whitelist) rule.
                res = navigationInterceptor.AddRule( @"http?://*.somedomain.info/*", NavigationRule.Allow );
                Debug.Print( res.ToString() );
            
                // 5.
                // This call will replace everything added so far, including the third (3) rule.
                // Patterns must be unique irrespective of the rule applied. An Allow and Deny rule
                // cannot be applied to the same pattern. The last rule added, replaces an existing
                // rule with the same pattern.
                res = navigationInterceptor.AddRule( @"http?://*domain.info/*", NavigationRule.Allow );
                Debug.Print( res.ToString() );
            }
            </code>
            <code lang="VB.NET">
            Private Sub webView_NativeViewInitialized(sender As Object, e As WebViewEventArgs)
                Dim navigationInterceptor As INavigationInterceptor = TryCast(webView.GetService(GetType(INavigationInterceptor)), INavigationInterceptor)
            
                If navigationInterceptor Is Nothing Then
                    Return
                End If
                        
                Dim res As CollectionChangeAction
            
                ' 1.
                ' This call will successfully add a Deny rule for the specified URL pattern.
                res = navigationInterceptor.AddRule("http?://*.somedomain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 2.
                ' This call will be ignored, as it attempts to narrow an already wider rule (1).
                res = navigationInterceptor.AddRule("http?://*admin.somedomain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 3.
                ' This call will replace the first (1) rule.
                res = navigationInterceptor.AddRule("http?://*domain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 4.
                ' This call will successfully add an Allow rule for the specified URL pattern.
                ' Although the pattern narrows the one specified in the third (3) call, this call is not 
                ' ignored as it specifies an Allow (Whitelist) rule.
                res = navigationInterceptor.AddRule("http?://*.somedomain.info/*", NavigationRule.Allow)
                Debug.Print(res.ToString())
            
                ' 5.
                ' This call will replace everything added so far, including the third (3) rule.
                ' Patterns must be unique irrespective of the rule applied. An Allow and Deny rule
                ' cannot be applied to the same pattern. The last rule added, replaces an existing
                ' rule with the same pattern.
                res = navigationInterceptor.AddRule("http?://*domain.info/*", NavigationRule.Allow)
                Debug.Print(res.ToString())
            End Sub
            </code>
            Output:
            <pre>
            Add
            Remove
            Refresh
            Add
            Refresh
            </pre>
            </example>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.AddRule(System.String,Awesomium.Core.NavigationRule)">
            <summary>
            Adds a navigation filtering rule for navigations to resources
            that match the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">
            A navigation filter pattern. Can contain wildcards.
            </param>
            <param name="rule">
            The rue to apply when a navigation that matches the specified
            <paramref name="pattern"/> occurs.
            </param>
            <returns>
            A <see cref="T:System.ComponentModel.CollectionChangeAction"/> value indicating
            if the rule was added, replaced existing rules or ignored.
            <p/>
            The following table explains the possible return values:
            <list type="table">
            <listheader>
            <term>
            Return Value
            </term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:System.ComponentModel.CollectionChangeAction.Add"/>
            </term>
            <description>
            The rule was successfully added.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/>
            </term>
            <description>
            The rule was added, replacing older narrowing rules.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/>
            </term>
            <description>
            The rule was ignored. A widening rule already exists.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            This method can simply add a rule, replace older rules or be ignored.
            For a demonstration, see the <b>Examples</b> section.
            <p/>
            Depending on the <paramref name="rule"/> specified for the <paramref name="pattern"/>,
            added rules can be accessed through the <see cref="P:Awesomium.Core.INavigationInterceptor.Whitelist"/> and <see cref="P:Awesomium.Core.INavigationInterceptor.Blacklist"/>
            properties.
            </remarks>
            <example>
            This example demonstrates adding navigation rules to a <see cref="T:Awesomium.Core.INavigationInterceptor"/>.
            <code lang="C#">
            private void webView_NativeViewInitialized( object sender, WebViewEventArgs e )
            {
                INavigationInterceptor navigationInterceptor = webView.GetService( typeof( INavigationInterceptor ) ) as INavigationInterceptor;
                 
                 if ( navigationInterceptor == null )
                     return;
                     
                CollectionChangeAction res;
            
                // 1.
                // This call will successfully add a Deny rule for the specified URL pattern.
                res = navigationInterceptor.AddRule( @"http?://*.somedomain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 2.
                // This call will be ignored, as it attempts to narrow an already wider rule (1).
                res = navigationInterceptor.AddRule( @"http?://*admin.somedomain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 3.
                // This call will replace the first (1) rule.
                res = navigationInterceptor.AddRule( @"http?://*domain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 4.
                // This call will successfully add an Allow rule for the specified URL pattern.
                // Although the pattern narrows the one specified in the third (3) call, this call is not 
                // ignored as it specifies an Allow (Whitelist) rule.
                res = navigationInterceptor.AddRule( @"http?://*.somedomain.info/*", NavigationRule.Allow );
                Debug.Print( res.ToString() );
            
                // 5.
                // This call will replace everything added so far, including the third (3) rule.
                // Patterns must be unique irrespective of the rule applied. An Allow and Deny rule
                // cannot be applied to the same pattern. The last rule added, replaces an existing
                // rule with the same pattern.
                res = navigationInterceptor.AddRule( @"http?://*domain.info/*", NavigationRule.Allow );
                Debug.Print( res.ToString() );
            }
            </code>
            <code lang="VB.NET">
            Private Sub webView_NativeViewInitialized(sender As Object, e As WebViewEventArgs)
                Dim navigationInterceptor As INavigationInterceptor = TryCast(webView.GetService(GetType(INavigationInterceptor)), INavigationInterceptor)
            
                If navigationInterceptor Is Nothing Then
                    Return
                End If
                        
                Dim res As CollectionChangeAction
            
                ' 1.
                ' This call will successfully add a Deny rule for the specified URL pattern.
                res = navigationInterceptor.AddRule("http?://*.somedomain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 2.
                ' This call will be ignored, as it attempts to narrow an already wider rule (1).
                res = navigationInterceptor.AddRule("http?://*admin.somedomain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 3.
                ' This call will replace the first (1) rule.
                res = navigationInterceptor.AddRule("http?://*domain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 4.
                ' This call will successfully add an Allow rule for the specified URL pattern.
                ' Although the pattern narrows the one specified in the third (3) call, this call is not 
                ' ignored as it specifies an Allow (Whitelist) rule.
                res = navigationInterceptor.AddRule("http?://*.somedomain.info/*", NavigationRule.Allow)
                Debug.Print(res.ToString())
            
                ' 5.
                ' This call will replace everything added so far, including the third (3) rule.
                ' Patterns must be unique irrespective of the rule applied. An Allow and Deny rule
                ' cannot be applied to the same pattern. The last rule added, replaces an existing
                ' rule with the same pattern.
                res = navigationInterceptor.AddRule("http?://*domain.info/*", NavigationRule.Allow)
                Debug.Print(res.ToString())
            End Sub
            </code>
            Output:
            <pre>
            Add
            Remove
            Refresh
            Add
            Refresh
            </pre>
            </example>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.AddRule(Awesomium.Core.NavigationFilterRule)">
            <summary>
            Adds a navigation filtering rule for navigations to resources
            that match the specified <see cref="P:Awesomium.Core.NavigationFilterRule.Filter"/>.
            </summary>
            <param name="filterRule">
            A <see cref="T:Awesomium.Core.NavigationFilterRule"/> representing the rule to apply
            to a filtering pattern.
            </param>
            <returns>
            A <see cref="T:System.ComponentModel.CollectionChangeAction"/> value indicating
            if the rule was added, replaced existing rules or ignored.
            <p/>
            The following table explains the possible return values:
            <list type="table">
            <listheader>
            <term>
            Return Value
            </term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:System.ComponentModel.CollectionChangeAction.Add"/>
            </term>
            <description>
            The rule was successfully added.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/>
            </term>
            <description>
            The rule was added, replacing older narrowing rules.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/>
            </term>
            <description>
            The rule was ignored. A widening rule already exists.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            This method can simply add a rule, replace older rules or be ignored.
            For a demonstration, see the <b>Examples</b> section.
            <p/>
            Depending on the <see cref="P:Awesomium.Core.NavigationFilterRule.Filter"/> specified in <paramref name="filterRule"/>,
            added rules can be accessed through the <see cref="P:Awesomium.Core.INavigationInterceptor.Whitelist"/> and <see cref="P:Awesomium.Core.INavigationInterceptor.Blacklist"/>
            properties.
            </remarks>
            <example>
            This example demonstrates adding navigation rules to a <see cref="T:Awesomium.Core.INavigationInterceptor"/>.
            <code lang="C#">
            private void webView_NativeViewInitialized( object sender, WebViewEventArgs e )
            {
                INavigationInterceptor navigationInterceptor = webView.GetService( typeof( INavigationInterceptor ) ) as INavigationInterceptor;
                 
                 if ( navigationInterceptor == null )
                     return;
                     
                CollectionChangeAction res;
            
                // 1.
                // This call will successfully add a Deny rule for the specified URL pattern.
                res = navigationInterceptor.AddRule( @"http?://*.somedomain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 2.
                // This call will be ignored, as it attempts to narrow an already wider rule (1).
                res = navigationInterceptor.AddRule( @"http?://*admin.somedomain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 3.
                // This call will replace the first (1) rule.
                res = navigationInterceptor.AddRule( @"http?://*domain.info/*", NavigationRule.Deny );
                Debug.Print( res.ToString() );
            
                // 4.
                // This call will successfully add an Allow rule for the specified URL pattern.
                // Although the pattern narrows the one specified in the third (3) call, this call is not 
                // ignored as it specifies an Allow (Whitelist) rule.
                res = navigationInterceptor.AddRule( @"http?://*.somedomain.info/*", NavigationRule.Allow );
                Debug.Print( res.ToString() );
            
                // 5.
                // This call will replace everything added so far, including the third (3) rule.
                // Patterns must be unique irrespective of the rule applied. An Allow and Deny rule
                // cannot be applied to the same pattern. The last rule added, replaces an existing
                // rule with the same pattern.
                res = navigationInterceptor.AddRule( @"http?://*domain.info/*", NavigationRule.Allow );
                Debug.Print( res.ToString() );
            }
            </code>
            <code lang="VB.NET">
            Private Sub webView_NativeViewInitialized(sender As Object, e As WebViewEventArgs)
                Dim navigationInterceptor As INavigationInterceptor = TryCast(webView.GetService(GetType(INavigationInterceptor)), INavigationInterceptor)
            
                If navigationInterceptor Is Nothing Then
                    Return
                End If
                        
                Dim res As CollectionChangeAction
            
                ' 1.
                ' This call will successfully add a Deny rule for the specified URL pattern.
                res = navigationInterceptor.AddRule("http?://*.somedomain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 2.
                ' This call will be ignored, as it attempts to narrow an already wider rule (1).
                res = navigationInterceptor.AddRule("http?://*admin.somedomain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 3.
                ' This call will replace the first (1) rule.
                res = navigationInterceptor.AddRule("http?://*domain.info/*", NavigationRule.Deny)
                Debug.Print(res.ToString())
            
                ' 4.
                ' This call will successfully add an Allow rule for the specified URL pattern.
                ' Although the pattern narrows the one specified in the third (3) call, this call is not 
                ' ignored as it specifies an Allow (Whitelist) rule.
                res = navigationInterceptor.AddRule("http?://*.somedomain.info/*", NavigationRule.Allow)
                Debug.Print(res.ToString())
            
                ' 5.
                ' This call will replace everything added so far, including the third (3) rule.
                ' Patterns must be unique irrespective of the rule applied. An Allow and Deny rule
                ' cannot be applied to the same pattern. The last rule added, replaces an existing
                ' rule with the same pattern.
                res = navigationInterceptor.AddRule("http?://*domain.info/*", NavigationRule.Allow)
                Debug.Print(res.ToString())
            End Sub
            </code>
            Output:
            <pre>
            Add
            Remove
            Refresh
            Add
            Refresh
            </pre>
            </example>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.AddRules(Awesomium.Core.NavigationFilterRule[])">
            <summary>
            Adds one or more navigation filtering rules.
            </summary>
            <param name="rules">
            A list of navigation filtering rules.
            </param>
            <returns>
            The number of rules that were successfully added.
            </returns>
            <remarks>
            Widening rules will be preserved and replace existing rules while 
            narrowing rules may be ignored. For details, see <see cref="M:Awesomium.Core.INavigationInterceptor.AddRule(System.String,Awesomium.Core.NavigationRule)"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.RemoveRules(System.String)">
            <summary>
            Remove any of the currently applied filtering rules, that
            match a given filter pattern.
            </summary>
            <param name="pattern">
            A navigation filter pattern. Can contain wildcards.
            </param>
            <returns>
            The number of rules that were removed.
            </returns>
            <remarks>
            <note>
            All filtering rules that match the given <paramref name="pattern"/>
            will be removed, irrespective of the navigation rule (<see cref="F:Awesomium.Core.NavigationRule.Allow"/>
            or <see cref="F:Awesomium.Core.NavigationRule.Deny"/>) applied to them.
            </note>
            </remarks>
            <example>
            This example demonstrates removing matching navigation rules from
            a <see cref="T:Awesomium.Core.INavigationInterceptor"/>.
            <code lang="C#">
            // 1.
            navigationInterceptor.AddRule( @"http?://*.somedomain.info/*", NavigationRule.Deny );
            // 2.
            navigationInterceptor.AddRule( @"http?://*.somedomain.com/*", NavigationRule.Deny );
            // 3.
            navigationInterceptor.AddRule( @"http?://*admin.somedomain.info/*", NavigationRule.Allow );
            // 4.
            navigationInterceptor.AddRule( @"http?://*admin.somedomain.com/*", NavigationRule.Allow );
            // 5.
            // Rules 2 and 4 will be removed.
            int res = navigationInterceptor.RemoveRules( @"http?://*domain.com/*" );
            Console.WriteLine( res.ToString() );
            </code>
            Output:
            <pre>
            2
            </pre>
            </example>
            <seealso cref="M:Awesomium.Core.INavigationInterceptor.AddRule(System.String,Awesomium.Core.NavigationRule)"/>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.RemoveRules(System.String,Awesomium.Core.NavigationRule)">
            <summary>
            Remove any of the currently applied filtering rules, that
            match a given filter pattern and navigation rule.
            </summary>
            <param name="pattern">
            A navigation filter pattern. Can contain wildcards.
            </param>
            <param name="rule">
            Only remove matching rules that have this navigation rule applied.
            </param>
            <returns>
            The number of rules that were removed.
            </returns>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.Contains(System.String)">
            <summary>
            Gets if a specified filter pattern, matches any of the filtering
            rules currently applied.
            </summary>
            <param name="pattern">
            A navigation filter patterns. Can contain wildcards.
            </param>
            <returns>
            <c>true</c>, if there are rules applied for the specified <paramref name="pattern"/>;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.Clear">
            <summary>
            Clears all filtering rules applied.
            </summary>
        </member>
        <member name="M:Awesomium.Core.INavigationInterceptor.GetRule(System.String)">
            <summary>
            Gets the navigation filtering rule for the specified <paramref name="url"/> string.
            </summary>
            <param name="url">
            The resource name or URL address to be matched against the rules specified.
            </param>
            <returns>
            The returned value depends on the <see cref="P:Awesomium.Core.INavigationInterceptor.ImplicitRule"/> setting:
            <list type="table">
            <listheader>
            <term>
            <see cref="P:Awesomium.Core.INavigationInterceptor.ImplicitRule"/> Setting
            </term>
            <description>
            Return Value
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.NavigationRule.Allow"/>
            </term>
            <description>
            <see cref="F:Awesomium.Core.NavigationRule.Allow"/> if the <paramref name="url"/> matches a 
            navigation filter that has been applied the <see cref="F:Awesomium.Core.NavigationRule.Allow"/> rule, 
            or if the <paramref name="url"/> does not match a filter that has been explicitly 
            applied the <see cref="F:Awesomium.Core.NavigationRule.Deny"/> rule, or if the <paramref name="url"/> 
            pattern does not match any navigation filtering rule; <see cref="F:Awesomium.Core.NavigationRule.Deny"/> 
            otherwise.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.NavigationRule.Deny"/>
            </term>
            <description>
            <see cref="F:Awesomium.Core.NavigationRule.Deny"/> if the <paramref name="url"/> matches a 
            navigation filter that has been applied the <see cref="F:Awesomium.Core.NavigationRule.Deny"/> rule, 
            or if the <paramref name="url"/> does not match a filter that has been explicitly 
            applied the <see cref="F:Awesomium.Core.NavigationRule.Allow"/> rule, or if the <paramref name="url"/> 
            pattern does not match any navigation filtering rule; <see cref="F:Awesomium.Core.NavigationRule.Allow"/> 
            otherwise.
            </description>
            </item>
            </list>
            </returns>
            <seealso cref="P:Awesomium.Core.INavigationInterceptor.ImplicitRule"/>
        </member>
        <member name="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame">
            <summary>
            Occurs when a frame is about to begin loading in the view. This event allows you
            to cancel loading the frame, potentially preventing navigations as well.
            </summary>
            <remarks>
            <note>
            When a page is loaded, the main frame is usually the first to start being loaded.
            </note>
            If <see cref="P:Awesomium.Core.BeginLoadingFrameEventArgs.IsMainFrame"/> is <c>true</c> during a 
            <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> event, it indicates a new navigation.
            When a <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> with <see cref="P:Awesomium.Core.BeginLoadingFrameEventArgs.IsMainFrame"/>
            set to <c>true</c> is not canceled, an <see cref="E:Awesomium.Core.INavigationInterceptor.BeginNavigation"/> event is fired right after,
            allowing you to cancel the navigation.
            <note type="caution">
            Note that the <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> event is called on the I/O Thread. 
            Therefore, you should not make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.INavigationInterceptor.BeginNavigation">
            <summary>
            Occurs when a view begins navigating to a new URL.
            This event allows you to cancel the navigation.
            </summary>
            <remarks>
            <note type="caution">
            This event is called on the I/O Thread. Therefore, you should not
            make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.INavigationInterceptor.Whitelist">
            <summary>
            Gets a list of navigation filter patterns that have been
            explicitly assigned the <see cref="F:Awesomium.Core.NavigationRule.Allow"/> rule.
            </summary>
        </member>
        <member name="P:Awesomium.Core.INavigationInterceptor.Blacklist">
            <summary>
            Gets a list of navigation filter patterns that have been
            explicitly assigned the <see cref="F:Awesomium.Core.NavigationRule.Deny"/> rule.
            </summary>
        </member>
        <member name="P:Awesomium.Core.INavigationInterceptor.ImplicitRule">
            <summary>
            Gets or sets the rule that will be applied to any navigation
            attempt that does not match a rule explicitly applied through
            <see cref="M:Awesomium.Core.INavigationInterceptor.AddRule(System.String,Awesomium.Core.NavigationRule)"/>. The default is <see cref="F:Awesomium.Core.NavigationRule.Allow"/>.
            </summary>
            <remarks>
            The setting of this property affects the value returned by <see cref="M:Awesomium.Core.INavigationInterceptor.GetRule(System.String)"/>.
            The following table presents the policy applied depending on the setting
            of this property:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.NavigationRule.Allow"/>
            </term>
            <description>
            If a url pattern passed to <see cref="M:Awesomium.Core.INavigationInterceptor.GetRule(System.String)"/> does not match a rule
            explicitly specified through <see cref="M:Awesomium.Core.INavigationInterceptor.AddRule(System.String,Awesomium.Core.NavigationRule)"/>, <see cref="M:Awesomium.Core.INavigationInterceptor.GetRule(System.String)"/>
            will return <see cref="F:Awesomium.Core.NavigationRule.Allow"/>. This is the default behavior
            and it assures that only navigations that match any of the rules in the
            <see cref="P:Awesomium.Core.INavigationInterceptor.Blacklist"/>, will be blocked; everything else will be loaded.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.NavigationRule.Deny"/>
            </term>
            <description>
            If a url pattern passed to <see cref="M:Awesomium.Core.INavigationInterceptor.GetRule(System.String)"/> does not match a rule
            explicitly specified through <see cref="M:Awesomium.Core.INavigationInterceptor.AddRule(System.String,Awesomium.Core.NavigationRule)"/>, <see cref="M:Awesomium.Core.INavigationInterceptor.GetRule(System.String)"/>
            will return <see cref="F:Awesomium.Core.NavigationRule.Deny"/>. This technique enforces the
            <see cref="P:Awesomium.Core.INavigationInterceptor.Whitelist"/>; everything else will be blocked.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="M:Awesomium.Core.INavigationInterceptor.GetRule(System.String)"/>
        </member>
        <member name="T:Awesomium.Core.WindowCloseEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.WindowClose"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.WindowCloseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WindowCloseEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.WindowClose"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WindowCloseEventArgs.IsCalledFromFrame">
            <summary>
            Gets if the <c>window.close</c> method was called from
            a child frame in the page.
            </summary>
            <remarks>
            Applications can choose to ignore <c>window.close</c>
            calls, unless they originate from the main frame.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.Data.DataSourceRequest">
            <summary>
            Represents a request for a resource provided through a <see cref="T:Awesomium.Core.Data.DataSource"/>.
            </summary>
            <seealso cref="M:Awesomium.Core.Data.DataSource.OnRequest(Awesomium.Core.Data.DataSourceRequest)"/>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.op_Equality(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instances are equivalent.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the left of the equality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are equal; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <note>
            <see cref="P:Awesomium.Core.Data.DataSourceRequest.ProcessId"/> and <see cref="P:Awesomium.Core.Data.DataSourceRequest.ViewId"/> are not being compared. Two requests with the
            same data originating from different views, are considered equivalent.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceRequest.op_Inequality(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceRequest)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instances are not equal.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the left of the inequality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceRequest"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.RequestId">
            <summary>
            The unique identified for the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.Path">
            <summary>
            The path to the request. If the <see cref="T:Awesomium.Core.Data.DataSource"/> was registered with an asset host 
            of <i>myhost</i>, <see cref="P:Awesomium.Core.Data.DataSourceRequest.Path"/> will contain whatever follows the: <c>asset://myhost/</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.MimeType">
            <summary>
            The mime-type of the resource.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.ProcessId">
            <summary>
            Gets the process identifier where this request originated from. This corresponds
            to <see cref="P:Awesomium.Core.IWebView.ProcessId"/>
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.ViewId">
            <summary>
            Gets the unique identifier of the view where this request originated from.
            This corresponds to <see cref="P:Awesomium.Core.IWebView.Identifier"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.Url">
            <summary>
            Gets the URL associated with this request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.Method">
            <summary>
            Gets the HTTP method (usually "GET" or "POST")
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.Referrer">
            <summary>
            Gets the referrer.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.ExtraHeaders">
            <summary>
            Gets the extra headers for the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.Count">
            <summary>
            Gets the number of upload elements (essentially, batches of POST data).
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.Item(System.UInt32)">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;P:Awesomium.Core.IResourceRequest.this&quot;]/*"/>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceRequest.IsWindowOpen">
            <summary>
            Gets if this is the first request sent by a new view that is the
            result of JavaScript <c>window.open</c>.
            </summary><remarks>
            The initial request (<see cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/>) of new views that are the result 
            of JavaScript <c>window.open</c>, is always issued before the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event is fired. 
            <p/>
            By default, Requests that are the result of JavaScript <c>window.open</c> or are <c>POST</c> requests 
            (such as the submission of HTML forms with method <c>POST</c> and target <c>_blank</c>), are not canceled. The user is 
            expected to wrap the new view (see: <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>) when 
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs, without reloading the target URL since navigation to the target URL 
            is already queued on the new view.
            <p/>
            In order to avoid double requests issued to a target URL, any other requests (most possibly links with target 
            <c>_blank</c> or the submission of HTML forms with target <c>_blank</c> and method <c>GET</c> where data is passed through 
            the URL therefore there's no danger of loosing data), <b>are canceled by default</b>, before <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>,
            and the user must then load the target URL manually.
            <p/>
            <c>POST</c> or <c>window.open</c> requests cannot be canceled in advance, as we do not know if the user chooses to wrap 
            the new view (which is the expected behavior). This however can cause implications in certain scenarios (such as in a 
            <i>popup blocker</i> scenario), where users may want to cancel such requests too.
            <p/>
            <see cref="P:Awesomium.Core.IResourceRequest.IsWindowOpen"/> allows you to implement an <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel such requests yourself
            prior to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, if you do not intend to wrap the new view at <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            </remarks><seealso cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>
        </member>
        <member name="T:Awesomium.Core.Data.DataSourceResponse">
            <summary>
            Represents the response to a <see cref="T:Awesomium.Core.Data.DataSourceRequest"/>.
            You should pass this to <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.Empty">
            <summary>
            Represents an empty response.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.Buffer">
            <summary>
            The bytes for the resource (will be copied, you retain ownership).
            </summary>
            <remarks>
            After responding to a request by calling <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)"/>,
            you can safely release this buffer.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.Size">
            <summary>
            The size of the buffer.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.DataSourceResponse.MimeType">
            <summary>
            The mime-type of the loaded resource. If not set,
            <see cref="P:Awesomium.Core.Data.DataSourceRequest.MimeType"/> will be used.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.op_Equality(Awesomium.Core.Data.DataSourceResponse,Awesomium.Core.Data.DataSourceResponse)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instances are equivalent.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the left of the equality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceResponse.op_Inequality(Awesomium.Core.Data.DataSourceResponse,Awesomium.Core.Data.DataSourceResponse)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instances are not equal.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the left of the inequality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Data.DataSourceResponse"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Data.DataSourceResponse.IsEmpty">
            <summary>
            Gets if this response is empty.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.DirectoryDataSource">
            <summary>
            Represents a special <see cref="T:Awesomium.Core.Data.DataSource"/> that loads all resources from a local directory.
            </summary>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> that loads all resources from a directory on disk.
            </summary>
            <param name="directory">
            The path to the directory containing the resources. This can contain environment variables.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="directory"/> is empty or <c>null</c> (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="directory"/> does not exist.
            </exception>
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.#ctor(System.String,System.UInt32)">
            <summary>
            Creates an in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> that loads and caches in-memory,
            resources from a directory on disk.
            </summary>
            <param name="directory">
            The path to the directory containing the resources.
            </param>
            <param name="memorySize">
            Specifies the maximum amount of memory in bytes that can be used to cache resources.
            Specifying <c>0</c>, will create a regular (not <i>in-memory</i>) <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>.
            This is the same as calling <see cref="M:Awesomium.Core.Data.DirectoryDataSource.#ctor(System.String)"/>.
            </param>
            <remarks>
            This constructor can be used to create a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instance that
            will load and cache in memory, resources from a directory on disk.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="directory"/> is empty or <c>null</c> (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="directory"/> does not exist.
            </exception>
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])">
            <summary>
            Preloads resources from the directory and its subdirectories, to memory.
            </summary>
            <param name="ignoreExt">
            Specifies the extensions to ignore when loading resources.
            Files with the specified extension, will be ignored.
            A dot prefix is not required.
            </param>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances.
            <p/>
            <see cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/> will load all the available resources from the
            directory and its subdirectories to memory, ignoring files with the
            specified <paramref name="ignoreExt"/> and until it reaches the specified
            <see cref="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize"/>.
            <p/>
            This operation is performed asynchronously and the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            can still be used while files are being loaded in memory. When pre-loading
            completes, <see cref="E:Awesomium.Core.Data.DirectoryDataSource.PreloadComplete"/> is fired synchronously.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Attempted to call this method on a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            that has not been set to cache resources in memory (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </exception>
        </member>
        <member name="E:Awesomium.Core.Data.DirectoryDataSource.PreloadComplete">
            <summary>
            Occurs when a pre-load operation (see <see cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/>), completes.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.Directory">
            <summary>
            Gets the directory this data source will load resources from.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory">
            <summary>
            Gets if this is an in-memory data source.
            </summary>
            <remarks>
            In-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instances, cache the requested
            files in memory either when they are first requested, or by using
            <see cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/>. In subsequent requests for the same resource,
            the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> loads the resource from memory
            instead of reading from disk. This can significantly improve performance.
            <note>
            An in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> will stop caching resources
            to memory when the specified <see cref="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize"/> has been reached.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize"/>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.FilesInMemory">
            <summary>
            Gets an array of file names currently cached in memory.
            </summary>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.MaximumSize">
            <summary>
            Gets the maximum size of memory in bytes that this <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instance should use to cache resources in memory.
            </summary>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.DirectoryDataSource.CurrentSize">
            <summary>
            Gets the amount of memory in bytes that this <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            currently uses.
            </summary>
            <remarks>
            This is only valid with in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instances (see <see cref="P:Awesomium.Core.Data.DirectoryDataSource.IsInMemory"/>).
            </remarks>
        </member>
        <member name="T:Awesomium.Core.Data.ResourceType">
            <summary>
            Indicates the type of application resources that
            a <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> will look for.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.ResourceType.Embedded">
            <summary>
            Look for embedded resources.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.ResourceType.Packed">
            <summary>
            Look for packed resources (Build Action: Resource).
            </summary>
        </member>
        <member name="F:Awesomium.Core.Data.ResourceType.Both">
            <summary>
            Look for both. We will first look for embedded.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.ResourceDataSource">
            <summary>
            Represents a special <see cref="T:Awesomium.Core.Data.DataSource"/> that loads all resources from application resources.
            </summary>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Awesomium.Core.Data.ResourceDataSource.#ctor(Awesomium.Core.Data.ResourceType,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> class.
            </summary>
            <param name="type">
            The type of application resources that this <see cref="T:Awesomium.Core.Data.ResourceDataSource"/>
            loads.
            </param>
            <param name="assembly">
            A managed assembly containing the resources to be loaded.
            </param>
        </member>
        <member name="M:Awesomium.Core.Data.ResourceDataSource.#ctor(Awesomium.Core.Data.ResourceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> class.
            </summary>
            <param name="type">
            The type of application resources that this <see cref="T:Awesomium.Core.Data.ResourceDataSource"/>
            loads. Resources will be loaded from the executing assembly.
            </param>
        </member>
        <member name="M:Awesomium.Core.Data.ResourceDataSource.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Data.ResourceDataSource.LoadResourceAsync(Awesomium.Core.Data.DataSourceRequest)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.Data.ResourceDataSource.Type">
            <summary>
            Gets the type of application resources that this
            <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> looks for.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.ResourceDataSource.Assembly">
            <summary>
            Gets the assembly that contains the resources.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Data.DataSourceCollection">
            <summary>
            Represents a collection of <see cref="T:Awesomium.Core.Data.DataSource"/> instances
            maintained by a <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Data.DataSourceCollection.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.GetExpressions(System.Dynamic.DynamicMetaObject[])">
            <summary> 
            Returns the list of expressions represented by the <see cref="T:System.Dynamic.DynamicMetaObject"/> instances.
            </summary> 
            <param name="objects">An array of <see cref="T:System.Dynamic.DynamicMetaObject"/> instances to extract expressions from.</param> 
            <returns>The array of expressions.</returns>
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.GetTypeRestriction(System.Dynamic.DynamicMetaObject)">
            <summary>
            The method takes a DynamicMetaObject, and returns an instance restriction for testing null if the object 
            holds a null value, otherwise returns a type restriction.
            </summary> 
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Awesomium.Core.Dynamic.MetaDynamic.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a 
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Awesomium.Core.Dynamic.MetaDynamic.Fallback,Awesomium.Core.Dynamic.MetaDynamic.Fallback)">
            <summary> 
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result 
            </summary>
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Awesomium.Core.Dynamic.MetaDynamic.Fallback)">
            <summary> 
            Helper method for generating a MetaObject which calls a 
            specific method on Dynamic, but uses one of the arguments for
            the result. 
            </summary>
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Awesomium.Core.Dynamic.MetaDynamic.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a 
            specific method on Dynamic, but uses one of the arguments for 
            the result.
            </summary> 
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.GetRestrictions">
            <summary> 
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Dynamic.MetaDynamic.GetLimitedSelf">
            <summary>
            Returns our Expression converted to IDynamicObject.
            </summary>
        </member>
        <member name="T:Awesomium.Core.DownloadCollection">
            <summary>
            A collection of <see cref="T:Awesomium.Core.DownloadItem"/> instances representing
            download operations maintained by a <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <seealso cref="T:Awesomium.Core.DownloadItem"/>
        </member>
        <member name="M:Awesomium.Core.DownloadCollection.Remove(Awesomium.Core.DownloadItem)">
            <summary>
            Removes the specified inactive <see cref="T:Awesomium.Core.DownloadItem"/> from the collection.
            </summary>
            <param name="item">
            A complete or canceled <see cref="T:Awesomium.Core.DownloadItem"/> to be removed from the collection.
            </param>
            <remarks>
            This method can only be called when the download operation passed through <paramref name="item"/>,
            is either complete of canceled.
            <p/>
            This method call is silently ignored if the specified <paramref name="item"/> does not
            exist in the collection.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="item"/> represents an active download operation.
            Only complete or canceled download operations can be removed.
            </exception>
        </member>
        <member name="M:Awesomium.Core.DownloadCollection.ClearNonActive">
            <summary>
            Removes all download operations that are complete or canceled.
            </summary>
        </member>
        <member name="T:Awesomium.Core.DownloadItem">
            <summary>
            Represents a download operation maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.DownloadItem"/> is a <see cref="T:Awesomium.Core.ViewModel"/> instance (therefore
            it implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>). This makes it ideal
            for use directly as a view model in an MVVM application.
            <p/>
            An instance of <see cref="T:Awesomium.Core.DownloadItem"/> is first created when the
            <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event is fired, to indicate
            that the download operation is about to start. The <see cref="T:Awesomium.Core.DownloadItem"/>
            instance is added to the <see cref="P:Awesomium.Core.WebCore.Downloads"/> collection immediately 
            after <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/>.
            <p/>
            Developers can access the <see cref="T:Awesomium.Core.DownloadItem"/> instance either through the
            <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event (see <see cref="P:Awesomium.Core.DownloadBeginEventArgs.Info"/>),
            or through the <see cref="P:Awesomium.Core.WebCore.Downloads"/> collection (<see cref="T:Awesomium.Core.DownloadCollection"/>
            implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>). For more details,
            read the following article: 
            <a href="http://wiki.awesomium.net/general-use/handling-downloads.html">Handling Downloads</a>.
            <h4>Repeating a Download Operation</h4>
            Two <see cref="T:Awesomium.Core.DownloadItem"/> instances are considered equal when the originating <see cref="P:Awesomium.Core.DownloadItem.Url"/>, 
            <see cref="P:Awesomium.Core.DownloadItem.MimeType"/> and destination path (see <see cref="P:Awesomium.Core.DownloadItem.SavePath"/>), are equal.
            This means that if you attempt to download the same file, from the same URL and save it to the same destination,
            <b>Awesomium.NET</b> will restart the old download operation instead of creating a new one. In this scenario
            there will be no change to the <see cref="P:Awesomium.Core.WebCore.Downloads"/> collection after the 
            <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event if fired. What's more, <see cref="P:Awesomium.Core.DownloadBeginEventArgs.Info"/>
            will return the existing <see cref="T:Awesomium.Core.DownloadItem"/> representing the previous download operation,
            with the values of all its members intact: For example, <see cref="P:Awesomium.Core.DownloadItem.IsComplete"/> may
            be <c>true</c> and <see cref="P:Awesomium.Core.DownloadItem.ReceivedBytes"/> will reflect the number of bytes received
            during the previous operation. These values will only be reset after the <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event.
            <p/>
            This behavior is useful for the following reasons:
            <list type="bullet">
            <item>
            <description>
            If you are using the <see cref="P:Awesomium.Core.WebCore.Downloads"/> collection as a data source in an
            MVVM application, you wouldn't want a new <see cref="T:Awesomium.Core.DownloadItem"/> item be created for
            a download operation that is actually being repeated.
            </description>
            </item>
            <item>
            <description>
            The new (repeated) download operation, can still be canceled at <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/>
            by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>. Letting the members of the reused
            <see cref="T:Awesomium.Core.DownloadItem"/> instance intact during <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/>, allows users to
            cancel the operation without affecting the appearance and behavior of the visual element
            bound to the reused <see cref="T:Awesomium.Core.DownloadItem"/> instance.
            <p/>
            When the download operation starts (immediately after <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/>),
            the members of the reused <see cref="T:Awesomium.Core.DownloadItem"/> instance will be reset allowing any bound
            visual element reflect that a previous download operation, is being repeated.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.OnProgressChanged(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.DownloadItem.ProgressChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.OnCanceling(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.DownloadItem.Canceling"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.OnCompleted(System.Object,System.EventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.DownloadItem.Completed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.OnCanceled(System.Object,System.EventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.DownloadItem.Canceled"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.Cancel">
            <summary>
            Cancels this download operation.
            </summary>
            <seealso cref="M:Awesomium.Core.DownloadItem.CanCancel"/>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.CanCancel">
            <summary>
            Determines if the download operation can be canceled.
            </summary>
            <returns>
            <c>true</c> if the operation is active and can be canceled;
            <c>false</c> otherwise.
            </returns>
            <seealso cref="P:Awesomium.Core.DownloadItem.IsActive"/>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.Remove">
            <summary>
            Removes a complete or canceled operation from <see cref="P:Awesomium.Core.WebCore.Downloads"/>.
            </summary>
            <remarks>
            This method can only be called when this download operation
            is either complete of canceled.
            <p/>
            This method call is silently ignored if this download operation does
            not exist in the <see cref="P:Awesomium.Core.WebCore.Downloads"/> collection.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The download operation represents an active download operation.
            Only complete or canceled download operations can be removed.
            </exception>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.CanRemove">
            <summary>
            Determines if the download operation can be removed from
            <see cref="P:Awesomium.Core.WebCore.Downloads"/>.
            </summary>
            <returns>
            <c>true</c> if the operation is either complete or canceled
            and can be removed from <see cref="P:Awesomium.Core.WebCore.Downloads"/>;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.OpenDownloadedFile">
            <summary>
            Attempts to open the downloaded file, launching the application
            that is associated with the file's type.
            </summary>
            <remarks>
            This works only if the operation is complete (see: <see cref="P:Awesomium.Core.DownloadItem.IsComplete"/>); 
            otherwise it fails silently.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.OpenDownloadedFileFolder">
            <summary>
            Attempts to open the folder containing the downloaded file.
            </summary>
            <remarks>
            This works only if the operation is complete (see: <see cref="P:Awesomium.Core.DownloadItem.IsComplete"/>); 
            otherwise it fails silently.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.CanOpenDownloadedFile">
            <summary>
            Determines if the downloaded file can be opened.
            </summary>
            <returns>
            <c>true</c> if the operation is complete and the file exists on disk;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.CanOpenDownloadedFileFolder">
            <summary>
            Determines if the folder containing the downloaded file can be opened.
            </summary>
            <returns>
            <c>true</c> if the operation is complete and the file exists on disk;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.DownloadItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.DownloadItem.op_Equality(Awesomium.Core.DownloadItem,Awesomium.Core.DownloadItem)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.DownloadItem"/> instances are equivalent.
            </summary>
            <param name="d1">
            The <see cref="T:Awesomium.Core.DownloadItem"/> instance that is to the left of the equality operator.
            </param>
            <param name="d2">
            The <see cref="T:Awesomium.Core.DownloadItem"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="d1"/> and <paramref name="d2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.DownloadItem.op_Inequality(Awesomium.Core.DownloadItem,Awesomium.Core.DownloadItem)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.DownloadItem"/> instances are not equal.
            </summary>
            <param name="d1">
            The <see cref="T:Awesomium.Core.DownloadItem"/> instance that is to the left of the inequality operator.
            </param>
            <param name="d2">
            The <see cref="T:Awesomium.Core.DownloadItem"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="d1"/> and <paramref name="d2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Awesomium.Core.DownloadItem.ProgressChanged">
            <summary>
            Occurs when the status of this download operation has
            changed.
            </summary>
            <remarks>
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            allows you to cancel the operation.
            </remarks>
            <seealso cref="P:Awesomium.Core.DownloadItem.Progress"/>
            <seealso cref="P:Awesomium.Core.DownloadItem.ReceivedBytes"/>
            <seealso cref="P:Awesomium.Core.DownloadItem.CurrentSpeed"/>
            <seealso cref="M:Awesomium.Core.DownloadItem.Cancel"/>
        </member>
        <member name="E:Awesomium.Core.DownloadItem.Canceling">
            <summary>
            Occurs when this download operation is about to be
            canceled, as a result of calling <see cref="M:Awesomium.Core.DownloadItem.Cancel"/>.
            </summary>
            <remarks>
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            allows you to abort the cancellation and resume downloading.
            </remarks>
            <seealso cref="M:Awesomium.Core.DownloadItem.Cancel"/>
        </member>
        <member name="E:Awesomium.Core.DownloadItem.Completed">
            <summary>
            Occurs when this download operation is complete.
            </summary>
            <seealso cref="P:Awesomium.Core.DownloadItem.IsComplete"/>
            <seealso cref="P:Awesomium.Core.DownloadItem.IsActive"/>
        </member>
        <member name="E:Awesomium.Core.DownloadItem.Canceled">
            <summary>
            Occurs when this download operation is canceled.
            </summary>
            <seealso cref="P:Awesomium.Core.DownloadItem.IsCanceled"/>
            <seealso cref="P:Awesomium.Core.DownloadItem.IsActive"/>
            <seealso cref="M:Awesomium.Core.DownloadItem.Cancel"/>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.IsActive">
            <summary>
            Gets if the download operation represented by this class, is currently active.
            </summary>
            <returns>
            <c>true</c> if the download operation represented by this class, is currently active;
            <c>false</c> otherwise. This is also <c>false</c> if the operation has not started yet.
            </returns>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.IsComplete">
            <summary>
            Gets if the download operation represented by this class, has completed.
            </summary>
            <returns>
            <c>true</c> if the download operation represented by this class, has completed;
            <c>false</c> otherwise. This is also <c>false</c> if the operation has not started yet,
            or it was previously canceled (see <see cref="P:Awesomium.Core.DownloadItem.IsCanceled"/>).
            </returns>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.IsCanceled">
            <summary>
            Gets if the download operation represented by this class, has been canceled.
            </summary>
            <returns>
            <c>true</c> if the download operation represented by this class, has been canceled;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.Url">
            <summary>
            Gets the URL that initiated the download.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.MimeType">
            <summary>
            Gets the mime type of the file downloaded.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.FileName">
            <summary>
            Gets the name of the downloaded file.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.SavePath">
            <summary>
            Gets the full path to the downloaded file.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.TotalBytes">
            <summary>
            Gets the total number of bytes (may be <c>0</c> if unknown).
            </summary>
            <returns>
            The total number of bytes of the downloaded file,
            or <c>0</c> if the size is unknown or the download
            operation has not started yet.
            </returns>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.ReceivedBytes">
            <summary>
            Gets the number of bytes received so far.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.Progress">
            <summary>
            Gets the operation's progress percentage.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.CurrentSpeed">
            <summary>
            Gets the current downloading speed, or <c>0</c> if 
            the operation is canceled or complete.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.OriginViewId">
            <summary>
            Gets the unique identifier of the view that initiated the download operation.
            This corresponds to <see cref="P:Awesomium.Core.IWebView.Identifier"/>.
            </summary>
            <remarks>
            This property is only valid when a download operation is active (see <see cref="P:Awesomium.Core.DownloadItem.IsActive"/>).
            It will be <c>0</c> when the operation is complete or canceled.
            <note>
            The <see cref="T:Awesomium.Core.IWebView"/> instance that triggered the download operation,
            may be disposed before the download completes. Downloads are maintained by
            a <see cref="T:Awesomium.Core.WebSession"/> (see: <see cref="P:Awesomium.Core.DownloadItem.WebSession"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.DownloadItem.WebSession">
            <summary>
            Gets the <see cref="T:Awesomium.Core.WebSession"/> instance that controls this
            download operation.
            </summary>
            <remarks>
            This property is only valid when a download operation is active (see <see cref="P:Awesomium.Core.DownloadItem.IsActive"/>).
            It will be <c>null</c> (<c>Nothing</c> in Visual Basic), when the operation is complete
            or canceled.
            <note>
            Due to being responsible for maintaining authentication contexts, <see cref="T:Awesomium.Core.WebSession"/> instances
            are also responsible for controlling download operations that are then maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.EditFlags">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebContextMenuInfo"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebSessionCollection">
            <summary>
            Represents a collection of sessions maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebSessionCollection.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebSessionCollection.Contains(System.String)">
            <summary>
            Gets if a <see cref="T:Awesomium.Core.WebSession"/> that synchronizes data to the specified <paramref name="dataPath"/>,
            currently exists in the collection.
            </summary>
            <param name="dataPath">
            The path to the directory that the <see cref="T:Awesomium.Core.WebSession"/> to seek for, stores data.
            </param>
            <returns>
            <c>true</c> if a <see cref="T:Awesomium.Core.WebSession"/> that synchronizes data to the specified <paramref name="dataPath"/>,
            currently exists in the collection; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebSessionCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebSession"/> that synchronizes data to the specified <paramref name="dataPath"/>.
            </summary>
            <param name="dataPath">
            The path to the directory that the <see cref="T:Awesomium.Core.WebSession"/> to seek for, stores data.
            </param>
            <remarks>
            
            </remarks>
            <returns>
            Gets the <see cref="T:Awesomium.Core.WebSession"/> that synchronizes data to the specified <paramref name="dataPath"/>,
            or <c>null</c> (<c>Nothing</c> in Visual Basic), is no <see cref="T:Awesomium.Core.WebSession"/> that synchronizes 
            data to the specified <paramref name="dataPath"/>, has been created.
            </returns>
        </member>
        <member name="T:Awesomium.Core.Data.RequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.Data.DataSource.Request"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.Data.RequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.Data.RequestEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.Data.DataSource.Request"/> event.
            </summary>
            <remarks>
            Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> to cancel
            the request.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Data.RequestEventArgs.Request">
            <summary>
            Provides details about the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Data.RequestEventArgs.Handled">
            <summary>
            Gets or sets if the request is handled by an application.
            </summary>
        </member>
        <member name="T:Awesomium.Core.NetError">
            <summary>
            This enumeration contains a list of network errors.
            </summary>
            <remarks>
            Ranges:
            <list type="table">
            <listheader>
            <term>
            Range
            </term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>
            0-99
            </term>
            <description>
            System related errors.
            </description>
            </item>
            <item>
            <term>
            100-199
            </term>
            <description>
            Connection related errors.
            </description>
            </item>
            <item>
            <term>
            200-299
            </term>
            <description>
            Certificate errors.
            </description>
            </item>
            <item>
            <term>
            300-399
            </term>
            <description>
            HTTP errors.
            </description>
            </item>
            <item>
            <term>
            400-499
            </term>
            <description>
            Cache errors.
            </description>
            </item>
            <item>
            <term>
            500-599
            </term>
            <description>
            N/A
            </description>
            </item>
            <item>
            <term>
            600-699
            </term>
            <description>
            FTP errors.
            </description>
            </item>
            <item>
            <term>
            700-799
            </term>
            <description>
            Certificate manager errors.
            </description>
            </item>
            <item>
            <term>
            800-899
            </term>
            <description>
            DNS resolver errors.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.IO_PENDING">
            <summary>
            An asynchronous IO operation is not yet complete.  This usually does not
            indicate a fatal error.  Typically this error will be generated as a
            notification to wait for some external notification that the IO operation
            finally completed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FAILED">
            <summary>
            A generic failure occurred.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ABORTED">
            <summary>
            An operation was aborted (due to user action).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INVALID_ARGUMENT">
            <summary>
            An argument to the function is incorrect.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INVALID_HANDLE">
            <summary>
            The handle or file descriptor is invalid.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FILE_NOT_FOUND">
            <summary>
            The file or directory cannot be found.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.TIMED_OUT">
            <summary>
            An operation timed out.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FILE_TOO_BIG">
            <summary>
            The file is too large.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNEXPECTED">
            <summary>
            An unexpected error.  This may be caused by a programming mistake or an
            invalid assumption.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ACCESS_DENIED">
            <summary>
            Permission to access a resource, other than the network, was denied.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NOT_IMPLEMENTED">
            <summary>
            The operation failed because of unimplemented functionality.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INSUFFICIENT_RESOURCES">
            <summary>
            There were not enough resources to complete the operation.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.OUT_OF_MEMORY">
            <summary>
            Memory allocation failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UPLOAD_FILE_CHANGED">
            <summary>
            The file upload failed because the file's modification time was different
            from the expectation.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SOCKET_NOT_CONNECTED">
            <summary>
            The socket is not connected.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FILE_EXISTS">
            <summary>
            The file already exists.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FILE_PATH_TOO_LONG">
            <summary>
            The path or file name is too long.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FILE_NO_SPACE">
            <summary>
            Not enough room left on the disk.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FILE_VIRUS_INFECTED">
            <summary>
            The file has a virus.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.BLOCKED_BY_CLIENT">
            <summary>
            The client chose to block the request.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONNECTION_CLOSED">
            <summary>
            A connection was closed (corresponding to a TCP FIN).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONNECTION_RESET">
            <summary>
            A connection was reset (corresponding to a TCP RST).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONNECTION_REFUSED">
            <summary>
            A connection attempt was refused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONNECTION_ABORTED">
            <summary>
            This can include a FIN packet that did not get ACK'd.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONNECTION_FAILED">
            <summary>
            A connection attempt failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NAME_NOT_RESOLVED">
            <summary>
            The host name could not be resolved.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INTERNET_DISCONNECTED">
            <summary>
            The Internet connection has been lost.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_PROTOCOL_ERROR">
            <summary>
            An SSL protocol error occurred.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ADDRESS_INVALID">
            <summary>
            The IP address or port number is invalid (e.g., cannot connect to the IP
            address 0 or the port 0).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ADDRESS_UNREACHABLE">
            <summary>
            The IP address is unreachable.  This usually means that there is no route to
            the specified host or network.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_CLIENT_AUTH_CERT_NEEDED">
            <summary>
            The server requested a client certificate for SSL client authentication.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.TUNNEL_CONNECTION_FAILED">
            <summary>
            A tunnel connection through the proxy could not be established.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NO_SSL_VERSIONS_ENABLED">
            <summary>
            No SSL protocol versions are enabled.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_VERSION_OR_CIPHER_MISMATCH">
            <summary>
            cipher suite.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_RENEGOTIATION_REQUESTED">
            <summary>
            The server requested a renegotiation (rehandshake).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PROXY_AUTH_UNSUPPORTED">
            <summary>
            The proxy requested authentication (for tunnel establishment) with an
            unsupported method.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_ERROR_IN_SSL_RENEGOTIATION">
            <summary>
            During SSL renegotiation (rehandshake), the server sent a certificate with
            an error.
            <note>
            This error is not in the -2xx range so that it won't be handled as a
            certificate error.
            </note>
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.BAD_SSL_CLIENT_AUTH_CERT">
            <summary>
            The SSL handshake failed because of a bad or missing client certificate.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONNECTION_TIMED_OUT">
            <summary>
            A connection attempt timed out.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.HOST_RESOLVER_QUEUE_TOO_LARGE">
            <summary>
            There are too many pending DNS resolves, so a request in the queue was
            aborted.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SOCKS_CONNECTION_FAILED">
            <summary>
            Failed establishing a connection to the SOCKS proxy server for a target host.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SOCKS_CONNECTION_HOST_UNREACHABLE">
            <summary>
            The SOCKS proxy server failed establishing connection to the target host
            because that host is unreachable.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NPN_NEGOTIATION_FAILED">
            <summary>
            The request to negotiate an alternate protocol failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_NO_RENEGOTIATION">
            <summary>
            The peer sent an SSL no_renegotiation alert message.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.WINSOCK_UNEXPECTED_WRITTEN_BYTES">
            <summary>
            Winsock sometimes reports more data written than passed.  This is probably
            due to a broken LSP.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_DECOMPRESSION_FAILURE_ALERT">
            <summary>
            An SSL peer sent us a fatal decompression_failure alert. This typically
            occurs when a peer selects DEFLATE compression in the mistaken belief that
            it supports it.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_BAD_RECORD_MAC_ALERT">
            <summary>
            An SSL peer sent us a fatal bad_record_mac alert. This has been observed
            from servers with buggy DEFLATE support.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PROXY_AUTH_REQUESTED">
            <summary>
            The proxy requested authentication (for tunnel establishment).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_UNSAFE_NEGOTIATION">
            <summary>
            A known TLS strict server didn't offer the renegotiation extension.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_WEAK_SERVER_EPHEMERAL_DH_KEY">
            <summary>
            The SSL server attempted to use a weak ephemeral Diffie-Hellman key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PROXY_CONNECTION_FAILED">
            <summary>
            Could not create a connection to the proxy server. An error occurred
            either in resolving its name, or in connecting a socket to it.
            Note that this does NOT include failures during the actual "CONNECT" method
            of an HTTP proxy.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.MANDATORY_PROXY_CONFIGURATION_FAILED">
            <summary>
            A mandatory proxy configuration could not be used. Currently this means
            that a mandatory PAC script could not be fetched, parsed or executed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PRECONNECT_MAX_SOCKET_LIMIT">
            <summary>
            We've hit the max socket limit for the socket pool while pre-connecting. We
            don't bother trying to pre-connect more sockets.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED">
            <summary>
            The permission to use the SSL client certificate's private key was denied.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY">
            <summary>
            The SSL client certificate has no private key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PROXY_CERTIFICATE_INVALID">
            <summary>
            The certificate presented by the HTTPS Proxy was invalid.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NAME_RESOLUTION_FAILED">
            <summary>
            An error occurred when trying to do a name resolution (DNS).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NETWORK_ACCESS_DENIED">
            <summary>
            Permission to access the network was denied. This is used to distinguish
            errors that were most likely caused by a firewall from other access denied
            errors. See also <c>ERR_ACCESS_DENIED</c>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.TEMPORARILY_THROTTLED">
            <summary>
            The request throttler module canceled this request to avoid DDOS.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.HTTPS_PROXY_TUNNEL_RESPONSE">
            <summary>
            A request to create an SSL tunnel connection through the HTTPS proxy
            received a non-200 (OK) and non-407 (Proxy Auth) response.  The response
            body might include a description of why the request failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_CLIENT_AUTH_SIGNATURE_FAILED">
            <summary>
            We were unable to sign the CertificateVerify data of an SSL client auth
            handshake with the client certificate's private key.
            </summary>
            <remarks>
            Possible causes for this include the user implicitly or explicitly
            denying access to the private key, the private key may not be valid for
            signing, the key may be relying on a cached handle which is no longer
            valid, or the CSP won't allow arbitrary data to be signed.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.MSG_TOO_BIG">
            <summary>
            The message was too large for the transport. (for example a UDP message
            which exceeds size threshold).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SPDY_SESSION_ALREADY_EXISTS">
            <summary>
            A SPDY session already exists, and should be used instead of this connection.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PROTOCOL_SWITCHED">
            <summary>
            Connection was aborted for switching to another protocol.
            WebSocket abort SocketStream connection when alternate protocol is found.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ADDRESS_IN_USE">
            <summary>
            Returned when attempting to bind an address that is already in use.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_HANDSHAKE_NOT_COMPLETED">
            <summary>
            An operation failed because the SSL handshake has not completed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_BAD_PEER_PUBLIC_KEY">
            <summary>
            SSL peer's public key is invalid.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SSL_PINNED_KEY_NOT_IN_CERT_CHAIN">
            <summary>
            The certificate didn't match the built-in public key pins for the host name.
            The pins are set in net/base/transport_security_state.cc and require that
            one of a set of public keys exist on the path from the leaf to the root.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CLIENT_AUTH_CERT_TYPE_UNSUPPORTED">
            <summary>
            Server request for client certificate did not contain any types we support.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ORIGIN_BOUND_CERT_GENERATION_TYPE_MISMATCH">
            <summary>
            Server requested one type of cert, then requested a different type while the
            first was still being generated.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_COMMON_NAME_INVALID">
            <summary>
            The server responded with a certificate whose common name did not match
            the host name.
            </summary>
            <remarks>
            This could mean any of the following:
            <list type="bullet">
            <item>
            <description>
            An attacker has redirected our traffic to his server and is
            presenting a certificate for which he knows the private key.
            </description>
            </item>
            <item>
            <description>
            The server is misconfigured and responding with the wrong cert.
            </description>
            </item>
            <item>
            <description>
            The user is on a wireless network and is being redirected to the
            network's login page.
            </description>
            </item>
            <item>
            <description>
            The OS has used a DNS search suffix and the server doesn't have
            a certificate for the abbreviated name in the address bar.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_DATE_INVALID">
            <summary>
            The server responded with a certificate that, by our clock, appears to
            either not yet be valid or to have expired.
            </summary>
            <remarks>
            This could mean any of the following:
            <list type="bullet">
            <item>
            <description>
            An attacker is presenting an old certificate for which he has
            managed to obtain the private key.
            </description>
            </item>
            <item>
            <description>
            The server is misconfigured and is not presenting a valid cert.
            </description>
            </item>
            <item>
            <description>
            Our clock is wrong.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_AUTHORITY_INVALID">
            <summary>
            The server responded with a certificate that is signed by an authority
            we don't trust.
            </summary>
            <remarks>
            This could mean any of the following:
            <list type="bullet">
            <item>
            <description>
            An attacker has substituted the real certificate for a cert that
            contains his public key and is signed by his cousin.
            </description>
            </item>
            <item>
            <description>
            The server operator has a legitimate certificate from a CA we don't
            know about, but should trust.
            </description>
            </item>
            <item>
            <description>
            The server is presenting a self-signed certificate, providing no
            defense against active attackers (but foiling passive attackers).
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_CONTAINS_ERRORS">
            <summary>
            The server responded with a certificate that contains errors.
            This error is not recoverable.
            </summary>
            <remarks>
            MSDN describes this error as follows: "The SSL certificate contains errors."
            <note>
            It's unclear how this differs from ERR_CERT_INVALID. For consistency,
            use that code instead of this one from now on.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_NO_REVOCATION_MECHANISM">
            <summary>
            The certificate has no mechanism for determining if it is revoked. In
            effect, this certificate cannot be revoked.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_UNABLE_TO_CHECK_REVOCATION">
            <summary>
            Revocation information for the security certificate for this site is not
            available.
            </summary>
            <remarks>
            This could mean any of the following:
            <list type="bullet">
            <item>
            <description>
            An attacker has compromised the private key in the certificate and is
            blocking our attempt to find out that the cert was revoked.
            </description>
            </item>
            <item>
            <description>
            The certificate is unrevoked, but the revocation server is busy or
            unavailable.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_REVOKED">
            <summary>
            The server responded with a certificate has been revoked.
            </summary>
            <remarks>
            We have the capability to ignore this error, but it is probably not the
            thing to do.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_INVALID">
            <summary>
            The server responded with a certificate that is invalid.
            This error is not recoverable.
            </summary>
            <remarks>
            MSDN describes this error as follows: "The SSL certificate is invalid."
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_WEAK_SIGNATURE_ALGORITHM">
            <summary>
            The server responded with a certificate that is signed using a weak
            signature algorithm.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_NON_UNIQUE_NAME">
            <summary>
            The host name specified in the certificate is not unique.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_WEAK_KEY">
            <summary>
            The server responded with a certificate that contains a weak key (e.g.
            a too-small RSA key).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CERT_END">
            <summary>
            The value immediately past the last certificate error code.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INVALID_URL">
            <summary>
            The URL is invalid.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.DISALLOWED_URL_SCHEME">
            <summary>
            The scheme of the URL is disallowed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNKNOWN_URL_SCHEME">
            <summary>
            The scheme of the URL is unknown.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.TOO_MANY_REDIRECTS">
            <summary>
            Attempting to load an URL resulted in too many redirects.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNSAFE_REDIRECT">
            <summary>
            Attempting to load an URL resulted in an unsafe redirect (e.g., a redirect
            to file:// is considered unsafe).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNSAFE_PORT">
            <summary>
            Attempting to load an URL with an unsafe port number. These are port
            numbers that correspond to services, which are not robust to spurious input
            that may be constructed as a result of an allowed web construct (e.g., HTTP
            looks a lot like SMTP, so form submission to port 25 is denied).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INVALID_RESPONSE">
            <summary>
            The server's response was invalid.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INVALID_CHUNKED_ENCODING">
            <summary>
            Error in chunked transfer encoding.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.METHOD_NOT_SUPPORTED">
            <summary>
            The server did not support the request method.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNEXPECTED_PROXY_AUTH">
            <summary>
            The response was 407 (Proxy Authentication Required), yet we did not send
            the request to a proxy.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.EMPTY_RESPONSE">
            <summary>
            The server closed the connection without sending any data.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.RESPONSE_HEADERS_TOO_BIG">
            <summary>
            The headers section of the response is too large.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PAC_STATUS_NOT_OK">
            <summary>
            The PAC requested by HTTP did not have a valid status code (non-200).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PAC_SCRIPT_FAILED">
            <summary>
            The evaluation of the PAC script failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.REQUEST_RANGE_NOT_SATISFIABLE">
            <summary>
            The response was 416 (Requested range not satisfiable) and the server cannot
            satisfy the range requested.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.MALFORMED_IDENTITY">
            <summary>
            The identity used for authentication is invalid.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONTENT_DECODING_FAILED">
            <summary>
            Content decoding of the response body failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NETWORK_IO_SUSPENDED">
            <summary>
            is suspended.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SYN_REPLY_NOT_RECEIVED">
            <summary>
            FLIP data received without receiving a SYN_REPLY on the stream.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ENCODING_CONVERSION_FAILED">
            <summary>
            Converting the response to target encoding failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT">
            <summary>
            The server sent an FTP directory listing in a format we do not understand.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INVALID_SPDY_STREAM">
            <summary>
            Attempted use of an unknown SPDY stream id.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NO_SUPPORTED_PROXIES">
            <summary>
            There are no supported proxies in the provided list.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SPDY_PROTOCOL_ERROR">
            <summary>
            There is a SPDY protocol framing error.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INVALID_AUTH_CREDENTIALS">
            <summary>
            Credentials could not be established during HTTP Authentication.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNSUPPORTED_AUTH_SCHEME">
            <summary>
            machine.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ENCODING_DETECTION_FAILED">
            <summary>
            Detecting the encoding of the response failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.MISSING_AUTH_CREDENTIALS">
            <summary>
            (GSSAPI) No Kerberos credentials were available during HTTP Authentication.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNEXPECTED_SECURITY_LIBRARY_STATUS">
            <summary>
            An unexpected, but documented, SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.MISCONFIGURED_AUTH_ENVIRONMENT">
            <summary>
            example, no KDC could be found or the principal is unknown.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.UNDOCUMENTED_SECURITY_LIBRARY_STATUS">
            <summary>
            An undocumented SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.RESPONSE_BODY_TOO_BIG_TO_DRAIN">
            <summary>
            The HTTP response was too big to drain.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH">
            <summary>
            The HTTP response contained multiple distinct Content-Length headers.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INCOMPLETE_SPDY_HEADERS">
            <summary>
            SPDY Headers have been received, but not all of them - status or version
            headers are missing, so we're expecting additional frames to complete them.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PAC_NOT_IN_DHCP">
            <summary>
            No PAC URL configuration could be retrieved from DHCP. This can indicate
            either a failure to retrieve the DHCP configuration, or that there was no
            PAC URL configured in DHCP.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION">
            <summary>
            The HTTP response contained multiple Content-Disposition headers.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.RESPONSE_HEADERS_MULTIPLE_LOCATION">
            <summary>
            The HTTP response contained multiple Location headers.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SPDY_SERVER_REFUSED_STREAM">
            <summary>
            SPDY server refused the stream. Client should retry. This should never be a
            user-visible error.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.SPDY_PING_FAILED">
            <summary>
            SPDY server didn't respond to the PING message.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PIPELINE_EVICTION">
            <summary>
            The request couldn't be completed on an HTTP pipeline. Client should retry.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CONTENT_LENGTH_MISMATCH">
            <summary>
            The HTTP response body transferred fewer bytes than were advertised by the
            Content-Length header when the connection is closed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INCOMPLETE_CHUNKED_ENCODING">
            <summary>
            The HTTP response body is transferred with Chunked-Encoding, but the
            terminating zero-length chunk was never sent when the connection is closed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CACHE_MISS">
            <summary>
            The cache does not have the requested entry.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CACHE_READ_FAILURE">
            <summary>
            Unable to read from the disk cache.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CACHE_WRITE_FAILURE">
            <summary>
            Unable to write to the disk cache.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CACHE_OPERATION_NOT_SUPPORTED">
            <summary>
            The operation is not supported for this entry.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CACHE_OPEN_FAILURE">
            <summary>
            The disk cache is unable to open this entry.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CACHE_CREATE_FAILURE">
            <summary>
            The disk cache is unable to create this entry.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.CACHE_RACE">
            <summary>
            Multiple transactions are racing to create disk cache entries. This is an
            internal error returned from the HttpCache to the HttpCacheTransaction that
            tells the transaction to restart the entry-creation logic because the state
            of the cache has changed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.INSECURE_RESPONSE">
            <summary>
            The server's response was insecure (e.g. there was a cert error).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.NO_PRIVATE_KEY_FOR_CERT">
            <summary>
            The server responded to a &lt;keygen&gt; with a generated client cert that we
            don't have the matching private key for.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ADD_USER_CERT_FAILED">
            <summary>
            An error adding to the OS certificate database (e.g. OS X Keychain).
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FTP_FAILED">
            <summary>
            A generic error for failed FTP control connection command.
            If possible, please use or add a more specific error code.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.FTP_SERVICE_UNAVAILABLE">
            <summary>
            The server cannot fulfill the request at this point. This is a temporary
            error.
            </summary>
            <remarks>
            FTP response code 421.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.FTP_TRANSFER_ABORTED">
            <summary>
            The server has aborted the transfer.
            </summary>
            <remarks>
            FTP response code 426.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.FTP_FILE_BUSY">
            <summary>
            The file is busy, or some other temporary error condition on opening
            the file.
            </summary>
            <remarks>
            FTP response code 450.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.FTP_SYNTAX_ERROR">
            <summary>
            Server rejected our command because of syntax errors.
            </summary>
            <remarks>
            FTP response codes 500, 501.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.FTP_COMMAND_NOT_SUPPORTED">
            <summary>
            Server does not support the command we issued.
            </summary>
            <remarks>
            FTP response codes 502, 504.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.FTP_BAD_COMMAND_SEQUENCE">
            <summary>
            Server rejected our command because we didn't issue the commands in right
            order.
            </summary>
            <remarks>
            FTP response code 503.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.PKCS12_IMPORT_BAD_PASSWORD">
            <summary>
            PKCS #12 import failed due to incorrect password.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PKCS12_IMPORT_FAILED">
            <summary>
            PKCS #12 import failed due to other error.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.IMPORT_CA_CERT_NOT_CA">
            <summary>
            CA import failed - not a CA cert.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.IMPORT_CERT_ALREADY_EXISTS">
            <summary>
            Import failed - certificate already exists in database.
            </summary>
            <remarks>
            Note it's a little weird this is an error but reimporting a PKCS12 is ok
            (no-op).  That's how Mozilla does it, though.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.IMPORT_CA_CERT_FAILED">
            <summary>
            CA import failed due to some other error.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.IMPORT_SERVER_CERT_FAILED">
            <summary>
            Server certificate import failed due to some internal error.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PKCS12_IMPORT_INVALID_MAC">
            <summary>
            PKCS #12 import failed due to invalid MAC.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PKCS12_IMPORT_INVALID_FILE">
            <summary>
            PKCS #12 import failed due to invalid/corrupt file.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PKCS12_IMPORT_UNSUPPORTED">
            <summary>
            PKCS #12 import failed due to unsupported features.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.KEY_GENERATION_FAILED">
            <summary>
            Key generation failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.ORIGIN_BOUND_CERT_GENERATION_FAILED">
            <summary>
            Server-bound certificate generation failed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.PRIVATE_KEY_EXPORT_FAILED">
            <summary>
            Failure to export private key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.DNS_MALFORMED_RESPONSE">
            <summary>
            DNS resolver received a malformed response.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.DNS_SERVER_REQUIRES_TCP">
            <summary>
            DNS server requires TCP
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.DNS_SERVER_FAILED">
            <summary>
            DNS server failed.
            </summary>
            <remarks>
            This error is returned for all of the following
            error conditions:
            <list type="bullet">
            <item>
            <description>
            Format error - The name server was unable to interpret the query.
            </description>
            </item>
            <item>
            <description>
            Server failure - The name server was unable to process this query
            due to a problem with the name server.
            </description>
            </item>
            <item>
            <description>
            Not Implemented - The name server does not support the requested
            kind of query.
            </description>
            </item>
            <item>
            <description>
            Refused - The name server refuses to perform the specified
            operation for policy reasons.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.NetError.DNS_TIMED_OUT">
            <summary>
            DNS transaction timed out.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.DNS_CACHE_MISS">
            <summary>
            The entry was not found in cache, for cache-only lookups.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.DNS_SEARCH_EMPTY">
            <summary>
            Suffix search list rules prevent resolution of the given host name.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NetError.DNS_SORT_ERROR">
            <summary>
            Failed to sort addresses according to RFC3484.
            </summary>
        </member>
        <member name="T:Awesomium.Core.DownloadBeginEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.DownloadBeginEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.DownloadBeginEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadBeginEventArgs.Info">
            <summary>
            Gets the <see cref="T:Awesomium.Core.DownloadItem"/> instance that
            provides information about, and allows you to handle
            and monitor, the download operation that is about to start.
            </summary>
            <remarks>
            This is either a new <see cref="T:Awesomium.Core.DownloadItem"/> instance
            that has just been added to the <see cref="P:Awesomium.Core.WebCore.Downloads"/>
            collection, or a reused <see cref="T:Awesomium.Core.DownloadItem"/> instance,
            if the download operation is being repeated. For details,
            read the <b>Remarks</b> section of <see cref="T:Awesomium.Core.DownloadItem"/>.
            </remarks>
            <seealso cref="T:Awesomium.Core.DownloadItem"/>
        </member>
        <member name="T:Awesomium.Core.DownloadEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.Download"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.DownloadEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.DownloadEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Download"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.ViewId">
            <summary>
            Gets the unique identifier of the view that the download request
            originates from. This corresponds to <see cref="P:Awesomium.Core.IWebView.Identifier"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.SuggestedFileName">
            <summary>
            Gets the suggested name of the file being downloaded.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.MimeType">
            <summary>
            Gets the mime type of the file to be downloaded.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.SelectedFile">
            <summary>
            Gets or sets the path to the selected file.
            </summary>
            <remarks>
            If you set <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> to <c>true</c>, 
            you should use this property to specify the path to the selected file.
            <p/>
            Read the documentation of: <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/>,
            for ways to handle the event.
            <note>
            Setting this to <c>null</c> (<c>Nothing</c> in Visual Basic),
            equals to setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.Url">
            <summary>
            Gets the URL that initiated the download.
            </summary>
        </member>
        <member name="P:Awesomium.Core.DownloadEventArgs.Handled">
            <summary>
            Gets or sets if the event is handled by an application.
            </summary>
            <remarks>
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.WebCore.Download"/> event is handled, 
            when <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> is set to <c>false</c> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> 
            is set to <c>false</c> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> is set to <c>false</c> (default), controls will display their 
            predefined dialog that allows the user to select the file path to save the file to.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can modally handle the <see cref="E:Awesomium.Core.WebCore.Download"/> by providing a response through the <see cref="P:Awesomium.Core.DownloadEventArgs.SelectedFile"/> property, 
            before the event handler exits.
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.DownloadEventArgs.SelectedFile"/>
        </member>
        <member name="T:Awesomium.Core.IMERangeChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebViewIMEComposition.RangeChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.IMERangeChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.IMERangeChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebViewIMEComposition.RangeChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMERangeChangedEventArgs.Range">
            <summary>
            Gets the displayed range of the IME composition.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IMEUpdateEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebViewIMEComposition.Updated"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.IMEUpdateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.IMEUpdateEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebViewIMEComposition.Updated"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMEUpdateEventArgs.InputType">
            <summary>
            Gets the type of IME widget that should be displayed (if any).
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMEUpdateEventArgs.X">
            <summary>
            The x-position of the caret (relative to the <see cref="T:Awesomium.Core.IWebView"/> instance).
            </summary>
        </member>
        <member name="P:Awesomium.Core.IMEUpdateEventArgs.Y">
            <summary>
            The y-position of the caret (relative to the <see cref="T:Awesomium.Core.IWebView"/> instance).
            </summary>
        </member>
        <member name="T:Awesomium.Core.JavascriptMethodEventHandler">
            <summary>
            <b>[This delegate is deprecated. Please use <see cref="T:Awesomium.Core.JavascriptMethodHandler"/> that allows you to return a result directly from the method.]</b>
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptMethodEventArgs"/> that contains the event data.</param>
            <seealso cref="T:Awesomium.Core.JavascriptMethodHandler"/>
        </member>
        <member name="T:Awesomium.Core.JavascriptAsynchMethodEventHandler">
            <summary>
            <b>[This delegate is deprecated. Please use the new <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/>.]</b>
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptMethodEventArgs"/> that contains the event data.</param>
            <seealso cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/>
        </member>
        <member name="T:Awesomium.Core.JavascriptMethodHandler">
            <summary>
            Represents a method that will handle calls to one or more custom Javascript methods, synchronously.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptMethodEventArgs"/> that contains the event data.</param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> encapsulating the response that will be sent to JavaScript.
            This can also be a <see cref="F:Awesomium.Core.JSObjectType.Local"/> <see cref="T:Awesomium.Core.JSObject"/> with
            custom properties.
            </returns>
            <remarks>
            This delegate is used with <see cref="M:Awesomium.Core.JSObject.Bind(Awesomium.Core.JavascriptMethodHandler)"/>, 
            <see cref="M:Awesomium.Core.JSObject.Bind(System.String,Awesomium.Core.JavascriptMethodHandler)"/> and in DLR to tell
            the <see cref="T:Awesomium.Core.JSObject"/> to create a custom method that returns a value, 
            therefore called synchronously.
            <p/>
            The limitations of a synchronous handler are:
            <list type="bullet">
            <item>
            <description>
            You cannot make synchronous invocations from inside a synchronous handler.
            </description>
            </item>
            <item>
            <description>
            You cannot pass JavaScript objects to a synchronous handler.
            </description>
            </item>
            </list>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            <note type="note">
            A <see cref="T:Awesomium.Core.JavascriptMethodHandler"/> method is always called in a <i>synchronous</i> 
            <b>Javascript Execution Context (JEC)</b>. Read <a href="http://wiki.awesomium.net/javascript/jec.html">this article</a>
            for details about Javascript Execution Contexts.
            </note>
            <note type="note">
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, any value returned from a <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            is ignored and the method call will return <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            </note>
            <note>
            To create a method that is called asynchronously, use the
            <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/> delegate.
            </note>
            </remarks>
            <seealso cref="O:Awesomium.Core.JSObject.Bind"/>
            <seealso cref="T:Awesomium.Core.JSFunctionHandler"/>
        </member>
        <member name="T:Awesomium.Core.JavascriptAsyncMethodHandler">
            <summary>
            Represents a method that will handle calls to one or more custom Javascript methods, asynchronously.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptMethodEventArgs"/> that contains the event data.</param>
            <remarks>
            This delegate is used with <see cref="M:Awesomium.Core.JSObject.BindAsync(Awesomium.Core.JavascriptAsyncMethodHandler)"/>, 
            <see cref="M:Awesomium.Core.JSObject.BindAsync(System.String,Awesomium.Core.JavascriptAsyncMethodHandler)"/> and in DLR to tell 
            the <see cref="T:Awesomium.Core.JSObject"/> to create a custom method that does not return a value, 
            therefore called asynchronously.
            <p/>
            The benefits of an asynchronous handler are:
            <list type="bullet">
            <item>
            <description>
            You can make synchronous invocations from inside an asynchronous handler.
            </description>
            </item>
            <item>
            <description>
            You can pass JavaScript objects to an asynchronous handler.
            </description>
            </item>
            </list>
            <b>For more details, read:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html#declaring_custom_method_callbacks">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/custom-javascript-methods.html">Custom JavaScript Methods</a>
            </description>
            </item>
            </list>
            <note type="note">
            A <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/> method is always called in an <i>asynchronous</i> 
            <b>Javascript Execution Context (JEC)</b>. Read <a href="http://wiki.awesomium.net/javascript/jec.html">this article</a>
            for details about Javascript Execution Contexts.
            </note>
            </remarks>
            <example>
            <code lang="C#">
            private void OnDocumentReady( object sender, DocumentReadyEventArgs e )
            {
                // Create a global object and assign it to a dynamic.
                dynamic myGlobalObject = (JSObject)webView.CreateGlobalJavascriptObject( "myGlobalObject" );
            
                // Make sure we have the object.
                if ( !myGlobalObject )
                    return;
            
                // Create and bind a custom method dynamically. In a dynamic expression, use
                // a JavascriptAsyncMethodHandler delegate to create a JavaScript method
                // that does not return a value and is called asynchronously.
                myGlobalObject.myMethod = (JavascriptAsyncMethodHandler)OnCustomJavascriptMethod;
            }
            
            // Asynchronous JavaScript method handler.
            private static void OnCustomJavascriptMethod( object sender, JavascriptMethodEventArgs e )
            {
                IWebView webView = (IWebView)sender;
                
                if ( !webView.IsLive )
                    return;
                
                // Access essential objects of the web-page's current JavaScript environment.
                var global = e.Environment;
                    
                // We can have the same handler handling many remote methods.
                // Check here the method that is calling the handler.
                if ( e.MethodName == "myMethod" )
                {
                    // Make another synchronous call.
                    var res = global.window.confirm( "Called from an asynchronous handler.\nDo you confirm?" );
                }
            }
            </code>
            <code lang="VB">
            Option Explicit Off
            
            Private Sub OnDocumentReady(sender As Object, e As DocumentReadyEventArgs)
                ' Create a global object and assign it to a dynamic object.
                Dim myGlobalObject As Object = DirectCast(webView.CreateGlobalJavascriptObject("myGlobalObject"), JSObject)
            
                ' Make sure we have the object.
                If Not myGlobalObject Then
                    Return
                End If
            
                ' Create and bind a custom method dynamically. In a dynamic expression, use
                ' the JavascriptAsyncMethodHandler delegate to create a Javascript method
                ' that does not return a value and is called asynchronously.
                myGlobalObject.myMethod = DirectCast(AddressOf OnCustomJavascriptMethod, JavascriptAsyncMethodHandler)
            End Sub
            
            ' Asynchronous JavaScript method handler.
            Private Shared Sub OnCustomJavascriptMethod(sender As Object, e As JavascriptMethodEventArgs)
                Dim webView As IWebView = DirectCast(sender, IWebView)
            
                If Not webView.IsLive Then
                    Return
                End If
            
                ' Access essential objects of the web-page's current JavaScript environment.
                Dim global = e.Environment
            
                ' We can have the same handler handling many remote methods.
                ' Check here the method that is calling the handler.
                If e.MethodName = "myMethod" Then
                    ' Make another synchronous call.
                    Dim res = global.window.confirm("Called from an asynchronous handler." &amp; vbLf &amp; "Do you confirm?")
                End If
            End Sub
            </code>
            </example>
            <seealso cref="O:Awesomium.Core.JSObject.BindAsync"/>
        </member>
        <member name="T:Awesomium.Core.JavascriptMethodEventArgs">
            <summary>
            Provides data for calls to custom Javascript methods.
            </summary>
            <remarks>
            <note type="note">
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, 
            any value returned from a <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            is ignored and the method call will return <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.Environment">
            <summary>
            Provides access to essential objects of the web-page's current
            JavaScript environment.
            </summary>
            <remarks>
            <note type="note">
            This property only returns a value in an asynchronous Javascript Execution Context,
            i.e. when the handler of an asynchronous JavaScript method that does not expect e return
            value, is executed; otherwise, it returns <c>null</c> (<c>Nothing</c> in Visual Basic).
            <p/>
            For details, read: <see href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</see>
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.RemoteObjectId">
            <summary>
            Gets the unique identifier of the <see cref="T:Awesomium.Core.JSObject"/> that contains the method called.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.MethodName">
            <summary>
            Gets the name of the method being called.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.Arguments">
            <summary>
            Gets an array of arguments passed to the method.
            </summary>
            <remarks>
            <note>
            <see cref="T:Awesomium.Core.JSObject"/> instances passed as arguments to a <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/>,
            are destroyed by default when the <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/> exits. To cache
            a <see cref="T:Awesomium.Core.JSObject"/> instance passed as argument to a <see cref="T:Awesomium.Core.JavascriptAsyncMethodHandler"/>
            and keep it alive, create a copy of it using <see cref="M:Awesomium.Core.JSObject.Clone"/>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.MustReturnValue">
            <summary>
            Gets if the handler is called synchronously and should provide a returned value.
            </summary>
            <remarks>
            <note type="caution">
            Methods that return a value are called synchronously (the view process is blocked until the handler returns).
            Therefore, you cannot make synchronous invocations from inside a synchronous <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>,
            as this would cause a deadlock. For the same reason, JavaScript objects cannot be passed to a <see cref="T:Awesomium.Core.JavascriptMethodHandler"/>
            that is called synchronously. Any such objects passed from JavaScript, will be replaced with <c>undefined</c> in the
            <see cref="P:Awesomium.Core.JavascriptMethodEventArgs.Arguments"/> array.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptMethodEventArgs.Result">
            <summary>
            <b>[You should no longer use this property to return a value. Instead, assign your handler as JavascriptMethodHandler or JSFunctionHandler and return the value directly from the handler.]</b>
            </summary>
        </member>
        <member name="T:Awesomium.Core.ConsoleMessageEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ConsoleMessage"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ConsoleMessageEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ConsoleMessageEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebView.ConsoleMessage"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ConsoleMessageEventArgs.Message">
            <summary>
            Gets the message added to the console.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ConsoleMessageEventArgs.LineNumber">
            <summary>
            Gets the source file's line number that the <see cref="P:Awesomium.Core.ConsoleMessageEventArgs.Message"/>
            refers to.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ConsoleMessageEventArgs.Source">
            <summary>
            Gets the source file that the <see cref="P:Awesomium.Core.ConsoleMessageEventArgs.Message"/> refers to.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PrintCompleteEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.PrintComplete"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PrintCompleteEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PrintCompleteEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="T:Awesomium.Core.PrintOperationEventArgs">
            <summary>
            Provides data for a print operation event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="P:Awesomium.Core.PrintOperationEventArgs.RequestId">
            <summary>
            Gets the unique request identifier (returned from <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> earlier).
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintCompleteEventArgs.Files">
            <summary>
            The list of file-paths written. There may be multiple
            files written if <see cref="P:Awesomium.Core.PrintConfig.SplitPagesIntoMultipleFiles"/> was
            set to <c>true</c>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PrintOperationEventHandler">
            <summary>
            Represents the method that will handle a print operation events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PrintOperationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PrintRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PrintRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PrintRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
        </member>
        <member name="P:Awesomium.Core.PrintRequestEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to <c>false</c> (default), a <c>WebControl</c>
            may display its predefined dialog.
            </summary>
            <remarks>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PrintRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PrintRequestEventArgs.Handled"/>, is ignored.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.FileDialogEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.FileDialogEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.FileDialogEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event.
            </summary>
            <remarks>
            Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> to cancel the event.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.Mode">
            <summary>
            Gets the type of dialog to display.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.Title">
            <summary>
            Gets the title of the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.SuggestedFileName">
            <summary>
            Gets the suggested file name for the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.MimeTypes">
            <summary>
            Gets the valid mime types.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles">
            <summary>
            Gets or sets the paths to the selected file(s).
            </summary>
            <remarks>
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.Modal"/>, 
            you should use this property to specify the selected files.
            <p/>
            Read the documentation of: <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>,
            for ways to handle the event.
            <note>
            Setting this to <c>null</c> (<c>Nothing</c> in Visual Basic),
            equals to setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.SelectedFile">
            <summary>
            Gets or sets the path to the selected file.
            </summary>
            <remarks>
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.Modal"/>, 
            you should use this property to specify the path to the selected file.
            <p/>
            Setting this property will also update the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/>
            property.
            <p/>
            Read the documentation of: <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>,
            for ways to handle the event.
            <note>
            Setting this to <c>null</c> (<c>Nothing</c> in Visual Basic),
            equals to setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.FileDialogEventArgs.Handled">
            <summary>
            Gets or sets if the event is handled by an application.
            </summary>
            <remarks>
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> 
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event either <b>modally</b> or <b>non-modally</b>. 
            <b>Only default or modal handling is officially supported by Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>.
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the above <see cref="T:Awesomium.Core.IWebView"/>
            member, is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            <note type="caution">
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/>
            <seealso cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/>
        </member>
        <member name="T:Awesomium.Core.FocusChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.FocusChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.FocusChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.FocusChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.FocusChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.FocusChangedEventArgs.FocusedElementType">
            <summary>
            Indicates the type of element currently focused in
            the page loaded in the view.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.JavascriptDialogEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.JavascriptDialogEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.JavascriptDialogEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.DialogFlags">
            <summary>
            Gets a combination of <see cref="T:Awesomium.Core.JSDialogFlags"/>
            that specify the type of dialog to be displayed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.Message">
            <summary>
            The message, if any, to be displayed by the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.DefaultPrompt">
            <summary>
            The default prompt provided by JS, for the dialog's prompt.
            </summary>
            <remarks>
            <note>
            This is valid when <see cref="P:Awesomium.Core.JavascriptDialogEventArgs.DialogFlags"/> has the
            <see cref="F:Awesomium.Core.JSDialogFlags.HasPromptField"/> flag.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.FrameURL">
            <summary>
            Gets the address of the page that launches the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.Prompt">
            <summary>
            Gets or sets the text the user has provided to a
            <see cref="F:Awesomium.Core.JSDialogFlags.HasPromptField"/> dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptDialogEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            The default is <c>false</c>.
            </summary>
            <remarks>
            When set to <c>false</c> (default), a technology specific
            <c>WebControl</c> may display its predefined dialog (if any).
            </remarks>
        </member>
        <member name="T:Awesomium.Core.LoginRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoginRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoginRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <remarks>
            Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> to cancel
            the request.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebLoginDialogInfo"/> that provides information 
            for creating and displaying a dialog so that users can input their 
            username and password.
            </summary>
            <remarks>
            When you are handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>),
            it is your responsibility to display a dialog so that users can input their username and password.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Username">
            <summary>
            Specify a Username as a response to the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <remarks>
            You should set this property if <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Modal"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Password">
            <summary>
            Specify a Password as a response to the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event.
            </summary>
            <remarks>
            You should set this property if <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Modal"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.LoginRequestEventArgs.Handled">
            <summary>
            Gets or sets if the event is handled by an application.
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
             No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/>
        </member>
        <member name="T:Awesomium.Core.ShowContextMenuEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ContextMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ContextMenuEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ContextMenuEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that provides information 
            for creating and displaying the context menu.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ContextMenuEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to <c>false</c> (default), a <c>WebControl</c>
            will display its predefined user interface, if any.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ShowPopupMenuEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.PopupMenuEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PopupMenuEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
            <remarks>
            To synchronously cancel the event, set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> 
            to <c>true</c>. Otherwise, you have to explicitly call <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/>
            or <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>.
            </remarks>
            <seealso cref="T:Awesomium.Core.WebPopupMenuInfo"/>
            <seealso cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>
            <seealso cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/>
        </member>
        <member name="P:Awesomium.Core.PopupMenuEventArgs.Info">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> that provides information 
            for creating and displaying the drop-down (popup) menu.
            </summary>
            <remarks>
            When you handle <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            yourself (see <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>),
            you are responsible for creating and rendering the drop-down
            (popup) menu. <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> provides the
            necessary information for creating the menu. It also allows
            you to easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.PopupMenuEventArgs.Handled">
            <summary>
            Gets or sets if the event has been handled by the user.
            </summary>
            <remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <p/>
            Optionally, you can easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CreateSurfaceEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CreateSurfaceEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CreateSurfaceEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CreateSurfaceEventArgs.Width">
            <summary>
            Indicates the surfaces width.
            </summary>
            <remarks>
            This property reflects the current width of the <see cref="T:Awesomium.Core.IWebView"/>
            instance the <see cref="T:Awesomium.Core.ISurface"/> will be assigned to.
            The created surface should usually be of the same size.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.CreateSurfaceEventArgs.Height">
            <summary>
            Indicates the surfaces height.
            </summary>
            <remarks>
            This property reflects the current height of the <see cref="T:Awesomium.Core.IWebView"/>
            instance the <see cref="T:Awesomium.Core.ISurface"/> will be assigned to.
            The created surface should usually be of the same size.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.CreateSurfaceEventArgs.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance that will
            be responsible for rendering the view's pixel buffer.
            </summary>
            <remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
            <returns>
            The <see cref="T:Awesomium.Core.ISurface"/> instance assigned to the view in a previous call to
            <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>, or the default <see cref="T:Awesomium.Core.ISurface"/> instance
            if this is the first time <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is being called.
            </returns>
            <seealso cref="T:Awesomium.Core.ISurface"/>
            <seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            <seealso cref="P:Awesomium.Core.IWebView.Surface"/>
            <seealso cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>
        </member>
        <member name="T:Awesomium.Core.CoreShutdownEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CoreShutdownEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CoreShutdownEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreShutdownEventArgs.Exception">
            <summary>
            Gets the unhandled exception that causes the <see cref="T:Awesomium.Core.WebCore"/> to shutdown.
            This is <c>null</c> (<c>Nothing</c> in Visual Basic) if the core is shutting down
            in response to a normal <see cref="M:Awesomium.Core.WebCore.Shutdown"/> command.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Core.WebCore"/> can shut down when an exception during the core's update
            cycle, was unhandled by user code. This will subsequently fire <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/>,
            before the core destroys all resources (active views and sessions) and shuts down.
            When this is the reason for a shut down, <see cref="P:Awesomium.Core.CoreShutdownEventArgs.Exception"/>
            exposes the exception that causes the core to shut down.
            <note type="caution">
            Do not cancel the shutdown before you carefully investigate the exception and any inner exceptions.
            Report the details of the exception to: <a href="http://answers.awesomium.com">http://answers.awesomium.com</a>.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CoreStartEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CoreStartEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CoreStartEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Started"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreStartEventArgs.Configuration">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebConfig"/> instance indicating 
            the configuration settings used to start the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CoreStartingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">
            An <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
            <p/>
            <note type="caution">
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            will prevent the <see cref="T:Awesomium.Core.WebCore"/> from starting. 
            Use with caution.
            </note>
            </param>
        </member>
        <member name="T:Awesomium.Core.CoreStartingEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreStartingEventArgs.Configuration">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebConfig"/> instance indicating the configuration 
            settings that will be used to start the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
            <remarks>
            When <see cref="E:Awesomium.Core.WebCore.Starting"/> is fired, you can still modify the 
            configuration settings. The <see cref="T:Awesomium.Core.WebCore"/> is not initialized yet.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CreatedViewEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CreatedViewEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CreatedViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CreatedViewEventArgs.NewView">
            <summary>
            Gets the new view created by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ResponsiveChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ResponsiveChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ResponsiveChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.IWebView"/> instance is currently responsive.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ShowCreatedWebViewEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ShowCreatedWebViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance">
            <summary>
            Gets the handle to the new child view, created by Awesomium.
            </summary>
            <remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance creates a new child view 
            (usually the result of <c>window.open</c>, clicking on a link with <c>target="_blank"</c> or submitting a <c>form</c>
            with <c>target="_blank"</c>). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <p/>
            <note>
            The <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event must always be handled in your application to wrap views created by
            Awesomium in response to users clicking a link or JavaScript <c>window.open</c> calls.
            <p/>
            If you don't handle this event, the unused web-view instance will be immediately destroyed.
            </note>
            There are a number of facts you need to take into consideration, before taking the appropriate actions in response 
            to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. The following list presents these facts and some general suggestions:
            <list type="bullet">
            <item>
            <description>
            The created child view, has the same type (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>) and is assigned to the same session
            (see <see cref="P:Awesomium.Core.IWebView.WebSession"/>) as its parent (opener) view. Therefore, you should not attempt to set these 
            properties if you are wrapping the new child view with a technology specific <c>WebControl</c>.
            </description>
            </item>
            <item>
            <description>
            In order to maintain the relationship with their parent view, child views execute and render under 
            the same process (<c>awesomium_process</c>) as their parent view. If for any reason the child process crashes,
            all views related to it will be affected.
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of a Javascript <c>window.open</c>,
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b> the created child view instance
            (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to maintain the parent-child window relationship (the child page can access
            the parent through the <c>window.opener</c> property; the parent can manipulate the child through the
            <c>window</c> object returned from the <c>window.open</c> call, which is why <c>window.open</c> was most
            probably used in the first place).
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of an HTML form with <c>target="_blank"</c> and
            <c>method="post"</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b>
            the created child view instance (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to allow <c>POST</c> data be properly passed.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>, it most possibly indicates that the event is the result of
            a user clicking on a link with <c>target="_blank"</c>. Since maintaining a parent-child relationship is not important
            in this scenario, <b>you should cancel the event</b> by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> (this tells the core 
            to destroy the unused web-view instance), then create a new <see cref="T:Awesomium.Core.WebView"/> (using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>)
            or <c>WebControl</c> and navigate to the provided <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any. This allows you to take advantage
            of the isolated process architecture of Awesomium and let each view be rendered in a separate process.
            <note type="caution">
            Failing to cancel the event when you are not wrapping the new child view instance, will keep the native instance alive until 
            the <see cref="T:Awesomium.Core.WebCore"/> is shut down. This can result in numerous unused views being spawned, but never actually used.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, 
            is already queued on the created child view. Therefore you should not attempt to set the <see cref="P:Awesomium.Core.IWebView.Source"/> when you 
            are wrapping the child view, as this would again break the parent-child relationship (<c>window.opener</c> on the child page and the 
            <c>window</c> object returned from the <c>window.open</c> call on the parent page, will be rendered invalid) or prevent passing
            <c>POST</c> data to the server respectively.
            <note>
            Also note that since navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, has already started by the moment the child
            view is wrapped, <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> will not be fired for the main frame of the new <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            </note>
            </description>
            </item>
            <item>
            <description>
            Navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, is blocked on the created child view, when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> and 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>. As applications will generally choose to cancel the event and create a new <see cref="T:Awesomium.Core.IWebView"/> 
            instance to navigate to the target URL (or even choose to navigate to the target URL on the same <see cref="T:Awesomium.Core.IWebView"/> instance that 
            fired the event), Awesomium.NET does this to prevent <i>false hits</i> to the target URL, that would have occurred by the time the 
            event handler returns and the unused child view instance, is destroyed. What's more, users may also implement 
            <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel requests to new views that are the result of JavaScript <c>window.open</c>
            (see <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>). Therefore, if your application chooses to wrap the created 
            child view even though it is most possibly the result of a user clicking on a link with <c>target="_blank"</c> or navigation
            to the target URL has already been canceled by an <see cref="T:Awesomium.Core.IResourceInterceptor"/> (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>), 
            you should in this scenario only, after wrapping the child view, set the <see cref="P:Awesomium.Core.IWebView.Source"/> property to 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> to resume navigation to the target URL.
            <note>
            Applications can occasionally choose to wrap a child view even when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>false</c> or 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>, if they want to apply a <i>single process</i> architecture where all new 
            views created will be rendered by the same <c>awesomium_process</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> returns a valid, initialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
            instance. This may be initialized to default values if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>false</c>, or reflect the <i>specs</i> 
            specified to the <c>window.open</c> call, if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>.
            </description>
            </item>
            <item>
            <description>
            If <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, applications should generally wrap and present the native view in a new popup application
            window. This window should have the size and location specified in <see cref="P:Awesomium.Core.JSWindowOpenSpecs.InitialPosition"/>, <b>if this is not
            empty</b>. They should also respect the rest of the specs available through <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, when creating
            the new application window that will host the child view.
            <note>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is always also <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> will only be <c>true</c>, if <i>specs</i> were specified to the <c>window.open</c> call. These can be
            standard specs such as <c>width=400,height=400,menubar=no</c>, only user defined, non-standard specs such as <c>background=black</c>
            or a combination of both. These specs are available through the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> property.
            </description>
            </item>
            <item>
            <description>
            If only user defined, non-standard <i>specs</i> were specified to the <c>window.open</c> call, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will
            be <c>true</c>. In this scenario, if your application does not recognize user defined, non-standard specs, it can ignore the 
            value of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> all together and wrap the new child view in a regular new application window, tab or control.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData"/> returns an array of <see cref="T:Awesomium.Core.UploadElement"/>,
            representing the <i>upload</i> data passed to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> using <c>POST</c>.
            </description>
            </item>
            <item>
            <description>
            Finally note that only an empty <i>name</i> parameter or a <c>_blank</c> target attribute specified as the <i>name</i> parameter 
            in a <c>window.open</c> call or in a link or <c>form</c>, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. Other target 
            attributes (such as <c>_top</c>), passed to either a <c>window.open</c> call, a link or a <c>form</c>, are handled by Awesomium internally.
            </description>
            </item>
            </list>
            <note type="caution">
            Several members of <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>, may not return valid values if Javascript is disabled.
            For details, read the documentation of: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>.
            </note>
            Given the facts and suggestions presented before, if your application is about to wrap the created child view, the following 
            table shows the methods available, to wrap the created child view using any of the <b>Awesomium.NET</b> web-view components:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Method and Notes
            </description>
            </listheader>
            <item>
            <term>
            Core
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Pass <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>
            to wrap the new view with a <see cref="T:Awesomium.Core.WebView"/>.
            </description>
            </item>
            <item>
            <description>
            For <i>windowed</i> views (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>), you should now assign a <see cref="P:Awesomium.Core.WebView.ParentWindow"/>.
            <i>Offscreen</i> views have a <see cref="T:Awesomium.Core.BitmapSurface"/> assigned by default but depending on your application's design,
            you may have to assign a new <see cref="T:Awesomium.Core.ISurface"/> by either monitoring the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event, 
            or setting the <see cref="P:Awesomium.Core.IWebView.Surface"/> property.
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Core.WebView"/> to match its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Controls.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Controls.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Controls.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by binding the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property
            in XAML (see examples in the <b>Awesomium.NET Samples</b> solution available with the SDK), or by monitoring the 
            <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Controls.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Forms.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Forms.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Forms.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by assigning the <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property
            right after the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is created (see examples in the <b>Awesomium.NET Samples</b> solution available 
            with the SDK),or by monitoring the <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Forms.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            The following example illustrates handling the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event in a WPF application that uses
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> controls. In this example, we create a <i>ChildWindow</i> window
            that hosts a <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This window and its hosted <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            will be used to wrap and present the child view passed to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, or navigate to the
            target URL, if <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of a link with <c>target="_blank"</c>.
            <p/>
            Below is the XAML of our <b>ChildWindow</b>.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WebControlSample.ChildWindow" 
                x:Name="childWindow"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                Title="{Binding Title, ElementName=webControl}" 
                Height="480" 
                Width="600">
                <Window.Resources>
                    <!-- We do not need to set any WebPreferences or DataSources 
                    on this provider. It uses the same DataPath as the provider in
                    MainWindow, therefore, this provider will provide the same session,
                    already created by the WebSessionProvider in MainWindow. -->
                    <awe:WebSessionProvider x:Key="mySession" DataPath=".\Cache" />
                </Window.Resources>
                <Grid>
                    <!-- Note that the WebSession assigned to this WebControl, will
                         be effectively ignored when this WebControl wraps a created
                         child view. Child views share the same session as their parent
                         (opener) view. -->
                    <awe:WebControl 
                        Name="webControl" 
                        WebSession="{Binding Source={StaticResource mySession}}"
                        Source="{Binding Source, ElementName=childWindow}"
                        NativeView="{Binding NativeView, ElementName=childWindow}" />
                </Grid>
            </Window>
            ]]>
            </code>
            This is the code-behind of the <b>ChildWindow</b>:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for ChildWindow.xaml
                /// </summary>
                public partial class ChildWindow : Window
                {
                    public ChildWindow()
                    {
                        InitializeComponent();
            
                        // In this example, ShowCreatedWebView of all WebControls, 
                        // is handled by a common handler.
                        webControl.ShowCreatedWebView += App.OnShowNewView;
                    }
            
                    protected override void OnClosed( EventArgs e )
                    {
                        base.OnClosed( e );
            
                        // Destroy the WebControl and its underlying view.
                        webControl.Dispose();
                    }
            
                    // This will be set to the target URL, when this ChildWindow does not
                    // host a created child view. The WebControl, is bound to this property.
                    public Uri Source
                    {
                        get { return this.GetValue( SourceProperty ) as Uri; }
                        set { SetValue( SourceProperty, value ); }
                    }
            
                    public static readonly DependencyProperty SourceProperty = 
                        DependencyProperty.Register( "Source",
                        typeof( Uri ), typeof( ChildWindow ),
                        new UIPropertyMetadata( null ) );
            
                    // This will be set to the created child view that the WebControl will wrap,
                    // when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    // is bound to this property.
                    public IntPtr NativeView
                    {
                        get { return (IntPtr)this.GetValue( ChildWindow.NativeViewProperty ); }
                        internal set { this.SetValue( ChildWindow.NativeViewPropertyKey, value ); }
                    }
            
                    private static readonly DependencyPropertyKey NativeViewPropertyKey = 
                        DependencyProperty.RegisterReadOnly( "NativeView",
                        typeof( IntPtr ), typeof( ChildWindow ),
                        new FrameworkPropertyMetadata( IntPtr.Zero ) );
            
                    public static readonly DependencyProperty NativeViewProperty =
                        NativeViewPropertyKey.DependencyProperty;
            
                }
            }
            ]]>
            </code>
            <code lang="VB.NET">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            
            Namespace WebControlSample
                ''' <summary>
                ''' Interaction logic for ChildWindow.xaml
                ''' </summary>
                Partial Public Class ChildWindow
                    Inherits Window
            
                    Public Sub New()
                        InitializeComponent()
            
                        ' In this example, ShowCreatedWebView of all WebControls, 
                        ' is handled by a common handler.
                        AddHandler webControl.ShowCreatedWebView, AddressOf App.OnShowNewView
                    End Sub
            
                    Protected Overrides Sub OnClosed(ByVal e As EventArgs)
                        MyBase.OnClosed(e)
            
                        ' Destroy the WebControl and its underlying view.
                        webControl.Dispose()
                    End Sub
            
                    ' This will be set to the target URL, when this ChildWindow does not
                    ' host a created child view. The WebControl, is bound to this property.
                    Public Property Source() As Uri
                        Get
                            Return TryCast(Me.GetValue(SourceProperty), Uri)
                        End Get
                        Set(ByVal value As Uri)
                            SetValue(SourceProperty, value)
                        End Set
                    End Property
            
                    Public Shared ReadOnly SourceProperty As DependencyProperty =
                        DependencyProperty.Register("Source", GetType(Uri),
                        GetType(ChildWindow), New UIPropertyMetadata(Nothing))
            
                    ' This will be set to the created child view that the WebControl will wrap,
                    ' when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    ' is bound to this property.
                    Public Property NativeView() As IntPtr
                        Get
                            Return CType(Me.GetValue(ChildWindow.NativeViewProperty), IntPtr)
                        End Get
                        Friend Set(ByVal value As IntPtr)
                            Me.SetValue(ChildWindow.NativeViewPropertyKey, value)
                        End Set
                    End Property
            
                    Private Shared ReadOnly NativeViewPropertyKey As DependencyPropertyKey =
                        DependencyProperty.RegisterReadOnly("NativeView", GetType(IntPtr),
                        GetType(ChildWindow), New FrameworkPropertyMetadata(IntPtr.Zero))
            
                    Public Shared ReadOnly NativeViewProperty As DependencyProperty =
                        NativeViewPropertyKey.DependencyProperty
                End Class
            End Namespace
            ]]>
            </code>
            Below is the common <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> handler, defined in our <see cref="T:System.Windows.Application"/> object
            code-behind:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            using Awesomium.Windows.Controls;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for App.xaml
                /// </summary>
                public partial class App : Application
                {
                    private void Application_Exit( object sender, ExitEventArgs e )
                    {
                        // Shutdown the Core.
                        WebCore.Shutdown();
                    }
            
                    // This static handler, will handle the ShowCreatedWebView event for both the 
                    // WebControl of our main application window, as well as for any other windows
                    // hosting WebControls.
                    internal static void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
                    {
                        WebControl webControl = sender as WebControl;
            
                        if ( webControl == null )
                            return;
            
                        if ( !webControl.IsLive )
                            return;
            
                        // Create an instance of our application's child window, that will
                        // host the new view instance, either we wrap the created child view,
                        // or we let the WebControl create a new underlying web-view.
                        ChildWindow newWindow  = new ChildWindow();
            
                        // Treat popups differently. If IsPopup is true, the event is always
                        // the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
                        // Our application does not recognize user defined, non-standard specs. 
                        // Therefore child views opened with non-standard specs, will not be presented as 
                        // popups but as regular new windows (still wrapping the child view however -- se below).
                        if ( e.IsPopup && !e.IsUserSpecsOnly )
                        {
                            // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
                            Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();
            
                            // Set the created native view as the underlying view of the
                            // WebControl. This will maintain the relationship between
                            // the parent view and the child, usually required when the new view
                            // is the result of 'window.open' (JS can access the parent window through
                            // 'window.opener'; the parent window can manipulate the child through the 'window'
                            // object returned from the 'window.open' call).
                            newWindow.NativeView = e.NewViewInstance;
                            // Do not show in the taskbar.
                            newWindow.ShowInTaskbar = false;
                            // Set a border-style to indicate a popup.
                            newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow;
                            // Set resizing mode depending on the indicated specs.
                            newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;
            
                            // If the caller has not indicated a valid size for the new popup window,
                            // let it be opened with the default size specified at design time.
                            if ( ( screenRect.Width > 0 ) && ( screenRect.Height > 0 ) )
                            {
                                // Assign the indicated size.
                                newWindow.Width = screenRect.Width;
                                newWindow.Height = screenRect.Height;
                            }
            
                            // Show the window.
                            newWindow.Show();
            
                            // If the caller has not indicated a valid position for the new popup window,
                            // let it be opened in the default position specified at design time.
                            if ( ( screenRect.Y > 0 ) && ( screenRect.X > 0 ) )
                            {
                                // Move it to the indicated coordinates.
                                newWindow.Top = screenRect.Y;
                                newWindow.Left = screenRect.X;
                            }
                        }
                        else if ( e.IsWindowOpen || e.IsPost )
                        {
                            // No specs or only non-standard specs were specified, but the event is still 
                            // the result of 'window.open', or of an HTML form with tagret="_blank" and method="post". 
                            // We will open a normal window but we will still wrap the new native child view, 
                            // maintaining its relationship with the parent window.
                            newWindow.NativeView = e.NewViewInstance;
                            // Show the window.
                            newWindow.Show();
                        }
                        else
                        {
                            // The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
                            // and method="post"., therefore it's most probably the result of a link with target='_blank'.
                            // We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
                            // create its own underlying view. Setting Cancel to true tells the core to destroy the 
                            // created child view.
                            //
                            // Why don't we always wrap the native view passed to ShowCreatedWebView?
                            //
                            // - In order to maintain the relationship with their parent view,
                            // child views execute and render under the same process (awesomium_process)
                            // as their parent view. If for any reason this child process crashes,
                            // all views related to it will be affected. When maintaining a parent-child 
                            // relationship is not important, we prefer taking advantage of the isolated process 
                            // architecture of Awesomium and let each view be rendered in a separate process.
                            e.Cancel = true;
                            // Note that we only explicitly navigate to the target URL, when a new view is 
                            // about to be created, not when we wrap the created child view. This is because 
                            // navigation to the target URL (if any), is already queued on created child views. 
                            // We must not interrupt this navigation as we would still be breaking the parent-child
                            // relationship.
                            newWindow.Source = e.TargetURL;
                            // Show the window.
                            newWindow.Show();
                        }
                    }
                }
            }
            ]]>
            </code>
            <code lang="VB">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            Imports Awesomium.Windows.Controls
            
            Namespace WebControlSample
            	''' <summary>
            	''' Interaction logic for App.xaml
            	''' </summary>
            	Partial Public Class App
            		Inherits Application
            
            		Private Sub Application_Exit(ByVal sender As Object, ByVal e As ExitEventArgs)
            			' Shutdown the Core.
            			WebCore.Shutdown()
            		End Sub
            
            		' This static handler, will handle the ShowCreatedWebView event for both the 
            		' WebControl of our main application window, as well as for any other windows
            		' hosting WebControls.
            		Friend Shared Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            			Dim webControl As WebControl = TryCast(sender, WebControl)
            
            			If webControl Is Nothing Then Return
            
            			If Not webControl.IsLive Then Return
            
            			' Create an instance of our application's child window, that will
            			' host the new view instance, either we wrap the created child view,
            			' or we let the WebControl create a new underlying web-view.
            			Dim newWindow As New ChildWindow()
            
            			' Treat popups differently. If IsPopup is true, the event is always
            			' the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
            			' Our application does not recognize user defined, non-standard specs. 
            			' Therefore child views opened with non-standard specs, will not be presented as 
            			' popups but as regular new windows (still wrapping the child view however -- se below).
            			If e.IsPopup AndAlso (Not e.IsUserSpecsOnly) Then
            				' JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
            				Dim screenRect As Int32Rect = e.Specs.InitialPosition.GetInt32Rect()
            
            				' Set the created native view as the underlying view of the
            				' WebControl. This will maintain the relationship between
            				' the parent view and the child, usually required when the new view
            				' is the result of 'window.open' (JS can access the parent window through
            				' 'window.opener'; the parent window can manipulate the child through the 'window'
            				' object returned from the 'window.open' call).
            				newWindow.NativeView = e.NewViewInstance
            				' Do not show in the taskbar.
            				newWindow.ShowInTaskbar = False
            				' Set a border-style to indicate a popup.
            				newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow
            				' Set resizing mode depending on the indicated specs.
            				newWindow.ResizeMode = If(e.Specs.Resizable, ResizeMode.CanResizeWithGrip, ResizeMode.NoResize)
            
            				' If the caller has not indicated a valid size for the new popup window,
            				' let it be opened with the default size specified at design time.
            				If (screenRect.Width > 0) AndAlso (screenRect.Height > 0) Then
            					' Assign the indicated size.
            					newWindow.Width = screenRect.Width
            					newWindow.Height = screenRect.Height
            				End If
            
            				' Show the window.
            				newWindow.Show()
            
            				' If the caller has not indicated a valid position for the new popup window,
            				' let it be opened in the default position specified at design time.
            				If (screenRect.Y > 0) AndAlso (screenRect.X > 0) Then
            					' Move it to the indicated coordinates.
            					newWindow.Top = screenRect.Y
            					newWindow.Left = screenRect.X
            				End If
            			ElseIf (e.IsWindowOpen OrElse e.IsPost) Then
            				' No specs or only non-standard specs were specified, but the event is still 
            				' the result of 'window.open' or of an HTML form with tagret="_blank" and method="post".
            				' We will open a normal window but we will still wrap the new native child view, 
            				' maintaining its relationship with the parent window.
            				newWindow.NativeView = e.NewViewInstance
            				' Show the window.
            				newWindow.Show()
            			Else
            				' The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
            				' and method="post"., therefore it's most probably the result of a link with target='_blank'.
            				' We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
            				' create its own underlying view. Setting Cancel to true tells the core to destroy the 
            				' created child view.
            				'
            				' Why don't we always wrap the native view passed to ShowCreatedWebView?
            				'
            				' - In order to maintain the relationship with their parent view,
            				' child views execute and render under the same process (awesomium_process)
            				' as their parent view. If for any reason this child process crashes,
            				' all views related to it will be affected. When maintaining a parent-child 
            				' relationship is not important, we prefer taking advantage of the isolated process 
            				' architecture of Awesomium and let each view be rendered in a separate process.
            				e.Cancel = True
            				' Note that we only explicitly navigate to the target URL, when a new view is 
            				' about to be created, not when we wrap the created child view. This is because 
            				' navigation to the target URL (if any), is already queued on created child views. 
            				' We must not interrupt this navigation as we would still be breaking the parent-child
            				' relationship.
            				newWindow.Source = e.TargetURL
            				' Show the window.
            				newWindow.Show()
            			End If
            		End Sub
            	End Class
            End Namespace
            ]]>
            </code>
            For the complete sample, see the <b>C# WebControlSample</b> of the <b>Awesomium.NET Samples</b> solution, available with the SDK.
            </example>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.OpenerURL">
            <summary>
            Gets the URL of the page that is opening the new <c>window</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL">
            <summary>
            Gets the target URL that should be loaded in the new view.
            </summary>
            <remarks>
            <note type="caution">
            This can occasionally be <c>null</c> (<c>Nothing</c> in Visual Basic).
            When this happens, you should not cancel the event but instead wrap
            the new view (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>). An empty target url
            may indicate that the parent page that opens the new view, will manipulate
            its contents at a later moment.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen">
            <summary>
            Gets if the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event is the result
            of a Javascript <c>window.open</c> call.
            </summary>
            <remarks>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>, you should always
            wrap the new view instance (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs">
            <summary>
            Gets the <c>specs</c> specified to the Javascript
            <c>window.open</c> call, when the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event is the result of a Javascript <c>window.open</c> call.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance representing the 
            <c>specs</c> specified to the Javascript <c>window.open</c> call,
            or an empty <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance (see 
            <see cref="F:Awesomium.Core.JSWindowOpenSpecs.Empty"/> and <see cref="P:Awesomium.Core.JSWindowOpenSpecs.IsEmpty"/>)
            if the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event is not the result of a Javascript 
            <c>window.open</c> call.
            </returns>
            <remarks>
            <note>
            Only valid when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData">
            <summary>
            Gets the <i>upload</i> data passed to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>
            using <c>POST</c> method.
            </summary>
            <remarks>
            Only valid when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>.
            <note type="caution">
            This will be <c>null</c> (<c>Nothing</c> in Visual Basic) if
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c> but the <c>POST</c> request
            has been canceled and <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup">
            <summary>
            Gets if this must be a popup <c>window</c>.
            </summary>
            <remarks>
            This is <c>true</c> only when the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event is the result of a Javascript <c>window.open</c> call
            (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is also <c>true</c>) and one or more
            <c>specs</c> have been specified to the <c>window.open</c> call.
            <p/>
            The specified <c>specs</c> (available through the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>
            property) can be standard settings for the popup window, or only user
            specified specs that an application can, or cannot recognize.
            <p/>
            For example, the following <c>window.open</c> calls, will both
            fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> with <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/>
            set to <c>true</c>:
            <code lang="JavaScript">
            window.open("file.html", "", "someFlag");
            </code>
            <code lang="JavaScript">
            window.open("file.html", "", "background=black");
            </code>
            In the first example, the <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> returned 
            from <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, will contain a user spec in the <see cref="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs"/>
            dictionary, where the key will be <c>someFlag</c> and the value will be <c>1</c>.
            <p/>
            In the second example, the <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> returned 
            from <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, will contain a user spec in the <see cref="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs"/>
            dictionary, where the key will be <c>background</c> and the value will be <c>black</c>.
            <p/>
            If the call to <c>window.open</c> contains only non-standard, user specs,
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> returns <c>true</c>.
            <note>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> and <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> are both <c>true</c>,
            an application that does not recognize non-standard specs, can safely ignore the value
            of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/>, then wrap and present the new view (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>) 
            in a regular new window or tab, depending on the application's design.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost">
            <summary>
            Gets if the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event is the result of an HTML form with <c>target="_blank"</c> and
            <c>method="post"</c>.
            </summary>
            <seealso cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData"/>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled">
            <summary>
            Gets if navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, is already
            canceled to the new view (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>).
            </summary>
            <remarks>
            Navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, is canceled by default
            when <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of
            links with target <c>_blank</c> or the submission of HTML forms with 
            target <c>_blank</c> and method <c>GET</c>. What's more, users may also
            implement <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel requests to
            new views that are the result of JavaScript <c>window.open</c>
            (see <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>).
            <p/>
            You can still wrap the new view if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>, 
            but you must then manually load the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> to the new view.
            </remarks>
            <seealso cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>
            <seealso cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly">
            <summary>
            Gets if the <c>specs</c> specified to a Javascript <c>window.open</c> call,
            contain only non-standard, user defined specs.
            </summary>
            <remarks>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> and <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> are both <c>true</c>,
            an application that does not recognize non-standard specs, can safely ignore the value
            of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/>, then wrap and present the new view (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>) 
            in a regular new window or tab, depending on the application's design.
            </remarks>
            <example>
            The following <c>window.open</c> calls, will both fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> with 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> and <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> set to <c>true</c>:
            <code lang="JavaScript">
            window.open("file.html", "", "someFlag");
            </code>
            <code lang="JavaScript">
            window.open("file.html", "", "background=black");
            </code>
            In the first example, the <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> returned 
            from <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, will contain a user spec in the <see cref="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs"/>
            dictionary, where the key will be <c>someFlag</c> and the value will be <c>1</c>.
            <p/>
            In the second example, the <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> returned 
            from <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, will contain a user spec in the <see cref="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs"/>
            dictionary, where the key will be <c>background</c> and the value will be <c>black</c>.
            </example>
            <seealso cref="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs"/>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.HasUserSpecs">
            <summary>
            Gets if the <c>specs</c> specified to a Javascript <c>window.open</c> call,
            contain any non-standard, user defined specs.
            </summary>
            <example>
            The following <c>window.open</c> call, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> with 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.HasUserSpecs"/> and <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> set to <c>true</c>:
            <code lang="JavaScript">
            window.open("file.html", "", "top=50,left=50,background=black,width=640,height=480");
            </code>
            In this example, <c>top</c>, <c>left</c>, <c>width</c> and <c>height</c> are standard <i>specs</i>,
            but <c>background</c> is not. <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.HasUserSpecs"/> will be <c>true</c> but <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/>
            will be <c>false</c>.
            </example>
            <seealso cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/>
            <seealso cref="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs"/>
        </member>
        <member name="P:Awesomium.Core.ShowCreatedWebViewEventArgs.InitialPos">
            <summary>
            Gets the initial position indicated by the opener, for the new view.
            </summary>
        </member>
        <member name="T:Awesomium.Core.CrashedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.Crashed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CrashedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CrashedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.Crashed"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CrashedEventArgs.Status">
            <summary>
            Indicates the termination status.
            </summary>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameFailedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoadingFrameFailedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameFailedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
        </member>
        <member name="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorCode">
            <summary>
            Gets the error code that occurred when loading the frame.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
        </member>
        <member name="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription">
            <summary>
            Gets additional information for the error that occurred.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrameFailed"/>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.LoadingFrameEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.LoadingFrameEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="P:Awesomium.Core.LoadingFrameEventArgs.IsErrorPage">
            <summary>
            Indicates if the page being loaded, is an error page.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoadingFrame"/>
        </member>
        <member name="T:Awesomium.Core.CursorChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.CursorChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.CursorChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CursorChangedEventArgs.CursorType">
            <summary>
            Gets the current <see cref="P:Awesomium.Core.CursorChangedEventArgs.CursorType"/> indicated by the view.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CursorChangedEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to <c>false</c> (default), a <c>WebControl</c>
            will set a predefined cursor.
            </summary>
        </member>
        <member name="T:Awesomium.Core.BeginLoadingFrameEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.BeginLoadingFrameEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.BeginLoadingFrameEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> event.
            </summary>
            <seealso cref="E:Awesomium.Core.INavigationInterceptor.BeginNavigation"/>
        </member>
        <member name="P:Awesomium.Core.BeginLoadingFrameEventArgs.IsMainFrame">
            <summary>
            Indicates if this is the main frame of the page.
            </summary>
            <remarks>
            <note>
            When a page is loaded, the main frame is usually the first to start being loaded.
            </note>
            If <see cref="P:Awesomium.Core.BeginLoadingFrameEventArgs.IsMainFrame"/> is <c>true</c> during a 
            <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> event, it indicates a new navigation.
            When a <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> with <see cref="P:Awesomium.Core.BeginLoadingFrameEventArgs.IsMainFrame"/>
            set to <c>true</c> is not canceled, an <see cref="E:Awesomium.Core.INavigationInterceptor.BeginNavigation"/> event is fired right after,
            allowing you to cancel the navigation.
            <note type="caution">
            Note that the <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/> event is called on the I/O Thread. 
            Therefore, you should not make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.SurfaceInitializedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.Surface.Initialized"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.SurfaceInitializedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceInitializedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.Surface.Initialized"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceInitializedEventArgs.View">
            <summary>
            Gets the view the <see cref="T:Awesomium.Core.ISurface"/> instance has been assigned too.
            </summary>
            <remarks>
            A surface can only be used by a single view at a time. It can however be reused as
            many times as needed.
            <note type="caution">
            <see cref="T:Awesomium.Core.Surface"/> instances assigned to views that are being destroyed, 
            are automatically disposed to prevent memory leaks. You cannot reuse these surfaces.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.SurfaceUpdatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.Surface.Updated"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.SurfaceUpdatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.SurfaceUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.Surface.Updated"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceUpdatedEventArgs.DirtyRegion">
            <summary>
            Indicates the region of the surface that has been altered.
            </summary>
            <remarks>
            If you are rendering your <see cref="T:Awesomium.Core.ISurface"/> instance on
            a visual surface, this property indicates the region of your
            visual surface that should be invalidated. In certain scenarios,
            this can significantly improve performance.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.ToolTipChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.ToolTipChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ToolTipChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip">
            <summary>
            Gets the current tooltip reported by a <see cref="T:Awesomium.Core.IWebView"/>,
            for the web-page element currently under the cursor, or an empty string
            if a previous tooltip is no longer valid.
            </summary>
            <remarks>
            An empty string indicates that the user has moved the cursor outside
            an area or element that had a tooltip. Any previously displayed tooltips,
            should be closed when a <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event with
            an empty <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> is fired.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.ToolTipChangedEventArgs.Handled">
            <summary>
            Gets or sets if this event is handled by an application.
            If set to <c>false</c> (default), a <c>WebControl</c>
            may display its predefined tooltip.
            </summary>
        </member>
        <member name="T:Awesomium.Core.TitleChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.TitleChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.TitleChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.TitleChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.TitleChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.TitleChangedEventArgs.Title">
            <summary>
            Gets the title of the currently loaded page.
            </summary>
        </member>
        <member name="T:Awesomium.Core.UrlEventHandler">
            <summary>
            Represents the method that will handle events that provide a URL.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.UrlEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WebSelectionChangedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Awesomium.Core.WebSelectionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.WebSelectionEventArgs">
            <summary>
            Provides data for the <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSelectionEventArgs.Selection">
            <summary>
            Gets the updated selection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.EventHandling">
            <summary>
            Indicates the way an event will be handled by an application.
            </summary>
        </member>
        <member name="F:Awesomium.Core.EventHandling.Default">
            <summary>
            The event will not be handled by the application.
            Default handling will be applied.
            </summary>
        </member>
        <member name="F:Awesomium.Core.EventHandling.Modal">
            <summary>
            The event will be handled modally. This means that a response will
            be immediately provided before the event handler exits, using
            members of the <see cref="T:System.EventArgs"/> provided.
            </summary>
        </member>
        <member name="F:Awesomium.Core.EventHandling.NotModal">
            <summary>
            The event will be handled non-modally. This means that the
            event handler will exit and a response will be provided later,
            using available API.
            </summary>
        </member>
        <member name="T:Awesomium.Core.FocusedElementType">
            <summary>
            Indicates the type of element focused in the page loaded in an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.None">
            <summary>
            Nothing is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Text">
            <summary>
            A text-node is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Link">
            <summary>
            A link is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Input">
            <summary>
            An input element is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.TextInput">
            <summary>
            A text-input element is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.EditableContent">
            <summary>
            Some editable content is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Plugin">
            <summary>
            A plugin (eg, Flash) is focused.
            </summary>
        </member>
        <member name="F:Awesomium.Core.FocusedElementType.Other">
            <summary>
            Some other element is focused.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IWebViewIMEComposition">
            <summary>
            This service allows passing text input via IME and be notified of any
            IME-related events.
            </summary>
            <remarks>
            You can obtain this service by calling <see cref="M:System.IServiceProvider.GetService(System.Type)"/>
            on a <see cref="T:Awesomium.Core.IWebView"/> instance of type <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </remarks>
            <seealso cref="M:Awesomium.Core.WebView.GetService(System.Type)"/>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.ActivateIME(System.Boolean)">
            <summary>
            Lets the <see cref="T:Awesomium.Core.IWebView"/> know you will be passing
            text input via IME and will need to be notified of any
            IME-related events (caret position, user unfocusing textbox, etc.)
            </summary>
            <param name="activate">
            Specifies if IME should be activated.
            </param>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the current IME text composition.
            </summary>
            <param name="inputString">The string generated by your IME.</param>
            <param name="cursorPos">The current cursor position in your IME composition.</param>
            <param name="targetStart">The position of the beginning of the selection.</param>
            <param name="targetEnd">The position of the end of the selection.</param>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.ConfirmIMEComposition(System.String)">
            <summary>
            Confirms a current IME text composition.
            </summary>
            <param name="inputString">The string generated by your IME.</param>
        </member>
        <member name="M:Awesomium.Core.IWebViewIMEComposition.CancelIMEComposition">
            <summary>
            Cancels a current IME text composition.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebViewIMEComposition.Updated">
            <summary>
            Occurs whenever the user does something that may change
            the position, visibility, or type of the IME Widget. This event is only
            active when IME is active (see <see cref="M:Awesomium.Core.IWebViewIMEComposition.ActivateIME(System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebViewIMEComposition.RangeChanged">
            <summary>
            Occurs when the page changes the displayed range
            of the IME composition.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebViewIMEComposition.Cancel">
            <summary>
            Occurs when the page cancels the IME composition.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebViewIMEComposition.Range">
            <summary>
            Gets the displayed range of the IME composition.
            </summary>
        </member>
        <member name="T:Awesomium.Core.IWebView">
            <summary>
            Represents a native Awesomium web-view instance. All managed
            web-view wrappers, implement this interface.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.IWebView"/> exposes the full native web-view API,
            as well as .NET specific API added to web-views. It is provided for advanced
            coding and it allows you to override much of the .NET internal logic 
            and call on the native web-view directly.
            <note>
            Note that invoking members of the <see cref="T:Awesomium.Core.IWebView"/> interface, 
            will still not completely bypass .NET code. However, the <see cref="T:Awesomium.Core.IWebView"/>
            interface provides a <see cref="P:Awesomium.Core.IWebView.Instance"/> property that allows
            you to p/invoke directly to the Awesomium native library (see <see cref="F:Awesomium.Core.WebCore.DLLName"/>).
            This can be used for even more advanced scenarios, when needed.
            </note>
            <note type="caution">
            <b>Awesomium.NET</b> does not officially support calling to the Awesomium
            library directly (either using p/invoke or even through the <see cref="T:Awesomium.Core.IWebView"/>
            interface). The Awesomium team will provide no support for any issues that may occur,
            from using these features.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary>
            <returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.SaveImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to download an image at the specified coordinates in the page.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary>
            <param name="x">
            An x-coordinate within an image in the page.
            </param>
            <param name="y">
            A y-coordinate within an image in the page.
            </param>
            <remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            <p/>
            This method will attempt to download the image at the specified coordinates,
            directly from the server. In technology-specific WebControls, a <b><i>Save As</i></b>
            dialog will be shown in response to the download request.
            <p/>
            If you are using the <i>headless</i> <see cref="T:Awesomium.Core.WebView"/> component, you will have to 
            handle <see cref="E:Awesomium.Core.WebCore.Download"/> to either display a dialog or silently save
            the resource. More appropriately in this case, you should assign your implementation
            of <see cref="T:Awesomium.Core.IWebViewPresenter"/> to <see cref="P:Awesomium.Core.WebView.Presenter"/>, to handle 
            UI related events including <see cref="M:Awesomium.Core.IWebViewPresenter.ShowDownloadDialog(Awesomium.Core.DownloadEventArgs)"/>.
            </remarks>
            <returns>
            <c>true</c> if a download operation for an image at the specified coordinates,
            was successfully triggered; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.WebCore.Download"/>
            <seealso cref="M:Awesomium.Core.IWebViewPresenter.ShowDownloadDialog(Awesomium.Core.DownloadEventArgs)"/>
            <seealso cref="M:Awesomium.Core.IWebView.CopyImageAt(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext``1(Awesomium.Core.JavascriptExecutionContextMethod{``0},``0)">
            <summary>
            Creates an <i>asynchronous</i> <b>Javascript Execution Context</b> and executes the 
            <paramref name="method"/> associated with it.
            </summary>
            <typeparam name="T">
            The type of an object that the caller can pass to the specified <paramref name="method"/>.
            </typeparam>
            <param name="method">
            The method associated with the created <b>Javascript Execution Context</b>.
            </param>
            <param name="state">
            An object of type <typeparamref name="T"/> to be passed to the <paramref name="method"/>.
            </param>
            <remarks>
            This method creates an <i>asynchronous</i> <b>Javascript Execution Context</b> and immediately
            invokes the specified <paramref name="method"/> that is executed within the context.
            <p/>
            The major features provided by an <i>asynchronous</i> <b>Javascript Execution Context</b> to the 
            associated routine, are:
            <list type="bullet">
            <item>
            <description>
            Easy access to essential objects of the loaded web-page's current JavaScript environment,
            through <see cref="T:Awesomium.Core.Global"/>.
            </description>
            </item>
            <item>
            <description>
            Any <see cref="T:Awesomium.Core.JSObject"/> instance allocated within the associated <paramref name="method"/> either
            using the regular API or through dynamic expressions when using the Dynamic Language Runtime (DLR),
            is automatically disposed upon exiting the <paramref name="method"/>.
            <note type="note">
            To create a copy of a <see cref="T:Awesomium.Core.JSObject"/> that persists outside the JEC, use <see cref="M:Awesomium.Core.JSObject.Clone"/>.
            </note>
            </description>
            </item>
            Any binding errors or other exceptions that occur within a <b>Javascript Execution Context</b>,
            are silently handled and propagated to the JavaScript console.
            </list>
            <p/>
            <note type="note">
            Most of the Javascript-related events of a view and all handlers of a custom JavaScript method,
            are already executed in a <b>Javascript Execution Context</b>.
            </note>
            <note type="caution">
            Javascript-related events or a custom JavaScript method handlers that are called synchronously,
            are executed in a <b>synchronous</b> Javascript Execution Context. Creating an asynchronous
            Javascript Execution Context from within a synchronous one, is not allowed.
            </note>
            <p/>
            <b>For details, read the following articles:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            You cannot create an <i>asynchronous</i> Javascript Execution Context from within a <i>synchronous</i>
            Javascript Execution Context.
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext(Awesomium.Core.JavascriptExecutionContextMethod)"/>
            <seealso href="http://wiki.awesomium.net/javascript/introduction.html">Introduction to JavaScript Integration</seealso>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext(Awesomium.Core.JavascriptExecutionContextMethod)">
            <summary>
            Creates an <i>asynchronous</i> <b>Javascript Execution Context</b> and executes the 
            <paramref name="method"/> associated with it.
            </summary>
            <param name="method">
            The method associated with the created <b>Javascript Execution Context</b>.
            </param>
            <remarks>
            This method creates an <i>asynchronous</i> <b>Javascript Execution Context</b> and immediately
            invokes the specified <paramref name="method"/> that is executed within the context.
            <p/>
            The major features provided by an <i>asynchronous</i> <b>Javascript Execution Context</b> to the 
            associated routine, are:
            <list type="bullet">
            <item>
            <description>
            Easy access to essential objects of the loaded web-page's current JavaScript environment,
            through <see cref="T:Awesomium.Core.Global"/>.
            </description>
            </item>
            <item>
            <description>
            Any <see cref="T:Awesomium.Core.JSObject"/> instance allocated within the associated <paramref name="method"/> either
            using the regular API or through dynamic expressions when using the Dynamic Language Runtime (DLR),
            is automatically disposed upon exiting the <paramref name="method"/>.
            <note type="note">
            To create a copy of a <see cref="T:Awesomium.Core.JSObject"/> that persists outside the JEC, use <see cref="M:Awesomium.Core.JSObject.Clone"/>.
            </note>
            </description>
            </item>
            Any binding errors or other exceptions that occur within a <b>Javascript Execution Context</b>,
            are silently handled and propagated to the JavaScript console.
            </list>
            <p/>
            <note type="note">
            Most of the Javascript-related events of a view and all handlers of a custom JavaScript method,
            are already executed in a <b>Javascript Execution Context</b>.
            </note>
            <note type="caution">
            Javascript-related events or a custom JavaScript method handlers that are called synchronously,
            are executed in a <b>synchronous</b> Javascript Execution Context. Creating an asynchronous
            Javascript Execution Context from within a synchronous one, is not allowed.
            </note>
            <p/>
            <b>For details, read the following articles:</b>
            <list type="bullet">
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/introduction.html">Introduction to JavaScript Integration</a>
            </description>
            </item>
            <item>
            <description>
            <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            You cannot create an <i>asynchronous</i> Javascript Execution Context from within a <i>synchronous</i>
            Javascript Execution Context.
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext``1(Awesomium.Core.JavascriptExecutionContextMethod{``0},``0)"/>
            <seealso href="http://wiki.awesomium.net/javascript/introduction.html">Introduction to JavaScript Integration</seealso>
            <seealso href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</seealso>
        </member>
        <member name="M:Awesomium.Core.IWebView.LoadURL(System.Uri)">
            <summary>
            [This method is deprecated and will be removed in future versions of Awesomium.NET. Please use the <see cref="P:Awesomium.Core.IWebView.Source"/> property instead.]
            </summary>
            <exclude/>
        </member>
        <member name="M:Awesomium.Core.IWebView.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary>
            <param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Stop">
            <summary>
            Stops the current navigation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary>
            <param name="ignoreCache">
            Indicates if cached resources should be ignored when reloading.
            When this is <c>true</c>, all resources will be reloaded from the server.
            </param>
            <returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary>
            <returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary>
            <returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.IWebView.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the view to certain pixel dimensions.
            </summary>
            <param name="width">
            The new width in pixels.
            </param>
            <param name="height">
            The new height in pixels.
            </param>
            <remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="P:Awesomium.Core.IWebView.Width"/>
            <seealso cref="P:Awesomium.Core.IWebView.Height"/>
            <seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.FocusView">
            <summary>
            Gives the view the appearance of input focus.
            </summary>
            <remarks>
            You should call this whenever the view gains focus.
            <note>
            If you fail to see a blinking caret when you select a text-box,
            it's usually because you forgot to call this method.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
            <seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.UnfocusView">
            <summary>
            Remove the appearance of input focus. 
            </summary>
            <remarks>
            You should call this whenever the view loses focus.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
            <seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.ZoomIn">
            <summary>
            Zooms into the page by <c>20%</c>.
            </summary>
            <remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/>
            <seealso cref="P:Awesomium.Core.IWebView.Zoom"/>
            <seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/>
            <seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.ZoomOut">
            <summary>
            Zooms out the page by <c>20%</c>.
            </summary>
            <remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/>
            <seealso cref="P:Awesomium.Core.IWebView.Zoom"/>
            <seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/>
            <seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.ResetZoom">
            <summary>
            Resets the zoom level for the currently loaded host.
            </summary>
            <remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="P:Awesomium.Core.IWebView.Zoom"/>
            <seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/>
            <seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/>
            <seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-move event to the view.
            </summary>
            <param name="x">
            The x-coordinate of the current mouse position.
            </param>
            <param name="y">
            The y-coordinate of the current mouse position.
            </param>
            <remarks>
            Coordinates should be localized to the view 
            and should be defined in pixels.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-down event to the view, using the last mouse-move coordinates.
            </summary>
            <param name="button">
            Specifies the button that was pressed.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-up event to the view, using the last mouse-move coordinates.
            </summary>
            <param name="button">
            Specifies the button that was pressed.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-wheel event to the view.
            </summary>
            <param name="scrollVert">
            The amount of pixels to scroll vertically by.
            </param>
            <param name="scrollHorz">
            The amount of pixels to scroll horizontally by.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Passes a keyboard event to the view.
            </summary>
            <param name="keyEvent">
            An <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance representing the keyboard event to pass.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.InjectTouchEvent(Awesomium.Core.WebTouchEvent)">
            <summary>
            Passes a multi-touch event to the view.
            </summary>
            <param name="touchEvent">
            A <see cref="T:Awesomium.Core.WebTouchEvent"/> instance representing the multi-touch event to pass.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary>
            <returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns>
            <seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>
            <seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <param name="name">
            The name of the object as it will appear in JavaScript.
            </param>
            <returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns>
            <remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="O:Awesomium.Core.JSObject.Bind"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note>
            You can create global Javascript objects on a view, as soon as it goes <i>live</i>. (<see cref="P:Awesomium.Core.IWebView.IsLive"/> is
            <c>true</c>). On technology specific <c>WebControls</c>, you should wait for the <see cref="E:Awesomium.Core.IWebView.NativeViewInitialized"/>
            event. <see cref="T:Awesomium.Core.WebView"/> components go live immediately after creation.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="name"/> is reserved. It either represents an HTML DOM object, 
            or an object variable already available in the page. Use <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/> 
            after <see cref="E:Awesomium.Core.IWebView.DocumentReady"/>, to obtain this object.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary>
            <param name="script">
            The string of JavaScript to execute.
            </param>
            <param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param>
            <returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)">
            <summary>
            This method should be called as the result of a user selecting an item
            in a drop-down (popup) menu, when you handle <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            yourself (see <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>).
            </summary>
            <param name="itemIndex">
            The index of the item selected. Item index starts
            at <c>0</c>. You can pass <c>-1</c> as a shortcut for
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            <seealso cref="T:Awesomium.Core.PopupMenuEventArgs"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CancelPopupMenu">
            <summary>
            This method should be called as the result of a user canceling a 
            drop-down (popup) menu, when you handle <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            yourself (see <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            <seealso cref="T:Awesomium.Core.PopupMenuEventArgs"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary>
            <param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param>
            <param name="config">
            The configuration settings to use.
            </param>
            <returns>
            Returns a unique request identifier that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified output directory <paramref name="outputDirectory"/>, does not exist.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="outputDirectory"/> is a zero-length string, contains only white space, or contains one
            or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. -OR- 
            The system could not retrieve the absolute path.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permissions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="outputDirectory"/> is <c>null</c> (<c>Nothing</c> in Visual Basic).
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="outputDirectory"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\").
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The acquired full path to the specified <paramref name="outputDirectory"/>, exceeds the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters.
            </exception>
            <seealso cref="T:Awesomium.Core.PrintConfig"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            <seealso cref="E:Awesomium.Core.IWebView.Printing"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
            <seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)">
            <summary>
            This method should be called as the result of a user selecting files in
            a file-chooser dialog, when you are handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>).
            </summary>
            <param name="files">
            An array of file-paths that the user selected. If the user canceled the dialog, 
            you should pass an empty array.
            </param>
            <param name="shouldWriteFiles">
            Whether or not this was a Save File dialog (see <see cref="P:Awesomium.Core.FileDialogEventArgs.Mode"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            <seealso cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)">
            <summary>
            This method should be called as the result of a user supplying
            their credentials in a login dialog, when you are handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>).
            </summary>
            <param name="requestId">
            The id of the request that was handled (see 
            <see cref="P:Awesomium.Core.WebLoginDialogInfo.RequestId"/>).
            </param>
            <param name="username">
            The username supplied.
            </param>
            <param name="password">
            The password supplied.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.DidOverrideCertificateError">
            <summary>
            This method should be called if you want to ignore an SSL certificate error, 
            when you are handling the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event with 
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>).
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
            <seealso cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.RequestPageInfo">
            <summary>
            Issues a request for the currently loaded page's security
            info. Information will be retrieved through the 
            <see cref="E:Awesomium.Core.IWebView.ShowPageInfo"/> event.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Core.IWebView.ReduceMemoryUsage">
            <summary>
            Forces V8 to release as much memory as possible (collects garbage, dumps
            cached structures, etc) and also clears WebKit cache. This helps to
            reduce memory accumulated within the process associated with this view.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="P:Awesomium.Core.WebConfig.ReduceMemoryUsageOnNavigation"/>
        </member>
        <member name="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)">
            <summary>
            This method should be called as the result of a user canceling
            a login dialog, when you are handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (see <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>).
            </summary>
            <param name="requestId">
            The id of the request that was handled (see <see cref="P:Awesomium.Core.WebLoginDialogInfo.RequestId"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.Disposed">
            <summary>
            Occurs when an instance of <see cref="T:Awesomium.Core.IWebView"/> has been disposed.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary>
            <remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.SelectionComplete">
            <summary>
            Occurs when selecting content in the current page, completes.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.InitializeView">
            <summary>
            Occurs when the underlying web-view of a <c>WebControl</c>is about to be instantiated and wrapped or, 
            for child views created in response to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, the native view assigned to 
            the <c>NativeView</c> property of a <c>WebControl</c>, is about to be wrapped.
            </summary>
            <remarks>
            This is the last moment for setting any of the following properties, on a <c>WebControl</c>:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Properties
            </description>
            </listheader>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            These properties are implemented as read-write properties on <c>WebControls</c> and
            can only be set before the underlying web-view of a <c>WebControl</c> is created,
            or a previously created native view is wrapped (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            <p/>
            Right after this event is fired, the <c>WebControl</c> goes live (<see cref="P:Awesomium.Core.IWebView.IsLive"/>
            is set to <c>true</c>) and these properties can no longer be changed.
            <note type="caution">
            Attempting to set some of the above properties after a <c>WebControl</c> is live,
            is usually silently ignored but may also throw an exception. For details, refer to the
            documentation of the properties.
            </note>
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately at creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.NativeViewInitialized">
            <summary>
            Occurs when the native underlying web-view of a <c>WebControl</c>, has been initialized.
            </summary>
            <remarks>
            This event occurs right after <see cref="P:Awesomium.Core.IWebView.IsLive"/> is set to <c>true</c> and 
            also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately after creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.WindowClose">
            <summary>
            Occurs when Javascript in the page calls <c>window.close</c>.
            </summary>
            <remarks>
            You can ignore this event, or respond depending on the current context.
            For example, if the page is open in the main window of an application
            or a tab, browsers display a confirmation dialog asking the user if he
            wants to acknowledge the page's request.
            <p/>
            If the page is open in a popup window, browsers usually respect the
            request and close the popup window, without any confirmation from the user.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowJavascriptDialog">
            <summary>
            Occurs when a JavaScript call that requires the creation of a modal dialog, is called.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.Printing">
            <summary>
            Occurs when a printing operation has started.
            </summary>
            <remarks>
            This event occurs:
            <list type="bullet">
            <item>
            <description>
            On any <see cref="T:Awesomium.Core.IWebView"/> instance, right after a call to <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>.
            </description>
            </item>
            <item>
            <description>
            On technology specific <c>WebControls</c>, right after a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> 
            event that has not been handled, or canceled (either programmatically or by canceling the 
            <i>Select Folder</i> dialog).
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            <seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.JavascriptRequest">
            <summary>
            Occurs when a JavaScript client sends a management request through
            <see cref="T:global.OSMJIF"/> (such as <see cref="M:global.OSMJIF.minimize(global.Multiple)"/>, 
            <see cref="M:global.OSMJIF.maximize(global.Multiple)"/> etc.).
            </summary>
            <remarks>
            The request sent is identified by <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.Request"/>.
            <p/>
            A request token can be passed by JavaScript clients to the native application and
            it's received through <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs.RequestToken&quot;]/remarks/node()"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs&quot;]/remarks/node()"/>
            <p/>
            Unless the request originates from a page that has been created by the application
            (such as pages provided though a <see cref="T:Awesomium.Core.Data.DataSource"/>), applications should be careful
            when handling management requests. For example, a <see cref="M:global.OSMJIF.exit(global.Multiple)"/>
            command asks from the native application to exit immediately. The <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            is provided so that native applications can validate such requests.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.JavascriptMessage">
            <summary>
            Occurs when a JavaScript client sends a message through <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            or <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>.
            </summary>
            <remarks>
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> and the asynchronous
            <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>, 
            can be used instead of creating and binding to custom methods of a global JavaScript object
            created with <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>.
            <p/>
            Unlike regular <b>synchronous</b> custom JavaScript methods created by the managed application
            through <see cref="O:Awesomium.Core.JSObject.Bind"/> or using the Dynamic Language Runtime (DLR),
            <b><see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> allows callers to pass 
            JavaScript objects to the <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> array, even though the method 
            is called synchronously</b> (see <a href="http://wiki.awesomium.net/javascript/sync_async_js_api.html">Synchronous &amp; Asynchronous API</a>).
            <p/>
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> are being serialized,
            any function members (methods) are stripped out and they are deserialized to the hosting
            application as local JSObjects. Nevertheless, the objects are still passed by reference.
            <b>Any changes applied to passed objects in the handler of a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/>
            event, will be reflected back to the original remote instances when <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            returns</b>.
            <p/>
            <note type="note">
            Function members (methods) of objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>,
            are being stripped out when the object is passed to the hosting application (calling them from the hosting
            application would cause a deadlock). However this does not affect the original client-side instances.
            </note>
            <note type="caution">
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>, are serialized
            and deserialized using JSON. Objects whose structure includes a circular reference, cannot be passed.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.AddressChanged">
            <summary>
            Occurs when the page URL has changed, usually after navigation to a new
            URL has started.
            </summary>
            <seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed.
            </summary>
            <remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            <note>
            When setting <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>
            to handle tooltips yourself, you should expect an empty string passed
            to <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> and in response to it,
            hide your tooltip (if any).
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary>
            <remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.ConsoleMessage">
            <summary>
            Occurs when a message is added to the console on the page.
            This is usually the result of a JavaScript error being encountered
            on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link).
            </summary>
            <remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance creates a new child view 
            (usually the result of <c>window.open</c>, clicking on a link with <c>target="_blank"</c> or submitting a <c>form</c>
            with <c>target="_blank"</c>). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <p/>
            <note>
            The <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event must always be handled in your application to wrap views created by
            Awesomium in response to users clicking a link or JavaScript <c>window.open</c> calls.
            <p/>
            If you don't handle this event, the unused web-view instance will be immediately destroyed.
            </note>
            There are a number of facts you need to take into consideration, before taking the appropriate actions in response 
            to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. The following list presents these facts and some general suggestions:
            <list type="bullet">
            <item>
            <description>
            The created child view, has the same type (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>) and is assigned to the same session
            (see <see cref="P:Awesomium.Core.IWebView.WebSession"/>) as its parent (opener) view. Therefore, you should not attempt to set these 
            properties if you are wrapping the new child view with a technology specific <c>WebControl</c>.
            </description>
            </item>
            <item>
            <description>
            In order to maintain the relationship with their parent view, child views execute and render under 
            the same process (<c>awesomium_process</c>) as their parent view. If for any reason the child process crashes,
            all views related to it will be affected.
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of a Javascript <c>window.open</c>,
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b> the created child view instance
            (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to maintain the parent-child window relationship (the child page can access
            the parent through the <c>window.opener</c> property; the parent can manipulate the child through the
            <c>window</c> object returned from the <c>window.open</c> call, which is why <c>window.open</c> was most
            probably used in the first place).
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of an HTML form with <c>target="_blank"</c> and
            <c>method="post"</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b>
            the created child view instance (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to allow <c>POST</c> data be properly passed.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>, it most possibly indicates that the event is the result of
            a user clicking on a link with <c>target="_blank"</c>. Since maintaining a parent-child relationship is not important
            in this scenario, <b>you should cancel the event</b> by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> (this tells the core 
            to destroy the unused web-view instance), then create a new <see cref="T:Awesomium.Core.WebView"/> (using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>)
            or <c>WebControl</c> and navigate to the provided <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any. This allows you to take advantage
            of the isolated process architecture of Awesomium and let each view be rendered in a separate process.
            <note type="caution">
            Failing to cancel the event when you are not wrapping the new child view instance, will keep the native instance alive until 
            the <see cref="T:Awesomium.Core.WebCore"/> is shut down. This can result in numerous unused views being spawned, but never actually used.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, 
            is already queued on the created child view. Therefore you should not attempt to set the <see cref="P:Awesomium.Core.IWebView.Source"/> when you 
            are wrapping the child view, as this would again break the parent-child relationship (<c>window.opener</c> on the child page and the 
            <c>window</c> object returned from the <c>window.open</c> call on the parent page, will be rendered invalid) or prevent passing
            <c>POST</c> data to the server respectively.
            <note>
            Also note that since navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, has already started by the moment the child
            view is wrapped, <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> will not be fired for the main frame of the new <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            </note>
            </description>
            </item>
            <item>
            <description>
            Navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, is blocked on the created child view, when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> and 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>. As applications will generally choose to cancel the event and create a new <see cref="T:Awesomium.Core.IWebView"/> 
            instance to navigate to the target URL (or even choose to navigate to the target URL on the same <see cref="T:Awesomium.Core.IWebView"/> instance that 
            fired the event), Awesomium.NET does this to prevent <i>false hits</i> to the target URL, that would have occurred by the time the 
            event handler returns and the unused child view instance, is destroyed. What's more, users may also implement 
            <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel requests to new views that are the result of JavaScript <c>window.open</c>
            (see <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>). Therefore, if your application chooses to wrap the created 
            child view even though it is most possibly the result of a user clicking on a link with <c>target="_blank"</c> or navigation
            to the target URL has already been canceled by an <see cref="T:Awesomium.Core.IResourceInterceptor"/> (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>), 
            you should in this scenario only, after wrapping the child view, set the <see cref="P:Awesomium.Core.IWebView.Source"/> property to 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> to resume navigation to the target URL.
            <note>
            Applications can occasionally choose to wrap a child view even when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>false</c> or 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>, if they want to apply a <i>single process</i> architecture where all new 
            views created will be rendered by the same <c>awesomium_process</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> returns a valid, initialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
            instance. This may be initialized to default values if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>false</c>, or reflect the <i>specs</i> 
            specified to the <c>window.open</c> call, if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>.
            </description>
            </item>
            <item>
            <description>
            If <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, applications should generally wrap and present the native view in a new popup application
            window. This window should have the size and location specified in <see cref="P:Awesomium.Core.JSWindowOpenSpecs.InitialPosition"/>, <b>if this is not
            empty</b>. They should also respect the rest of the specs available through <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, when creating
            the new application window that will host the child view.
            <note>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is always also <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> will only be <c>true</c>, if <i>specs</i> were specified to the <c>window.open</c> call. These can be
            standard specs such as <c>width=400,height=400,menubar=no</c>, only user defined, non-standard specs such as <c>background=black</c>
            or a combination of both. These specs are available through the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> property.
            </description>
            </item>
            <item>
            <description>
            If only user defined, non-standard <i>specs</i> were specified to the <c>window.open</c> call, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will
            be <c>true</c>. In this scenario, if your application does not recognize user defined, non-standard specs, it can ignore the 
            value of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> all together and wrap the new child view in a regular new application window, tab or control.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData"/> returns an array of <see cref="T:Awesomium.Core.UploadElement"/>,
            representing the <i>upload</i> data passed to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> using <c>POST</c>.
            </description>
            </item>
            <item>
            <description>
            Finally note that only an empty <i>name</i> parameter or a <c>_blank</c> target attribute specified as the <i>name</i> parameter 
            in a <c>window.open</c> call or in a link or <c>form</c>, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. Other target 
            attributes (such as <c>_top</c>), passed to either a <c>window.open</c> call, a link or a <c>form</c>, are handled by Awesomium internally.
            </description>
            </item>
            </list>
            <note type="caution">
            Several members of <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>, may not return valid values if Javascript is disabled.
            For details, read the documentation of: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>.
            </note>
            Given the facts and suggestions presented before, if your application is about to wrap the created child view, the following 
            table shows the methods available, to wrap the created child view using any of the <b>Awesomium.NET</b> web-view components:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Method and Notes
            </description>
            </listheader>
            <item>
            <term>
            Core
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Pass <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>
            to wrap the new view with a <see cref="T:Awesomium.Core.WebView"/>.
            </description>
            </item>
            <item>
            <description>
            For <i>windowed</i> views (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>), you should now assign a <see cref="P:Awesomium.Core.WebView.ParentWindow"/>.
            <i>Offscreen</i> views have a <see cref="T:Awesomium.Core.BitmapSurface"/> assigned by default but depending on your application's design,
            you may have to assign a new <see cref="T:Awesomium.Core.ISurface"/> by either monitoring the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event, 
            or setting the <see cref="P:Awesomium.Core.IWebView.Surface"/> property.
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Core.WebView"/> to match its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Controls.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Controls.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Controls.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by binding the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property
            in XAML (see examples in the <b>Awesomium.NET Samples</b> solution available with the SDK), or by monitoring the 
            <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Controls.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Forms.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Forms.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Forms.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by assigning the <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property
            right after the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is created (see examples in the <b>Awesomium.NET Samples</b> solution available 
            with the SDK),or by monitoring the <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Forms.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            The following example illustrates handling the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event in a WPF application that uses
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> controls. In this example, we create a <i>ChildWindow</i> window
            that hosts a <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This window and its hosted <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            will be used to wrap and present the child view passed to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, or navigate to the
            target URL, if <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of a link with <c>target="_blank"</c>.
            <p/>
            Below is the XAML of our <b>ChildWindow</b>.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WebControlSample.ChildWindow" 
                x:Name="childWindow"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                Title="{Binding Title, ElementName=webControl}" 
                Height="480" 
                Width="600">
                <Window.Resources>
                    <!-- We do not need to set any WebPreferences or DataSources 
                    on this provider. It uses the same DataPath as the provider in
                    MainWindow, therefore, this provider will provide the same session,
                    already created by the WebSessionProvider in MainWindow. -->
                    <awe:WebSessionProvider x:Key="mySession" DataPath=".\Cache" />
                </Window.Resources>
                <Grid>
                    <!-- Note that the WebSession assigned to this WebControl, will
                         be effectively ignored when this WebControl wraps a created
                         child view. Child views share the same session as their parent
                         (opener) view. -->
                    <awe:WebControl 
                        Name="webControl" 
                        WebSession="{Binding Source={StaticResource mySession}}"
                        Source="{Binding Source, ElementName=childWindow}"
                        NativeView="{Binding NativeView, ElementName=childWindow}" />
                </Grid>
            </Window>
            ]]>
            </code>
            This is the code-behind of the <b>ChildWindow</b>:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for ChildWindow.xaml
                /// </summary>
                public partial class ChildWindow : Window
                {
                    public ChildWindow()
                    {
                        InitializeComponent();
            
                        // In this example, ShowCreatedWebView of all WebControls, 
                        // is handled by a common handler.
                        webControl.ShowCreatedWebView += App.OnShowNewView;
                    }
            
                    protected override void OnClosed( EventArgs e )
                    {
                        base.OnClosed( e );
            
                        // Destroy the WebControl and its underlying view.
                        webControl.Dispose();
                    }
            
                    // This will be set to the target URL, when this ChildWindow does not
                    // host a created child view. The WebControl, is bound to this property.
                    public Uri Source
                    {
                        get { return this.GetValue( SourceProperty ) as Uri; }
                        set { SetValue( SourceProperty, value ); }
                    }
            
                    public static readonly DependencyProperty SourceProperty = 
                        DependencyProperty.Register( "Source",
                        typeof( Uri ), typeof( ChildWindow ),
                        new UIPropertyMetadata( null ) );
            
                    // This will be set to the created child view that the WebControl will wrap,
                    // when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    // is bound to this property.
                    public IntPtr NativeView
                    {
                        get { return (IntPtr)this.GetValue( ChildWindow.NativeViewProperty ); }
                        internal set { this.SetValue( ChildWindow.NativeViewPropertyKey, value ); }
                    }
            
                    private static readonly DependencyPropertyKey NativeViewPropertyKey = 
                        DependencyProperty.RegisterReadOnly( "NativeView",
                        typeof( IntPtr ), typeof( ChildWindow ),
                        new FrameworkPropertyMetadata( IntPtr.Zero ) );
            
                    public static readonly DependencyProperty NativeViewProperty =
                        NativeViewPropertyKey.DependencyProperty;
            
                }
            }
            ]]>
            </code>
            <code lang="VB.NET">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            
            Namespace WebControlSample
                ''' <summary>
                ''' Interaction logic for ChildWindow.xaml
                ''' </summary>
                Partial Public Class ChildWindow
                    Inherits Window
            
                    Public Sub New()
                        InitializeComponent()
            
                        ' In this example, ShowCreatedWebView of all WebControls, 
                        ' is handled by a common handler.
                        AddHandler webControl.ShowCreatedWebView, AddressOf App.OnShowNewView
                    End Sub
            
                    Protected Overrides Sub OnClosed(ByVal e As EventArgs)
                        MyBase.OnClosed(e)
            
                        ' Destroy the WebControl and its underlying view.
                        webControl.Dispose()
                    End Sub
            
                    ' This will be set to the target URL, when this ChildWindow does not
                    ' host a created child view. The WebControl, is bound to this property.
                    Public Property Source() As Uri
                        Get
                            Return TryCast(Me.GetValue(SourceProperty), Uri)
                        End Get
                        Set(ByVal value As Uri)
                            SetValue(SourceProperty, value)
                        End Set
                    End Property
            
                    Public Shared ReadOnly SourceProperty As DependencyProperty =
                        DependencyProperty.Register("Source", GetType(Uri),
                        GetType(ChildWindow), New UIPropertyMetadata(Nothing))
            
                    ' This will be set to the created child view that the WebControl will wrap,
                    ' when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    ' is bound to this property.
                    Public Property NativeView() As IntPtr
                        Get
                            Return CType(Me.GetValue(ChildWindow.NativeViewProperty), IntPtr)
                        End Get
                        Friend Set(ByVal value As IntPtr)
                            Me.SetValue(ChildWindow.NativeViewPropertyKey, value)
                        End Set
                    End Property
            
                    Private Shared ReadOnly NativeViewPropertyKey As DependencyPropertyKey =
                        DependencyProperty.RegisterReadOnly("NativeView", GetType(IntPtr),
                        GetType(ChildWindow), New FrameworkPropertyMetadata(IntPtr.Zero))
            
                    Public Shared ReadOnly NativeViewProperty As DependencyProperty =
                        NativeViewPropertyKey.DependencyProperty
                End Class
            End Namespace
            ]]>
            </code>
            Below is the common <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> handler, defined in our <see cref="T:System.Windows.Application"/> object
            code-behind:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            using Awesomium.Windows.Controls;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for App.xaml
                /// </summary>
                public partial class App : Application
                {
                    private void Application_Exit( object sender, ExitEventArgs e )
                    {
                        // Shutdown the Core.
                        WebCore.Shutdown();
                    }
            
                    // This static handler, will handle the ShowCreatedWebView event for both the 
                    // WebControl of our main application window, as well as for any other windows
                    // hosting WebControls.
                    internal static void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
                    {
                        WebControl webControl = sender as WebControl;
            
                        if ( webControl == null )
                            return;
            
                        if ( !webControl.IsLive )
                            return;
            
                        // Create an instance of our application's child window, that will
                        // host the new view instance, either we wrap the created child view,
                        // or we let the WebControl create a new underlying web-view.
                        ChildWindow newWindow  = new ChildWindow();
            
                        // Treat popups differently. If IsPopup is true, the event is always
                        // the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
                        // Our application does not recognize user defined, non-standard specs. 
                        // Therefore child views opened with non-standard specs, will not be presented as 
                        // popups but as regular new windows (still wrapping the child view however -- se below).
                        if ( e.IsPopup && !e.IsUserSpecsOnly )
                        {
                            // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
                            Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();
            
                            // Set the created native view as the underlying view of the
                            // WebControl. This will maintain the relationship between
                            // the parent view and the child, usually required when the new view
                            // is the result of 'window.open' (JS can access the parent window through
                            // 'window.opener'; the parent window can manipulate the child through the 'window'
                            // object returned from the 'window.open' call).
                            newWindow.NativeView = e.NewViewInstance;
                            // Do not show in the taskbar.
                            newWindow.ShowInTaskbar = false;
                            // Set a border-style to indicate a popup.
                            newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow;
                            // Set resizing mode depending on the indicated specs.
                            newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;
            
                            // If the caller has not indicated a valid size for the new popup window,
                            // let it be opened with the default size specified at design time.
                            if ( ( screenRect.Width > 0 ) && ( screenRect.Height > 0 ) )
                            {
                                // Assign the indicated size.
                                newWindow.Width = screenRect.Width;
                                newWindow.Height = screenRect.Height;
                            }
            
                            // Show the window.
                            newWindow.Show();
            
                            // If the caller has not indicated a valid position for the new popup window,
                            // let it be opened in the default position specified at design time.
                            if ( ( screenRect.Y > 0 ) && ( screenRect.X > 0 ) )
                            {
                                // Move it to the indicated coordinates.
                                newWindow.Top = screenRect.Y;
                                newWindow.Left = screenRect.X;
                            }
                        }
                        else if ( e.IsWindowOpen || e.IsPost )
                        {
                            // No specs or only non-standard specs were specified, but the event is still 
                            // the result of 'window.open', or of an HTML form with tagret="_blank" and method="post". 
                            // We will open a normal window but we will still wrap the new native child view, 
                            // maintaining its relationship with the parent window.
                            newWindow.NativeView = e.NewViewInstance;
                            // Show the window.
                            newWindow.Show();
                        }
                        else
                        {
                            // The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
                            // and method="post"., therefore it's most probably the result of a link with target='_blank'.
                            // We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
                            // create its own underlying view. Setting Cancel to true tells the core to destroy the 
                            // created child view.
                            //
                            // Why don't we always wrap the native view passed to ShowCreatedWebView?
                            //
                            // - In order to maintain the relationship with their parent view,
                            // child views execute and render under the same process (awesomium_process)
                            // as their parent view. If for any reason this child process crashes,
                            // all views related to it will be affected. When maintaining a parent-child 
                            // relationship is not important, we prefer taking advantage of the isolated process 
                            // architecture of Awesomium and let each view be rendered in a separate process.
                            e.Cancel = true;
                            // Note that we only explicitly navigate to the target URL, when a new view is 
                            // about to be created, not when we wrap the created child view. This is because 
                            // navigation to the target URL (if any), is already queued on created child views. 
                            // We must not interrupt this navigation as we would still be breaking the parent-child
                            // relationship.
                            newWindow.Source = e.TargetURL;
                            // Show the window.
                            newWindow.Show();
                        }
                    }
                }
            }
            ]]>
            </code>
            <code lang="VB">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            Imports Awesomium.Windows.Controls
            
            Namespace WebControlSample
            	''' <summary>
            	''' Interaction logic for App.xaml
            	''' </summary>
            	Partial Public Class App
            		Inherits Application
            
            		Private Sub Application_Exit(ByVal sender As Object, ByVal e As ExitEventArgs)
            			' Shutdown the Core.
            			WebCore.Shutdown()
            		End Sub
            
            		' This static handler, will handle the ShowCreatedWebView event for both the 
            		' WebControl of our main application window, as well as for any other windows
            		' hosting WebControls.
            		Friend Shared Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            			Dim webControl As WebControl = TryCast(sender, WebControl)
            
            			If webControl Is Nothing Then Return
            
            			If Not webControl.IsLive Then Return
            
            			' Create an instance of our application's child window, that will
            			' host the new view instance, either we wrap the created child view,
            			' or we let the WebControl create a new underlying web-view.
            			Dim newWindow As New ChildWindow()
            
            			' Treat popups differently. If IsPopup is true, the event is always
            			' the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
            			' Our application does not recognize user defined, non-standard specs. 
            			' Therefore child views opened with non-standard specs, will not be presented as 
            			' popups but as regular new windows (still wrapping the child view however -- se below).
            			If e.IsPopup AndAlso (Not e.IsUserSpecsOnly) Then
            				' JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
            				Dim screenRect As Int32Rect = e.Specs.InitialPosition.GetInt32Rect()
            
            				' Set the created native view as the underlying view of the
            				' WebControl. This will maintain the relationship between
            				' the parent view and the child, usually required when the new view
            				' is the result of 'window.open' (JS can access the parent window through
            				' 'window.opener'; the parent window can manipulate the child through the 'window'
            				' object returned from the 'window.open' call).
            				newWindow.NativeView = e.NewViewInstance
            				' Do not show in the taskbar.
            				newWindow.ShowInTaskbar = False
            				' Set a border-style to indicate a popup.
            				newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow
            				' Set resizing mode depending on the indicated specs.
            				newWindow.ResizeMode = If(e.Specs.Resizable, ResizeMode.CanResizeWithGrip, ResizeMode.NoResize)
            
            				' If the caller has not indicated a valid size for the new popup window,
            				' let it be opened with the default size specified at design time.
            				If (screenRect.Width > 0) AndAlso (screenRect.Height > 0) Then
            					' Assign the indicated size.
            					newWindow.Width = screenRect.Width
            					newWindow.Height = screenRect.Height
            				End If
            
            				' Show the window.
            				newWindow.Show()
            
            				' If the caller has not indicated a valid position for the new popup window,
            				' let it be opened in the default position specified at design time.
            				If (screenRect.Y > 0) AndAlso (screenRect.X > 0) Then
            					' Move it to the indicated coordinates.
            					newWindow.Top = screenRect.Y
            					newWindow.Left = screenRect.X
            				End If
            			ElseIf (e.IsWindowOpen OrElse e.IsPost) Then
            				' No specs or only non-standard specs were specified, but the event is still 
            				' the result of 'window.open' or of an HTML form with tagret="_blank" and method="post".
            				' We will open a normal window but we will still wrap the new native child view, 
            				' maintaining its relationship with the parent window.
            				newWindow.NativeView = e.NewViewInstance
            				' Show the window.
            				newWindow.Show()
            			Else
            				' The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
            				' and method="post"., therefore it's most probably the result of a link with target='_blank'.
            				' We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
            				' create its own underlying view. Setting Cancel to true tells the core to destroy the 
            				' created child view.
            				'
            				' Why don't we always wrap the native view passed to ShowCreatedWebView?
            				'
            				' - In order to maintain the relationship with their parent view,
            				' child views execute and render under the same process (awesomium_process)
            				' as their parent view. If for any reason this child process crashes,
            				' all views related to it will be affected. When maintaining a parent-child 
            				' relationship is not important, we prefer taking advantage of the isolated process 
            				' architecture of Awesomium and let each view be rendered in a separate process.
            				e.Cancel = True
            				' Note that we only explicitly navigate to the target URL, when a new view is 
            				' about to be created, not when we wrap the created child view. This is because 
            				' navigation to the target URL (if any), is already queued on created child views. 
            				' We must not interrupt this navigation as we would still be breaking the parent-child
            				' relationship.
            				newWindow.Source = e.TargetURL
            				' Show the window.
            				newWindow.Show()
            			End If
            		End Sub
            	End Class
            End Namespace
            ]]>
            </code>
            For the complete sample, see the <b>C# WebControlSample</b> of the <b>Awesomium.NET Samples</b> solution, available with the SDK.
            </example>
            <seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>
            <seealso cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary>
            <remarks>
            
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary>
            <remarks>
            The main frame usually finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary>
            <remarks>
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> 
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event either <b>modally</b> or <b>non-modally</b>. 
            <b>Only default or modal handling is officially supported by Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>.
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the above <see cref="T:Awesomium.Core.IWebView"/>
            member, is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            <note type="caution">
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
             No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            <seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.CertificateError">
            <summary>
            Occurs when an SSL certificate error is encountered while attempting to navigate
            to a new address.
            </summary>
            <remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event is handled, 
            when <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), navigation to the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/> will be canceled
            due to the SLL certificate error.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/> property, 
            <b>before</b> the event handler exits.
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the error and navigation to <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/>
            will be canceled, unless you call <see cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>.
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this method.
            </note>
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
            <seealso cref="E:Awesomium.Core.IWebView.Printing"/>
            <seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            <seealso cref="E:Awesomium.Core.IWebView.Printing"/>
            <seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            <seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
            <seealso cref="E:Awesomium.Core.IWebView.Printing"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary>
            <remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <p/>
            Optionally, you can easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.ShowPageInfo">
            <summary>
            Occurs in response to a <see cref="M:Awesomium.Core.IWebView.RequestPageInfo"/>
            call, requesting for the page's security related information.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Core.IWebView.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.Instance">
            <summary>
            Gets the handle to the native web-view instance.
            </summary>
            <remarks>
            This can be used in advanced scenarios, such as when you want to
            directly p/invoke members of the native Awesomium library 
            (see <see cref="F:Awesomium.Core.WebCore.DLLName"/>).
            <note type="caution">
            Using p/invoke directly against the native Awesomium library,
            is not officially supported by Awesomium.NET. This technique, 
            may render the <see cref="T:Awesomium.Core.WebCore"/> or other instances of Awesomium.NET, 
            unstable.
            <p/>
            We will not provide any support for issues that may occur from
            using p/invoke directly against the native Awesomium library.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.Width">
            <summary>
            Gets or sets the current width of the view.
            </summary>
            <remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.Height">
            <summary>
            Gets or sets the current height of the view.
            </summary>
            <remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance currently
            assigned to the view.
            </summary>
            <remarks>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should use this property to assign it to the view.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsProcessCreated">
            <summary>
            Indicates if the child rendering process for this view, has been spawned.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsLive">
            <summary>
            Gets if the native web-view, is alive.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the native web-view, 
            is alive. <c>False</c> indicates that the native web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <note>
            When crashed, technology specific <c>WebControls</c> will attempt 
            to recreate the underlying view.
            For details, see: <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (eg, using <see cref="M:Awesomium.Windows.Controls.WebControl.Dispose"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first view created) or of the native web-view.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members. Trying to access the native web-view when it is not alive, 
            can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of view members.
            <p/>
            <note>
            This property also returns <c>false</c> when technology specific <c>WebControls</c>
            are shown in a designer. The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the native web-view, 
            are only instantiated during runtime.
            </note>
            </remarks>
            <example>
            <code lang="C#">
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsDocumentReady">
            <summary>
            Gets if the DOM (Document Object Model) for the page being loaded, is ready.
            </summary>
            <remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsNavigating">
            <summary>
            Gets if the view is currently navigating to a Url.
            </summary>
            <remarks>
            Unlike <see cref="P:Awesomium.Core.IWebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary>
            <seealso cref="P:Awesomium.Core.IWebView.Title"/>
            <seealso cref="E:Awesomium.Core.IWebView.TitleChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.HasTargetURL">
            <summary>
            Gets if the view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.TargetURLChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.ToolTipText">
            <summary>
            Gets the tool-tip text currently indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ToolTipChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.ParentView">
            <summary>
            Gets the parent view (if any) of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            A <see cref="T:Awesomium.Core.IWebView"/> can only have a parent if it is a popup view that
            was created by Awesomium in response to a Javascript <c>window.open</c>.
            <p/>
            For more details, see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            Be careful when you access members of the parent <see cref="T:Awesomium.Core.IWebView"/> instance.
            The parent may have been destroyed while the this (child) view, is still alive.
            Always check <see cref="P:Awesomium.Core.IWebView.IsLive"/> before accessing members on the parent view,
            to avoid exceptions.
            </note>
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.ProcessInput">
            <summary>
            Gets or sets the user input that should be processed by a technology specific <c>WebControl</c>.
            The default is <see cref="F:Awesomium.Core.ViewInput.All"/>.
            </summary>
            <remarks>
            <note>
            This property can only be set on technology-specific controls that wrap an <i>offscreen</i> 
            view (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>). <i>Windowed</i> views process all input by default at native level.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsResponsive">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, is currently responsive.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.LatestContextData">
            <summary>
            Gets the latest web-view context data, usually updated by a right-click in page.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web-view context data.
            </returns>
            <seealso cref="T:Awesomium.Core.WebContextMenuInfo"/>
            <seealso cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.IWebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.Presenter">
            <summary>
            Gets or sets an <see cref="T:Awesomium.Core.IWebView"/> presentation control that will receive
            requests for UI related events.
            </summary>
            <remarks>
            Members of the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface are used by views to propagate
            UI related requests that they cannot handle by themselves. For example, the <i>windowless</i> 
            <see cref="T:Awesomium.Core.WebView"/> does not handle any UI related events itself. If an <see cref="T:Awesomium.Core.IWebViewPresenter"/>
            has been assigned to the <see cref="P:Awesomium.Core.IWebView.Presenter"/> property, those requests will be propagated to
            the presentation control, unless previously handled by a relative event handler.
            <note>
            When used with an <i>offscreen</i> <see cref="T:Awesomium.Core.WebView"/>, an instance of <see cref="T:Awesomium.Core.IWebViewPresenter"/> that also
            implements <see cref="T:Awesomium.Core.ISurface"/>, will be used as the view's default surface, as long as it has
            been assigned to <see cref="P:Awesomium.Core.WebView.Presenter"/> immediately after the creation of the <see cref="T:Awesomium.Core.WebView"/>.
            </note>
            <h4>Usage in WPF</h4>
            The <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface is extensively used in WPF. <see cref="T:Awesomium.Core.IWebView"/> 
            presentation controls are used in the visual tree when styling a WPF 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>. These can be custom WPF surfaces
            implementing <see cref="T:Awesomium.Core.ISurface"/> (for offscreen views) or any other control providing custom 
            presentation of a <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            When the custom control is added to the visual tree and loaded for presentation, 
            the <see cref="T:Awesomium.Core.IWebView"/> instance (typically, a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>)
            uses the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface to communicate with the 
            presentation control.
            <p/>
            <c>Awesomium.Windows.Controls</c> already provides 2 such presenters:
            <list type="table">
            <listheader>
            <term>Presentation Control</term>
            <description>Usage (by the default style)</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></term>
            <description>
            Used when <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to 
            <see cref="F:Awesomium.Core.WebViewType.Offscreen"/> (default). This is an <see cref="T:Awesomium.Core.ISurface"/> component that 
            uses 100% WPF logic to copy the view's pixel buffer to a bitmap that it then renders for presentation.
            </description>
            </item>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewHost"/></term>
            <description>
            This is an <see cref="T:System.Windows.Interop.HwndHost"/> that is used when 
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to <see cref="F:Awesomium.Core.WebViewType.Window"/>.
            For more details, read the documentation of <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsJavascriptEnabled">
            <summary>
            Gets is Javascript is enabled on this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            Javascript status is defined by setting the <see cref="P:Awesomium.Core.WebPreferences.Javascript"/> property when
            defining the preferences of the <see cref="T:Awesomium.Core.WebSession"/> this view will be member of.
            <p/>
            Javascript is enabled by default when using the default <see cref="T:Awesomium.Core.WebSession"/>,
            or if no preferences or the default preferences have been specified to a custom <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            Several features depend on Javascript. The following lists, present <b>features that are not available when Javascript is disabled</b>:
            <h4>Methods</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            Attempting to call any of these methods when Javascript is disabled, will throw a <see cref="T:System.InvalidOperationException"/>.
            </note>
            <h4>Events</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.WindowClose"/>
            </description>
            </item>
            </list>
            <note>
            These events will not be fired when Javascript is disabled.
            </note>
            <h4>Properties</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.HasSelection"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Selection"/> will always return <see cref="F:Awesomium.Core.Selection.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.SynchronousMessageTimeout"/> is ignored.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> will always return <see cref="F:Awesomium.Core.JSWindowOpenSpecs.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will always return <c>false</c>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
            <seealso cref="P:Awesomium.Core.WebPreferences.Javascript"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsPrinting">
            <summary>
            Gets if a printing operation is currently in progress.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            <seealso cref="E:Awesomium.Core.IWebView.Printing"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
            <seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.CurrentCertificateError">
            <summary>
            Gets the SSL certificate error (if any) reported for the
            page currently loaded. The default is <see cref="F:Awesomium.Core.CertError.None"/>.
            </summary>
            <seealso cref="P:Awesomium.Core.IWebView.HasCertificateError"/>
            <seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.HasCertificateError">
            <summary>
            Gets if the page currently loaded has an SSL
            certificate error.
            </summary>
            <seealso cref="P:Awesomium.Core.IWebView.CurrentCertificateError"/>
            <seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsSourceView">
            <summary>
            Gets if this is a source view that displays the source of
            loaded pages.
            </summary>
            <remarks>
            The following table presents how to create managed web-view components
            that display the source code of loaded pages:
            <list type="table">
            <listheader>
            <term>
            Component
            </term>
            <description>
            Method
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            Use <see cref="M:Awesomium.Core.WebCore.CreateSourceWebView(System.Int32,System.Int32)"/>.
            </description>
            </item>
            <item>
            <term>
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> (WPF)<br/>
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> (Windows Forms)<br/>
            <see cref="T:Awesomium.Windows.Unity.WebUIComponent"/> (Unity)
            </term>
            <description>
            The <see cref="P:Awesomium.Core.IWebView.IsSourceView"/> property is implemented as read-write
            property on these controls. You have to set the property before
            the control goes <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            <p/>
            Either:
            <list type="bullet">
            <item>
            <description>
            Set the property at design-time.
            </description>
            </item>
            </list>
            - OR -
            <list type="bullet">
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.InitializeView"/> event, the last fired
            before the control goes <i>live</i>, to set the property.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            <note>
            You cannot change this property on technology specific web-view controls,
            once they go <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.HTML">
            <summary>
            Gets the HTML code of the currently loaded document.
            </summary>
            <remarks>
            This property is updated after the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event is fired.
            <note type="caution">
            This property returns <c>null</c> (<c>Nothing</c> in Visual Basic), if JavaScript
            is disabled in this view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.Source"/>
            <seealso cref="M:Awesomium.Core.IWebView.LoadHTML(System.String)"/>
            <seealso cref="E:Awesomium.Core.IWebView.DocumentReady"/>
            <seealso cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.RenderProcess">
            <summary>
            Gets the rendering process associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This represents the executing <i><c>awesomium_process</c></i> or the one specified through 
            <see cref="P:Awesomium.Core.WebConfig.ChildProcessPath"/> at <see cref="T:Awesomium.Core.WebCore"/> initialization.
            </summary>
            <remarks>
            This may not be initialized until some time after the view is actually created 
            (when we receive the first IPC message from the child-process). It may also return
            <c>null</c> (<c>Nothing</c> in Visual Basic), is there is no rendering process
            associated yet (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>) or the process has crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <p/>
            The associated <see cref="P:Awesomium.Core.IWebView.RenderProcess"/> will be terminated when this <see cref="T:Awesomium.Core.IWebView"/>
            instance is disposed and destroyed.
            <p/>
            The default priority of the <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>, is <see cref="F:System.Diagnostics.ProcessPriorityClass.Normal"/>.
            This may be automatically lowered to <see cref="F:System.Diagnostics.ProcessPriorityClass.BelowNormal"/> when
            <see cref="P:Awesomium.Core.IWebView.IsRendering"/> is <c>false</c>.
            <note>
            In a technology-specific <c>WebControl</c>, <see cref="P:Awesomium.Core.IWebView.IsRendering"/> and the priority of
            the <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>, are associated to the control's <i>enabled</i> status.
            </note>
            <note type="caution">
            Actions that may corrupt the execution state of the rendering process, will directly affect
            view's web content rendering. Manually killing this process, will mark the view as crashed 
            (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.ProcessHandle"/>
            <seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.CreationTime">
            <summary>
            Indicates the date and time this <see cref="T:Awesomium.Core.IWebView"/> instance was created.
            If the view has not been successfully initialized, this is <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.FocusedElementType">
            <summary>
            Gets the type of the element currently focused in the loaded page.
            </summary>
            <remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.Source">
            <summary>
            Gets or sets the URL currently presented by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <returns>
            An absolute <see cref="T:System.Uri"/> representing the URL currently loaded 
            by this <see cref="T:Awesomium.Core.IWebView"/> instance, or <c>null</c> (<c>Nothing</c>
            in Visual Basic) if not set or updated.
            </returns>
        </member>
        <member name="P:Awesomium.Core.IWebView.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary>
            <remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.IWebView.NavigationInfo"/>.
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/>
            <seealso cref="P:Awesomium.Core.IWebView.HasTitle"/>
        </member>
        <member name="P:Awesomium.Core.IWebView.WebSession">
            <summary>
            Gets the session associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            You can create a <see cref="P:Awesomium.Core.IWebView.WebSession"/> with your own preferences (see <see cref="P:Awesomium.Core.WebSession.Preferences"/>),
            using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>. You can then use this when you create a <see cref="T:Awesomium.Core.WebView"/> instance, 
            by using the <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>
            function.
            <note>
            This property is implemented as a read-write property on technology specific <c>WebControls</c>.
            You can use the setter to specify your <see cref="T:Awesomium.Core.WebSession"/>, right after instantiating
            the <c>WebControl</c> or at design time. You cannot change this setting after the control
            has been fully loaded and its underlying web-view, has been created.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsLoading">
            <summary>
            Gets if any page resources are currently being loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsCrashed">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with <c>style="background-color: transparent;"</c>)
            </summary>
            <remarks>
            When set to <c>true</c>, the alpha channel is premultiplied. When set to <c>false</c>
            (default), the view will have an opaque, white background.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            You should set this to <c>false</c> when your surface is not rendering
            the view's pixel buffer (e.g., when a technology specific <c>WebControl</c>
            is not visible) to save some CPU cycles.
            <note>
            Technology specific <c>WebControls</c> usually monitor the control's visibility
            or enabled status and update this property automatically. They may require
            additional steps before you are able to set this property manually. For more
            details, refer to the documentation of each <c>WebControl</c>.
            </note>
            <note>
            When this is <c>false</c>, the associated process's (see <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>)
            priority, is also automatically lowered.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.IWebView.ParentWindow">
            <summary>
            Gets or sets the parent window for this <see cref="T:Awesomium.Core.IWebView"/> instance. This is only valid
            for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>),
            on the Windows platform.
            </summary>
            <remarks>
            <note type="caution">
            When you use a <see cref="T:Awesomium.Core.WebView"/>, you should call this method immediately after calling 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. The window for this <see cref="T:Awesomium.Core.IWebView"/> instance
            will not be created until you set <see cref="P:Awesomium.Core.IWebView.ParentWindow"/>, on the Windows platform.
            </note>
            <note>
            Technology specific <c>WebControls</c>, take care of this internally. Once set and the underlying
            window for this <see cref="T:Awesomium.Core.IWebView"/> instance has been created, this property cannot be changed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.ViewType">
            <summary>
            Gets the type of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            For details about the various types of a <see cref="T:Awesomium.Core.IWebView"/> instance,
            read the documentation of <see cref="T:Awesomium.Core.WebViewType"/> and its members,
            or the following article: http://wiki.awesomium.net/general-use/introduction-to-web-views.html
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.ProcessHandle">
            <summary>
            Gets the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.ProcessId">
            <summary>
            Gets the identifier for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no rendering process currently associated (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            <note>
            This is not a unique identifier for the <see cref="T:Awesomium.Core.IWebView"/> instance.
            A child, rendering process can host more than one views
            (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            </note>
            <note>
            This does not correspond to the system-wide id of the associated
            <see cref="P:Awesomium.Core.IWebView.RenderProcess"/> (PID). It's an Awesomium-specific identifier.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.Identifier">
            <summary>
            Gets a unique global identifier for this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            When this <see cref="T:Awesomium.Core.IWebView"/> instance is <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>),
            this identifier is guaranteed to be unique among all <see cref="T:Awesomium.Core.IWebView"/>
            instances maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            <note>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no rendering process currently associated (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.SynchronousMessageTimeout">
            <summary>
            Gets or sets the maximum amount of time (in milliseconds) to wait for a response
            from a synchronous IPC message dispatched to the view's renderer process.
            Default is <c>800</c> (ms). Set this to <c>0</c> to use no timeout.
            </summary>
            <remarks>
            You should increase this if you find that a lot of your synchronous
            method calls keep getting <see cref="F:Awesomium.Core.Error.TimedOut"/> (see <see cref="M:Awesomium.Core.IWebView.GetLastError"/>.
            (Your machine just may be slow at handling IPC calls).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebView.Zoom">
            <summary>
            Gets or sets the Zoom percentage for the host currently loaded.
            </summary>
            <remarks>
            <note>
            Zoom amount is saved per hostname. The value of this property is automatically updated
            when the host currently loaded, changes (see: <see cref="E:Awesomium.Core.IWebView.AddressChanged"/> and <see cref="P:Awesomium.Core.IWebView.Source"/>).
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you set this property.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The minimum accepted value, is <c>1</c>.
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/>
            <seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/>
            <seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/>
            <seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="T:Awesomium.Core.IWebViewPresenter">
            <summary>
            This interface defines the members that an <see cref="T:Awesomium.Core.IWebView"/> presentation control 
            should implement, if it wants to respond to UI related events, without handling the relative events.
            </summary>
            <remarks>
            Members of the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface are used by views to propagate
            UI related requests that they cannot handle by themselves. For example, the <i>windowless</i> 
            <see cref="T:Awesomium.Core.WebView"/> does not handle any UI related events itself. If an <see cref="T:Awesomium.Core.IWebViewPresenter"/>
            has been assigned to the <see cref="P:Awesomium.Core.IWebView.Presenter"/> property, those requests will be propagated to
            the presentation control, unless previously handled by a relative event handler.
            <note>
            When used with an <i>offscreen</i> <see cref="T:Awesomium.Core.WebView"/>, an instance of <see cref="T:Awesomium.Core.IWebViewPresenter"/> that also
            implements <see cref="T:Awesomium.Core.ISurface"/>, will be used as the view's default surface, as long as it has
            been assigned to <see cref="P:Awesomium.Core.WebView.Presenter"/> immediately after the creation of the <see cref="T:Awesomium.Core.WebView"/>.
            </note>
            <h4>Usage in WPF</h4>
            The <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface is extensively used in WPF. <see cref="T:Awesomium.Core.IWebView"/> 
            presentation controls are used in the visual tree when styling a WPF 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>. These can be custom WPF surfaces
            implementing <see cref="T:Awesomium.Core.ISurface"/> (for offscreen views) or any other control providing custom 
            presentation of a <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            When the custom control is added to the visual tree and loaded for presentation, 
            the <see cref="T:Awesomium.Core.IWebView"/> instance (typically, a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>)
            uses the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface to communicate with the 
            presentation control.
            <p/>
            <c>Awesomium.Windows.Controls</c> already provides 2 such presenters:
            <list type="table">
            <listheader>
            <term>Presentation Control</term>
            <description>Usage (by the default style)</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></term>
            <description>
            Used when <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to 
            <see cref="F:Awesomium.Core.WebViewType.Offscreen"/> (default). This is an <see cref="T:Awesomium.Core.ISurface"/> component that 
            uses 100% WPF logic to copy the view's pixel buffer to a bitmap that it then renders for presentation.
            </description>
            </item>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewHost"/></term>
            <description>
            This is an <see cref="T:System.Windows.Interop.HwndHost"/> that is used when 
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to <see cref="F:Awesomium.Core.WebViewType.Window"/>.
            For more details, read the documentation of <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowJSDialog(Awesomium.Core.JavascriptDialogEventArgs)">
            <summary>
            Called when the view asks for a JavaScript dialog to be presented.
            </summary>
            <param name="e">
            Provides data for the dialog, and the ability to respond.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/> event
            has not been canceled or handled.
            </note>
            <note type="caution">
            This member is not called when the <see cref="T:Awesomium.Core.IWebViewPresenter"/> has been assigned
            to a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>. The WPF
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. If you
            need to override the default implementation, handle the <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/>
            event and set <see cref="P:Awesomium.Core.JavascriptDialogEventArgs.Handled"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowChooseFilesDialog(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Called when the view asks for a dialog that will select local files.
            </summary>
            <param name="e">
            Provides data for the dialog, and the ability to respond.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event
            has not been canceled or handled.
            </note>
            <note type="caution">
            This member is not called when the <see cref="T:Awesomium.Core.IWebViewPresenter"/> has been assigned
            to a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>. The WPF
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. If you
            need to override the default implementation, handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/>
            event and set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to anything but <see cref="F:Awesomium.Core.EventHandling.Default"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowDownloadDialog(Awesomium.Core.DownloadEventArgs)">
            <summary>
            Called when the view asks for a dialog that will select the local path to the file to be downloaded.
            </summary>
            <param name="e">
            Provides data for the dialog, and the ability to respond.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.WebCore.Download"/> event
            has not been canceled or handled.
            </note>
            <note type="caution">
            This member is not called when the <see cref="T:Awesomium.Core.IWebViewPresenter"/> has been assigned
            to a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>. The WPF
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. If you
            need to override the default implementation, handle the <see cref="E:Awesomium.Core.WebCore.Download"/>
            event and set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to anything but <see cref="F:Awesomium.Core.EventHandling.Default"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowLoginDialog(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Called when the view asks for a dialog that will allow the user to provide login info.
            </summary>
            <param name="e">
            Provides data for the dialog, and the ability to respond.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event
            has not been canceled or handled.
            </note>
            <note type="caution">
            This member is not called when the <see cref="T:Awesomium.Core.IWebViewPresenter"/> has been assigned
            to a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>. The WPF
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. If you
            need to override the default implementation, handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            event and set <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> to anything but <see cref="F:Awesomium.Core.EventHandling.Default"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowCertificateErrorDialog(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            Called when the view asks for a dialog to display an SSL certificate that was encountered
            while navigating to an address.
            </summary>
            <param name="e">
            Provides data for the dialog, and the ability to respond.
            </param>
            <remarks>
            <note>
            This is called after an <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event that
            has not been handled.
            </note>
            <note type="caution">
            This member is not called when the <see cref="T:Awesomium.Core.IWebViewPresenter"/> has been assigned
            to a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>. The WPF
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. If you
            need to override the default implementation, handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/>
            event and set <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> to anything but 
            <see cref="F:Awesomium.Core.EventHandling.Default"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowToolTip(System.String)">
            <summary>
            Called when the view asks for a tool-tip to be presented.
            </summary>
            <param name="toolTipText">
            The content of the tool-tip.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.ToolTipChanged"/> event
            has not been canceled or handled.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.HideToolTip">
            <summary>
            Called when any tool-tips visible, should be hidden.
            </summary>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)">
            <summary>
            Called when the view asks for a context menu to be presented.
            </summary>
            <param name="info">
            Provides context menu information.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/> event
            has not been canceled or handled.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowWebPageInfo(Awesomium.Core.WebPageInfo)">
            <summary>
            Called when the view asks for web page security information to be presented.
            </summary>
            <param name="info">
            Provides web page security related information.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.ShowPageInfo"/> event
            has not been handled.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowPopupMenu(Awesomium.Core.WebPopupMenuInfo)">
            <summary>
            Called when the view asks for a drop-down (popup) menu to be presented.
            </summary>
            <param name="info">
            Provides drop-down (popup) menu information.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event
            has not been canceled or handled.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.HidePopupMenu(System.Boolean)">
            <summary>
            Called when any drop-down (popup) menus
            visible, should be hidden.
            </summary>
            <param name="cancel">
            <c>true</c> to abort the menu and prevent it from sending the currently selected item;
            <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.ShowCursor(Awesomium.Core.CursorType)">
            <summary>
            Called when the current cursor indicated by the <see cref="P:Awesomium.Core.IWebViewPresenter.View"/>,
            changes.
            </summary>
            <param name="cursor">
            An <see cref="T:Awesomium.Core.CursorType"/> member indicating the kind
            of cursor that should be used.
            </param>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event
            has not been canceled or handled.
            </note>
            <note>
            In WPF, use the <see cref="M:Awesomium.Windows.Controls.Utilities.GetCursor(Awesomium.Core.CursorType)"/>
            extension to get the WPF equivalent cursor. Likewise, in Windows Forms you can use
            <see cref="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.CursorType)"/> or
            <see cref="M:Awesomium.Windows.Forms.Utilities.GetCursor(Awesomium.Core.CursorChangedEventArgs)"/>
            to get the Windows Forms. equivalent cursor.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IWebViewPresenter.Print">
            <summary>
            Called when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.)
            </summary>
            <remarks>
            <note>
            This is called after a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> event
            has not been canceled or handled.
            </note>
            <note type="caution">
            This member is not called when the <see cref="T:Awesomium.Core.IWebViewPresenter"/> has been assigned
            to a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>. The WPF
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. If you
            need to override the default implementation, handle the <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event and set <see cref="P:Awesomium.Core.PrintRequestEventArgs.Handled"/> to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.IWebViewPresenter.View">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IWebView"/> instance this <see cref="T:Awesomium.Core.IWebViewPresenter"/>
            instance is presenting, or is responsible for providing UI logic for.
            </summary>
            <remarks>
            <note type="inherit">
            Implementations should update the <see cref="P:Awesomium.Core.IWebView.Presenter"/>
            property of the newly assigned view and of the previously assigned, if any.
            </note>
            Setting this property to any of the predefined WPF presentation controls, 
            will automatically update the <see cref="P:Awesomium.Core.IWebView.Presenter"/> property 
            of the newly assigned view and of the previously assigned, if any.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.JSObjectType">
            <summary>
            An enumeration of JSObject types.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.Local">
            <summary>
            Local object.
            </summary>
            <remarks>
            Local objects can only contain properties.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.Remote">
            <summary>
            Remote object, actually stored in a remote process.
            </summary>
            <remarks>
            All API calls will be proxied to the remote process 
            and may fail (see <see cref="M:Awesomium.Core.JSObject.GetLastError"/>).
            </remarks>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.RemoteGlobal">
            <summary>
            Same as <see cref="F:Awesomium.Core.JSObjectType.Remote"/> except that the object 
            will persist between all page loads.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JSObjectType.Invalid">
            <summary>
            Indicates that the <see cref="T:Awesomium.Core.JSObject"/> has been disposed or that
            it represents an invalid <see cref="T:Awesomium.Core.JSObject"/> instance, equivalent
            to <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            </summary>
            <remarks>
            <note type="caution">
            Do not attempt to access members or execute any code against, or using
            a <see cref="T:Awesomium.Core.JSObject"/> of type <see cref="F:Awesomium.Core.JSObjectType.Invalid"/>.
            Try to acquire a new instance through JavaScript.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.VirtualKey">
            <summary>
            Virtual Keys enumeration.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BACK">
            <summary>
            AK_BACK (08) BACKSPACE key
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.TAB">
            <summary>
            AK_TAB (09) TAB key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.CLEAR">
            <summary>
            AK_CLEAR (0C) CLEAR key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.RETURN">
            <summary>
            AK_RETURN (0D).
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SHIFT">
            <summary>
            AK_SHIFT (10) SHIFT key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.CONTROL">
            <summary>
            AK_CONTROL (11) CTRL key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MENU">
            <summary>
            AK_MENU (12) ALT key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.PAUSE">
            <summary>
            AK_PAUSE (13) PAUSE key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.CAPITAL">
            <summary>
            AK_CAPITAL (14) CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.KANA">
            <summary>
            AK_KANA (15) Input Method Editor (IME) Kana mode.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.HANGUL">
            <summary>
            AK_HANGUEL (15) IME Hanguel mode (maintained for compatibility, use AK_HANGUL).
            AK_HANGUL (15) IME Hangul mode.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.JUNJA">
            <summary>
            AK_JUNJA (17) IME Junja mode.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.FINAL">
            <summary>
            .
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.HANJA">
            <summary>
            AK_HANJA (19) IME Hanja mode.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.KANJI">
            <summary>
            AK_KANJI (19) IME Kanji mode.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.ESCAPE">
            <summary>
            AK_ESCAPE (1B) ESC key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.CONVERT">
            <summary>
            AK_CONVERT (1C) IME convert.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NONCONVERT">
            <summary>
            AK_NONCONVERT (1D) IME nonconvert.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.ACCEPT">
            <summary>
            AK_ACCEPT (1E) IME accept.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MODECHANGE">
            <summary>
            AK_MODECHANGE (1F) IME mode change request.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SPACE">
            <summary>
            AK_SPACE (20) SPACEBAR.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.PRIOR">
            <summary>
            AK_PRIOR (21) PAGE UP key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NEXT">
            <summary>
            AK_NEXT (22) PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.END">
            <summary>
            AK_END (23) END key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.HOME">
            <summary>
            AK_HOME (24) HOME key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.LEFT">
            <summary>
            AK_LEFT (25) LEFT ARROW key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.UP">
            <summary>
            AK_UP (26) UP ARROW key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.RIGHT">
            <summary>
            AK_RIGHT (27) RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.DOWN">
            <summary>
            AK_DOWN (28) DOWN ARROW key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SELECT">
            <summary>
            AK_SELECT (29) SELECT key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.PRINT">
            <summary>
            AK_PRINT (2A) PRINT key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.EXECUTE">
            <summary>
            AK_EXECUTE (2B) EXECUTE key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SNAPSHOT">
            <summary>
            AK_SNAPSHOT (2C) PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.INSERT">
            <summary>
            AK_INSERT (2D) INS key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.DELETE">
            <summary>
            AK_DELETE (2E) DEL key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.HELP">
            <summary>
            AK_HELP (2F) HELP key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_0">
            <summary>
            (30) 0 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_1">
            <summary>
            (31) 1 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_2">
            <summary>
            (32) 2 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_3">
            <summary>
            (33) 3 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_4">
            <summary>
            (34) 4 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_5">
            <summary>
            (35) 5 key,.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_6">
            <summary>
            (36) 6 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_7">
            <summary>
            (37) 7 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_8">
            <summary>
            (38) 8 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUM_9">
            <summary>
            (39) 9 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.A">
            <summary>
            (41) A key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.B">
            <summary>
            (42) B key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.C">
            <summary>
            (43) C key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.D">
            <summary>
            (44) D key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.E">
            <summary>
            (45) E key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F">
            <summary>
            (46) F key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.G">
            <summary>
            (47) G key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.H">
            <summary>
            (48) H key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.I">
            <summary>
            (49) I key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.J">
            <summary>
            (4A) J key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.K">
            <summary>
            (4B) K key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.L">
            <summary>
            (4C) L key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.M">
            <summary>
            (4D) M key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.N">
            <summary>
            (4E) N key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.O">
            <summary>
            (4F) O key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.P">
            <summary>
            (50) P key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.Q">
            <summary>
            (51) Q key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.R">
            <summary>
            (52) R key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.S">
            <summary>
            (53) S key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.T">
            <summary>
            (54) T key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.U">
            <summary>
            (55) U key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.V">
            <summary>
            (56) V key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.W">
            <summary>
            (57) W key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.X">
            <summary>
            (58) X key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.Y">
            <summary>
            (59) Y key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.Z">
            <summary>
            (5A) Z key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.LWIN">
            <summary>
            AK_LWIN (5B) Left Windows key (Microsoft Natural keyboard).
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.RWIN">
            <summary>
            AK_RWIN (5C) Right Windows key (Natural keyboard).
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.APPS">
            <summary>
            AK_APPS (5D) Applications key (Natural keyboard).
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SLEEP">
            <summary>
            AK_SLEEP (5F) Computer Sleep key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD0">
            <summary>
            AK_NUMPAD0 (60) Numeric keypad 0 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD1">
            <summary>
            AK_NUMPAD1 (61) Numeric keypad 1 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD2">
            <summary>
            AK_NUMPAD2 (62) Numeric keypad 2 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD3">
            <summary>
            AK_NUMPAD3 (63) Numeric keypad 3 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD4">
            <summary>
            AK_NUMPAD4 (64) Numeric keypad 4 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD5">
            <summary>
            AK_NUMPAD5 (65) Numeric keypad 5 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD6">
            <summary>
            AK_NUMPAD6 (66) Numeric keypad 6 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD7">
            <summary>
            AK_NUMPAD7 (67) Numeric keypad 7 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD8">
            <summary>
            AK_NUMPAD8 (68) Numeric keypad 8 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMPAD9">
            <summary>
            AK_NUMPAD9 (69) Numeric keypad 9 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MULTIPLY">
            <summary>
            AK_MULTIPLY (6A) Multiply key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.ADD">
            <summary>
            AK_ADD (6B) Add key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SEPARATOR">
            <summary>
            AK_SEPARATOR (6C) Separator key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SUBTRACT">
            <summary>
            AK_SUBTRACT (6D) Subtract key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.DECIMAL">
            <summary>
            AK_DECIMAL (6E) Decimal key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.DIVIDE">
            <summary>
            AK_DIVIDE (6F) Divide key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F1">
            <summary>
            AK_F1 (70) F1 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F2">
            <summary>
            AK_F2 (71) F2 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F3">
            <summary>
            AK_F3 (72) F3 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F4">
            <summary>
            AK_F4 (73) F4 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F5">
            <summary>
            AK_F5 (74) F5 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F6">
            <summary>
            AK_F6 (75) F6 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F7">
            <summary>
            AK_F7 (76) F7 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F8">
            <summary>
            AK_F8 (77) F8 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F9">
            <summary>
            AK_F9 (78) F9 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F10">
            <summary>
            AK_F10 (79) F10 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F11">
            <summary>
            AK_F11 (7A) F11 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F12">
            <summary>
            AK_F12 (7B) F12 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F13">
            <summary>
            AK_F13 (7C) F13 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F14">
            <summary>
            AK_F14 (7D) F14 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F15">
            <summary>
            AK_F15 (7E) F15 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F16">
            <summary>
            AK_F16 (7F) F16 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F17">
            <summary>
            AK_F17 (80H) F17 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F18">
            <summary>
            AK_F18 (81H) F18 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F19">
            <summary>
            AK_F19 (82H) F19 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F20">
            <summary>
            AK_F20 (83H) F20 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F21">
            <summary>
            AK_F21 (84H) F21 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F22">
            <summary>
            AK_F22 (85H) F22 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F23">
            <summary>
            AK_F23 (86H) F23 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.F24">
            <summary>
            AK_F24 (87H) F24 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NUMLOCK">
            <summary>
            AK_NUMLOCK (90) NUM LOCK key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.SCROLL">
            <summary>
            AK_SCROLL (91) SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.LSHIFT">
            <summary>
            AK_LSHIFT (A0) Left SHIFT key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.RSHIFT">
            <summary>
            AK_RSHIFT (A1) Right SHIFT key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.LCONTROL">
            <summary>
            AK_LCONTROL (A2) Left CONTROL key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.RCONTROL">
            <summary>
            AK_RCONTROL (A3) Right CONTROL key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.LMENU">
            <summary>
            AK_LMENU (A4) Left MENU key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.RMENU">
            <summary>
            AK_RMENU (A5) Right MENU key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BROWSER_BACK">
            <summary>
            AK_BROWSER_BACK (A6) Windows 2000/XP: Browser Back key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BROWSER_FORWARD">
            <summary>
            AK_BROWSER_FORWARD (A7) Windows 2000/XP: Browser Forward key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BROWSER_REFRESH">
            <summary>
            AK_BROWSER_REFRESH (A8) Windows 2000/XP: Browser Refresh key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BROWSER_STOP">
            <summary>
            AK_BROWSER_STOP (A9) Windows 2000/XP: Browser Stop key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BROWSER_SEARCH">
            <summary>
            AK_BROWSER_SEARCH (AA) Windows 2000/XP: Browser Search key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BROWSER_FAVORITES">
            <summary>
            AK_BROWSER_FAVORITES (AB) Windows 2000/XP: Browser Favorites key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.BROWSER_HOME">
            <summary>
            AK_BROWSER_HOME (AC) Windows 2000/XP: Browser Start and Home key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.VOLUME_MUTE">
            <summary>
            AK_VOLUME_MUTE (AD) Windows 2000/XP: Volume Mute key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.VOLUME_DOWN">
            <summary>
            AK_VOLUME_DOWN (AE) Windows 2000/XP: Volume Down key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.VOLUME_UP">
            <summary>
            .
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_NEXT_TRACK">
            <summary>
            AK_MEDIA_NEXT_TRACK (B0) Windows 2000/XP: Next Track key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_PREV_TRACK">
            <summary>
            AK_MEDIA_PREV_TRACK (B1) Windows 2000/XP: Previous Track key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_STOP">
            <summary>
            AK_MEDIA_STOP (B2) Windows 2000/XP: Stop Media key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_PLAY_PAUSE">
            <summary>
            AK_MEDIA_PLAY_PAUSE (B3) Windows 2000/XP: Play/Pause Media key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_LAUNCH_MAIL">
            <summary>
            AK_LAUNCH_MAIL (B4) Windows 2000/XP: Start Mail key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_LAUNCH_MEDIA_SELECT">
            <summary>
            AK_LAUNCH_MEDIA_SELECT (B5) Windows 2000/XP: Select Media key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_LAUNCH_APP1">
            <summary>
            AK_LAUNCH_APP1 (B6) Windows 2000/XP: Start Application 1 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.MEDIA_LAUNCH_APP2">
            <summary>
            AK_LAUNCH_APP2 (B7) Windows 2000/XP: Start Application 2 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_1">
            <summary>
            AK_OEM_1 (BA) Used for miscellaneous characters, it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ',:' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_PLUS">
            <summary>
            AK_OEM_PLUS (BB) Windows 2000/XP: For any country/region, the '+' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_COMMA">
            <summary>
            AK_OEM_COMMA (BC) Windows 2000/XP: For any country/region, the ',' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_MINUS">
            <summary>
            AK_OEM_MINUS (BD) Windows 2000/XP: For any country/region, the '-' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_PERIOD">
            <summary>
            AK_OEM_PERIOD (BE) Windows 2000/XP: For any country/region, the '.' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_2">
            <summary>
            AK_OEM_2 (BF) Used for miscellaneous characters, it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '/?' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_3">
            <summary>
            AK_OEM_3 (C0) Used for miscellaneous characters, it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '`~' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_4">
            <summary>
            AK_OEM_4 (DB) Used for miscellaneous characters, it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '[{' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_5">
            <summary>
            AK_OEM_5 (DC) Used for miscellaneous characters, it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '\|' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_6">
            <summary>
            AK_OEM_6 (DD) Used for miscellaneous characters, it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ']}' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_7">
            <summary>
            AK_OEM_7 (DE) Used for miscellaneous characters, it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the 'single-quote/double-quote' key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_8">
            <summary>
            AK_OEM_8 (DF) Used for miscellaneous characters, it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_102">
            <summary>
            AK_OEM_102 (E2) Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.PROCESSKEY">
            <summary>
            AK_PROCESSKEY (E5) Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.PACKET">
            <summary>
            AK_PACKET (E7) Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The AK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT,SendInput, WM_KEYDOWN, and WM_KEYUP.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.ATTN">
            <summary>
            AK_ATTN (F6) Attn key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.CRSEL">
            <summary>
            AK_CRSEL (F7) CrSel key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.EXSEL">
            <summary>
            AK_EXSEL (F8) ExSel key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.EREOF">
            <summary>
            AK_EREOF (F9) Erase EOF key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.PLAY">
            <summary>
            AK_PLAY (FA) Play key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.ZOOM">
            <summary>
            AK_ZOOM (FB) Zoom key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.NONAME">
            <summary>
            AK_NONAME (FC) Reserved for future use.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.PA1">
            <summary>
            AK_PA1 (FD) PA1 key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.OEM_CLEAR">
            <summary>
            AK_OEM_CLEAR (FE) Clear key.
            </summary>
        </member>
        <member name="F:Awesomium.Core.VirtualKey.UNKNOWN">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:Awesomium.Core.MediaState">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebContextMenuInfo"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.MediaType">
            <summary>
            Used with <see cref="T:Awesomium.Core.WebContextMenuInfo"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.JSWindowOpenSpecs">
            <summary>
            Indicates the <c>name</c>, target attribute and <c>specs</c>
            passed to a Javascript <c>window.open</c> call.
            </summary>
            <remarks>
            A valid instance of <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> is created and is available
            through <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, when a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event with <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> set to <c>true</c>, is fired.
            </remarks>
            <example>
            The following example illustrates handling the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event in a WPF application that uses
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> controls. In this example, we create a <i>ChildWindow</i> window
            that hosts a <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This window and its hosted <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            will be used to wrap and present the child view passed to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, or navigate to the
            target URL, if <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of a link with <c>target="_blank"</c>.
            <p/>
            Below is the XAML of our <b>ChildWindow</b>.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WebControlSample.ChildWindow" 
                x:Name="childWindow"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                Title="{Binding Title, ElementName=webControl}" 
                Height="480" 
                Width="600">
                <Window.Resources>
                    <!-- We do not need to set any WebPreferences or DataSources 
                    on this provider. It uses the same DataPath as the provider in
                    MainWindow, therefore, this provider will provide the same session,
                    already created by the WebSessionProvider in MainWindow. -->
                    <awe:WebSessionProvider x:Key="mySession" DataPath=".\Cache" />
                </Window.Resources>
                <Grid>
                    <!-- Note that the WebSession assigned to this WebControl, will
                         be effectively ignored when this WebControl wraps a created
                         child view. Child views share the same session as their parent
                         (opener) view. -->
                    <awe:WebControl 
                        Name="webControl" 
                        WebSession="{Binding Source={StaticResource mySession}}"
                        Source="{Binding Source, ElementName=childWindow}"
                        NativeView="{Binding NativeView, ElementName=childWindow}" />
                </Grid>
            </Window>
            ]]>
            </code>
            This is the code-behind of the <b>ChildWindow</b>:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for ChildWindow.xaml
                /// </summary>
                public partial class ChildWindow : Window
                {
                    public ChildWindow()
                    {
                        InitializeComponent();
            
                        // In this example, ShowCreatedWebView of all WebControls, 
                        // is handled by a common handler.
                        webControl.ShowCreatedWebView += App.OnShowNewView;
                    }
            
                    protected override void OnClosed( EventArgs e )
                    {
                        base.OnClosed( e );
            
                        // Destroy the WebControl and its underlying view.
                        webControl.Dispose();
                    }
            
                    // This will be set to the target URL, when this ChildWindow does not
                    // host a created child view. The WebControl, is bound to this property.
                    public Uri Source
                    {
                        get { return this.GetValue( SourceProperty ) as Uri; }
                        set { SetValue( SourceProperty, value ); }
                    }
            
                    public static readonly DependencyProperty SourceProperty = 
                        DependencyProperty.Register( "Source",
                        typeof( Uri ), typeof( ChildWindow ),
                        new UIPropertyMetadata( null ) );
            
                    // This will be set to the created child view that the WebControl will wrap,
                    // when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    // is bound to this property.
                    public IntPtr NativeView
                    {
                        get { return (IntPtr)this.GetValue( ChildWindow.NativeViewProperty ); }
                        internal set { this.SetValue( ChildWindow.NativeViewPropertyKey, value ); }
                    }
            
                    private static readonly DependencyPropertyKey NativeViewPropertyKey = 
                        DependencyProperty.RegisterReadOnly( "NativeView",
                        typeof( IntPtr ), typeof( ChildWindow ),
                        new FrameworkPropertyMetadata( IntPtr.Zero ) );
            
                    public static readonly DependencyProperty NativeViewProperty =
                        NativeViewPropertyKey.DependencyProperty;
            
                }
            }
            ]]>
            </code>
            <code lang="VB.NET">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            
            Namespace WebControlSample
                ''' <summary>
                ''' Interaction logic for ChildWindow.xaml
                ''' </summary>
                Partial Public Class ChildWindow
                    Inherits Window
            
                    Public Sub New()
                        InitializeComponent()
            
                        ' In this example, ShowCreatedWebView of all WebControls, 
                        ' is handled by a common handler.
                        AddHandler webControl.ShowCreatedWebView, AddressOf App.OnShowNewView
                    End Sub
            
                    Protected Overrides Sub OnClosed(ByVal e As EventArgs)
                        MyBase.OnClosed(e)
            
                        ' Destroy the WebControl and its underlying view.
                        webControl.Dispose()
                    End Sub
            
                    ' This will be set to the target URL, when this ChildWindow does not
                    ' host a created child view. The WebControl, is bound to this property.
                    Public Property Source() As Uri
                        Get
                            Return TryCast(Me.GetValue(SourceProperty), Uri)
                        End Get
                        Set(ByVal value As Uri)
                            SetValue(SourceProperty, value)
                        End Set
                    End Property
            
                    Public Shared ReadOnly SourceProperty As DependencyProperty =
                        DependencyProperty.Register("Source", GetType(Uri),
                        GetType(ChildWindow), New UIPropertyMetadata(Nothing))
            
                    ' This will be set to the created child view that the WebControl will wrap,
                    ' when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    ' is bound to this property.
                    Public Property NativeView() As IntPtr
                        Get
                            Return CType(Me.GetValue(ChildWindow.NativeViewProperty), IntPtr)
                        End Get
                        Friend Set(ByVal value As IntPtr)
                            Me.SetValue(ChildWindow.NativeViewPropertyKey, value)
                        End Set
                    End Property
            
                    Private Shared ReadOnly NativeViewPropertyKey As DependencyPropertyKey =
                        DependencyProperty.RegisterReadOnly("NativeView", GetType(IntPtr),
                        GetType(ChildWindow), New FrameworkPropertyMetadata(IntPtr.Zero))
            
                    Public Shared ReadOnly NativeViewProperty As DependencyProperty =
                        NativeViewPropertyKey.DependencyProperty
                End Class
            End Namespace
            ]]>
            </code>
            Below is the common <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> handler, defined in our <see cref="T:System.Windows.Application"/> object
            code-behind:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            using Awesomium.Windows.Controls;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for App.xaml
                /// </summary>
                public partial class App : Application
                {
                    private void Application_Exit( object sender, ExitEventArgs e )
                    {
                        // Shutdown the Core.
                        WebCore.Shutdown();
                    }
            
                    // This static handler, will handle the ShowCreatedWebView event for both the 
                    // WebControl of our main application window, as well as for any other windows
                    // hosting WebControls.
                    internal static void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
                    {
                        WebControl webControl = sender as WebControl;
            
                        if ( webControl == null )
                            return;
            
                        if ( !webControl.IsLive )
                            return;
            
                        // Create an instance of our application's child window, that will
                        // host the new view instance, either we wrap the created child view,
                        // or we let the WebControl create a new underlying web-view.
                        ChildWindow newWindow  = new ChildWindow();
            
                        // Treat popups differently. If IsPopup is true, the event is always
                        // the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
                        // Our application does not recognize user defined, non-standard specs. 
                        // Therefore child views opened with non-standard specs, will not be presented as 
                        // popups but as regular new windows (still wrapping the child view however -- se below).
                        if ( e.IsPopup && !e.IsUserSpecsOnly )
                        {
                            // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
                            Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();
            
                            // Set the created native view as the underlying view of the
                            // WebControl. This will maintain the relationship between
                            // the parent view and the child, usually required when the new view
                            // is the result of 'window.open' (JS can access the parent window through
                            // 'window.opener'; the parent window can manipulate the child through the 'window'
                            // object returned from the 'window.open' call).
                            newWindow.NativeView = e.NewViewInstance;
                            // Do not show in the taskbar.
                            newWindow.ShowInTaskbar = false;
                            // Set a border-style to indicate a popup.
                            newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow;
                            // Set resizing mode depending on the indicated specs.
                            newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;
            
                            // If the caller has not indicated a valid size for the new popup window,
                            // let it be opened with the default size specified at design time.
                            if ( ( screenRect.Width > 0 ) && ( screenRect.Height > 0 ) )
                            {
                                // Assign the indicated size.
                                newWindow.Width = screenRect.Width;
                                newWindow.Height = screenRect.Height;
                            }
            
                            // Show the window.
                            newWindow.Show();
            
                            // If the caller has not indicated a valid position for the new popup window,
                            // let it be opened in the default position specified at design time.
                            if ( ( screenRect.Y > 0 ) && ( screenRect.X > 0 ) )
                            {
                                // Move it to the indicated coordinates.
                                newWindow.Top = screenRect.Y;
                                newWindow.Left = screenRect.X;
                            }
                        }
                        else if ( e.IsWindowOpen || e.IsPost )
                        {
                            // No specs or only non-standard specs were specified, but the event is still 
                            // the result of 'window.open', or of an HTML form with tagret="_blank" and method="post". 
                            // We will open a normal window but we will still wrap the new native child view, 
                            // maintaining its relationship with the parent window.
                            newWindow.NativeView = e.NewViewInstance;
                            // Show the window.
                            newWindow.Show();
                        }
                        else
                        {
                            // The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
                            // and method="post"., therefore it's most probably the result of a link with target='_blank'.
                            // We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
                            // create its own underlying view. Setting Cancel to true tells the core to destroy the 
                            // created child view.
                            //
                            // Why don't we always wrap the native view passed to ShowCreatedWebView?
                            //
                            // - In order to maintain the relationship with their parent view,
                            // child views execute and render under the same process (awesomium_process)
                            // as their parent view. If for any reason this child process crashes,
                            // all views related to it will be affected. When maintaining a parent-child 
                            // relationship is not important, we prefer taking advantage of the isolated process 
                            // architecture of Awesomium and let each view be rendered in a separate process.
                            e.Cancel = true;
                            // Note that we only explicitly navigate to the target URL, when a new view is 
                            // about to be created, not when we wrap the created child view. This is because 
                            // navigation to the target URL (if any), is already queued on created child views. 
                            // We must not interrupt this navigation as we would still be breaking the parent-child
                            // relationship.
                            newWindow.Source = e.TargetURL;
                            // Show the window.
                            newWindow.Show();
                        }
                    }
                }
            }
            ]]>
            </code>
            <code lang="VB">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            Imports Awesomium.Windows.Controls
            
            Namespace WebControlSample
            	''' <summary>
            	''' Interaction logic for App.xaml
            	''' </summary>
            	Partial Public Class App
            		Inherits Application
            
            		Private Sub Application_Exit(ByVal sender As Object, ByVal e As ExitEventArgs)
            			' Shutdown the Core.
            			WebCore.Shutdown()
            		End Sub
            
            		' This static handler, will handle the ShowCreatedWebView event for both the 
            		' WebControl of our main application window, as well as for any other windows
            		' hosting WebControls.
            		Friend Shared Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            			Dim webControl As WebControl = TryCast(sender, WebControl)
            
            			If webControl Is Nothing Then Return
            
            			If Not webControl.IsLive Then Return
            
            			' Create an instance of our application's child window, that will
            			' host the new view instance, either we wrap the created child view,
            			' or we let the WebControl create a new underlying web-view.
            			Dim newWindow As New ChildWindow()
            
            			' Treat popups differently. If IsPopup is true, the event is always
            			' the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
            			' Our application does not recognize user defined, non-standard specs. 
            			' Therefore child views opened with non-standard specs, will not be presented as 
            			' popups but as regular new windows (still wrapping the child view however -- se below).
            			If e.IsPopup AndAlso (Not e.IsUserSpecsOnly) Then
            				' JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
            				Dim screenRect As Int32Rect = e.Specs.InitialPosition.GetInt32Rect()
            
            				' Set the created native view as the underlying view of the
            				' WebControl. This will maintain the relationship between
            				' the parent view and the child, usually required when the new view
            				' is the result of 'window.open' (JS can access the parent window through
            				' 'window.opener'; the parent window can manipulate the child through the 'window'
            				' object returned from the 'window.open' call).
            				newWindow.NativeView = e.NewViewInstance
            				' Do not show in the taskbar.
            				newWindow.ShowInTaskbar = False
            				' Set a border-style to indicate a popup.
            				newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow
            				' Set resizing mode depending on the indicated specs.
            				newWindow.ResizeMode = If(e.Specs.Resizable, ResizeMode.CanResizeWithGrip, ResizeMode.NoResize)
            
            				' If the caller has not indicated a valid size for the new popup window,
            				' let it be opened with the default size specified at design time.
            				If (screenRect.Width > 0) AndAlso (screenRect.Height > 0) Then
            					' Assign the indicated size.
            					newWindow.Width = screenRect.Width
            					newWindow.Height = screenRect.Height
            				End If
            
            				' Show the window.
            				newWindow.Show()
            
            				' If the caller has not indicated a valid position for the new popup window,
            				' let it be opened in the default position specified at design time.
            				If (screenRect.Y > 0) AndAlso (screenRect.X > 0) Then
            					' Move it to the indicated coordinates.
            					newWindow.Top = screenRect.Y
            					newWindow.Left = screenRect.X
            				End If
            			ElseIf (e.IsWindowOpen OrElse e.IsPost) Then
            				' No specs or only non-standard specs were specified, but the event is still 
            				' the result of 'window.open' or of an HTML form with tagret="_blank" and method="post".
            				' We will open a normal window but we will still wrap the new native child view, 
            				' maintaining its relationship with the parent window.
            				newWindow.NativeView = e.NewViewInstance
            				' Show the window.
            				newWindow.Show()
            			Else
            				' The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
            				' and method="post"., therefore it's most probably the result of a link with target='_blank'.
            				' We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
            				' create its own underlying view. Setting Cancel to true tells the core to destroy the 
            				' created child view.
            				'
            				' Why don't we always wrap the native view passed to ShowCreatedWebView?
            				'
            				' - In order to maintain the relationship with their parent view,
            				' child views execute and render under the same process (awesomium_process)
            				' as their parent view. If for any reason this child process crashes,
            				' all views related to it will be affected. When maintaining a parent-child 
            				' relationship is not important, we prefer taking advantage of the isolated process 
            				' architecture of Awesomium and let each view be rendered in a separate process.
            				e.Cancel = True
            				' Note that we only explicitly navigate to the target URL, when a new view is 
            				' about to be created, not when we wrap the created child view. This is because 
            				' navigation to the target URL (if any), is already queued on created child views. 
            				' We must not interrupt this navigation as we would still be breaking the parent-child
            				' relationship.
            				newWindow.Source = e.TargetURL
            				' Show the window.
            				newWindow.Show()
            			End If
            		End Sub
            	End Class
            End Namespace
            ]]>
            </code>
            For the complete sample, see the <b>C# WebControlSample</b> of the <b>Awesomium.NET Samples</b> solution, available with the SDK.
            </example>
        </member>
        <member name="F:Awesomium.Core.JSWindowOpenSpecs.Empty">
            <summary>
            An empty, uninitialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JSWindowOpenSpecs.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSWindowOpenSpecs.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSWindowOpenSpecs.op_Equality(Awesomium.Core.JSWindowOpenSpecs,Awesomium.Core.JSWindowOpenSpecs)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instances are equivalent.
            </summary>
            <param name="wo1">
            The <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance that is to the left of the equality operator.
            </param>
            <param name="wo2">
            The <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wo1"/> and <paramref name="wo2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSWindowOpenSpecs.op_Inequality(Awesomium.Core.JSWindowOpenSpecs,Awesomium.Core.JSWindowOpenSpecs)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instances are not equal.
            </summary>
            <param name="wo1">
            The <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wo2">
            The <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wo1"/> and <paramref name="wo2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.IsBlank">
            <summary>
            Gets if the target attribute specified in the original <c>window.open</c> call,
            is <c>_blank</c> indicating that the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> 
            should be loaded into a new window. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.IsParent">
            <summary>
            Gets if the target attribute specified in the original <c>window.open</c> call,
            is <c>_blank</c> indicating that the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> 
            should be loaded into the parent frame. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.IsSelf">
            <summary>
            Gets if the target attribute specified in the original <c>window.open</c> call,
            is <c>_blank</c> indicating that the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> 
            should replace the current page. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.IsTop">
            <summary>
            Gets if the target attribute specified in the original <c>window.open</c> call,
            is <c>_blank</c> indicating that the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> 
            should replace any framesets that may be loaded. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecsOnly">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> contains only non-standard,
            user defined specs (see <see cref="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.HasUserSpecs">
            <summary>
            Gets if an any non-standard, user defined specs were specified.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.IgnoredSpecs">
            <summary>
            Gets an array of specs that should be ignored.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Name">
            <summary>
            Gets the name of the new window, if any.
            </summary>
            <remarks>
            If this is an empty string, the page may have specified a target attribute
            instead of a name for the <c>name</c> parameter, in the <c>window.open</c>
            call.
            <note>
            Only an empty <i>name</i> parameter or a <c>_blank</c> target attribute
            specified as the <i>name</i> parameter in a <c>window.open</c> call or
            on a link, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event.
            Other target attributes (such as <c>_top</c>), passed to either a
            <c>window.open</c> or specified on a link, are handled by Awesomium internally.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.InitialPosition">
            <summary>
            Gets the initial position and size, if any, indicated by the opener for the new window.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.ChannelMode">
            <summary>
            Gets if the new window should be displayed in <i>theater mode</i>.
            The default is <c>false</c>.
            </summary>
            <remarks>
            This is a non-standard flag introduced by IE, but respected by several browsers.
            If this is <c>true</c>, <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Location"/> and <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Toolbar"/> return
            <c>true</c> by default, even if they have been explicitly set to <c>false</c> in
            the <c>window.open</c> call. For example, the <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> 
            instance generated for the following <c>window.open</c> call, will have its
            <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Location"/> and <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Toolbar"/> properties returning <c>true</c>:
            <code lang="JavaScript">
            window.open("file.html","","location=0,toolbar=0,channelmode=1");
            </code>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.FullScreen">
            <summary>
            Gets if the new window should be displayed in full-screen mode.
            The default is <c>false</c>.
            </summary>
            <remarks>
            This is a non-standard flag introduced by IE, but respected by several browsers.
            If this is <c>true</c>, <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Location"/> and <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Toolbar"/> return
            <c>false</c> by default, even if they have not been defined or they have been 
            explicitly set to <c>true</c>, in the <c>window.open</c> call. 
            For example, the <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/>  instance generated for the following 
            <c>window.open</c> calls, will have its <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Location"/> and <see cref="P:Awesomium.Core.JSWindowOpenSpecs.Toolbar"/> 
            properties returning <c>false</c>:
            <code lang="JavaScript">
            window.open("file.html","","location=1,toolbar=1,fullscreen=1");
            </code>
            <code lang="JavaScript">
            window.open("file.html","","fullscreen=1");
            </code>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Location">
            <summary>
            Gets if the new window should display the address box. The default is <c>true</c>.
            </summary>
            <remarks>
            <note>
            The value of this property can be affected by the value of <see cref="P:Awesomium.Core.JSWindowOpenSpecs.ChannelMode"/>
            and <see cref="P:Awesomium.Core.JSWindowOpenSpecs.FullScreen"/>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Menubar">
            <summary>
            Gets if the new window should display the menu bar. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Resizable">
            <summary>
            Gets if the new window should be resizable. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Scrollbars">
            <summary>
            Gets if the new window should display scroll bars. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Titlebar">
            <summary>
            Gets if the new window should display the title bar. Should be ignored unless the 
            calling application is an HTML Application or a trusted dialog box. 
            The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Toolbar">
            <summary>
            Gets if the new window should display the browser toolbar. The default is <c>true</c>.
            </summary>
            <remarks>
            <note>
            The value of this property can be affected by the value of <see cref="P:Awesomium.Core.JSWindowOpenSpecs.ChannelMode"/>
            and <see cref="P:Awesomium.Core.JSWindowOpenSpecs.FullScreen"/>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.Status">
            <summary>
            Gets if the new window should display a status bar. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.UserSpecs">
            <summary>
            Gets a list of any additional user defined, non-standard specs, specified
            to the <c>window.open</c> call. These may or may not be recognized by an
            application.
            </summary>
            <remarks>
            <note>
            Note that any <c>window.open</c> call with defined <i>specs</i>, will fire
            a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event with <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/>
            set to <c>true</c>, even if the only <i>specs</i> specified, are user defined,
            non-standard specs. If your application does not recognize such specs,
            it should ignore the value of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/>
            all together and wrap the new child view regularly.
            <p/>
            When a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event with <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/>
            set to <c>true</c> is fired, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/>
            indicates if the <i>specs</i> passed to the <c>window.open</c> call, are only non-stardard, 
            user defined specs.
            </note>
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Core.JSWindowOpenSpecs.IsEmpty">
            <summary>
            Gets if this is an empty, uninitialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/> instance.
            </summary>
        </member>
        <member name="T:Awesomium.Core.AweRect">
            <summary>
            Represents a generic rectangle with pixel dimensions.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.X">
            <summary>
            The x-coordinate of the origin of the rectangle.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.Y">
            <summary>
            The y-coordinate of the origin of the rectangle.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="F:Awesomium.Core.AweRect.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="M:Awesomium.Core.AweRect.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.AweRect.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.AweRect.Intersect(Awesomium.Core.AweRect)">
            <summary>
            Replaces this <see cref="T:Awesomium.Core.AweRect"/> with the intersection of itself and the specified <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="rect">
            The <see cref="T:Awesomium.Core.AweRect"/> with which to intersect.
            </param>
        </member>
        <member name="M:Awesomium.Core.AweRect.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">
            The horizontal offset.
            </param>
            <param name="y">
            The vertical offset.
            </param>
        </member>
        <member name="M:Awesomium.Core.AweRect.op_Equality(Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.AweRect"/> structures have equal location and size.
            </summary>
            <param name="ar1">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the left of the equality operator.
            </param>
            <param name="ar2">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the right of the equality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.AweRect"/> structures have equal <see cref="F:Awesomium.Core.AweRect.X"/>, 
            <see cref="F:Awesomium.Core.AweRect.Y"/>, <see cref="F:Awesomium.Core.AweRect.Width"/>, and <see cref="F:Awesomium.Core.AweRect.Height"/> properties.
            </returns>
        </member>
        <member name="M:Awesomium.Core.AweRect.op_Inequality(Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.AweRect"/> structures differ in location or size.
            </summary>
            <param name="ar1">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the left of the inequality operator.
            </param>
            <param name="ar2">
            The <see cref="T:Awesomium.Core.AweRect"/> structure that is to the right of the inequality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if any of the <see cref="F:Awesomium.Core.AweRect.X"/>, 
            <see cref="F:Awesomium.Core.AweRect.Y"/>, <see cref="F:Awesomium.Core.AweRect.Width"/>, or <see cref="F:Awesomium.Core.AweRect.Height"/> properties of the two 
            <see cref="T:Awesomium.Core.AweRect"/> structures are unequal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Awesomium.Core.Range">
            <summary>
            Represents a range.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Range.Empty">
            <summary>
            An empty range.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Range.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Range.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Range.op_Equality(Awesomium.Core.Range,Awesomium.Core.Range)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Range"/> instances are equivalent.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the left of the equality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Range.op_Inequality(Awesomium.Core.Range,Awesomium.Core.Range)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Range"/> instances are not equal.
            </summary>
            <param name="r1">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the left of the inequality operator.
            </param>
            <param name="r2">
            The <see cref="T:Awesomium.Core.Range"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="r1"/> and <paramref name="r2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Range.Start">
            <summary>
            Gets the start point of the range.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Range.End">
            <summary>
            Gets the end point of the range.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Range.Length">
            <summary>
            Gets the length of the range.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebURLMarshaler.GetInstance(System.String)">
            <summary>
            In addition to implementing the ICustomMarshaler interface, custom marshalers must implement a static method 
            called GetInstance that accepts a String as a parameter and has a return type of ICustomMarshaler. 
            This static method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler. 
            </summary>
            <param name="pstrCookie">
            A cookie that the method can use to customize the returned custom marshaler.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.WebURLMarshaler"/> instance.
            </returns>
        </member>
        <member name="T:Awesomium.Core.NavigationInfo">
            <summary>
            Indicates the verbosity of navigation info.
            </summary>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/>
        </member>
        <member name="F:Awesomium.Core.NavigationInfo.None">
            <summary>
            <see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NavigationInfo.Normal">
            <summary>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NavigationInfo.Verbose">
            <summary>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PrintConfig">
            <summary>
            Represents print-to-file configuration settings.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>
        </member>
        <member name="F:Awesomium.Core.PrintConfig.Default">
            <summary>
            Gets a <see cref="T:Awesomium.Core.PrintConfig"/> with default configuration settings.
            </summary>
        </member>
        <member name="M:Awesomium.Core.PrintConfig.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.PrintConfig.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.PrintConfig.op_Equality(Awesomium.Core.PrintConfig,Awesomium.Core.PrintConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.PrintConfig"/> instances are equal.
            </summary>
            <param name="pc1">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the left of the equality operator.
            </param>
            <param name="pc2">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="pc1"/> and <paramref name="pc2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.PrintConfig.op_Inequality(Awesomium.Core.PrintConfig,Awesomium.Core.PrintConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.PrintConfig"/> instances are not equal.
            </summary>
            <param name="pc1">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the left of the inequality operator.
            </param>
            <param name="pc2">
            The <see cref="T:Awesomium.Core.PrintConfig"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="pc1"/> and <paramref name="pc2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.PageSize">
            <summary>
            Gets or sets the dimensions (width/height) of the page, in points.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.Dpi">
            <summary>
            Gets or sets the number of dots per inch.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.SplitPagesIntoMultipleFiles">
            <summary>
            Gets or sets if we should make a new file for each page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.PrintConfig.PrintSelectionOnly">
            <summary>
            Gets or sets if we should only print the current selection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ReleaseInfo">
            <summary>
            Specifies important versioning and identification constants used throughout the project.
            </summary>
            <tocexclude />
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.LIBRARY_VERSION">
            <summary>
            Specifies the native Awesomium library version.
            </summary>
            <remarks>
            <note type="caution">
            Always keep this synchronized with the current version of Awesomium.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.ASSEMBLY_VERSION">
            <summary>
            Specifies the Awesomium.Core assembly version.
            </summary>
            <remarks>
            This is used in various attributes of the assembly where file and assembly
            version is defined.
            <note type="caution">
            Always keep this synchronized with the current version of the assembly.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.PRODUCT_COMPANY">
            <summary>
            Specifies the Awesomium.NET product company.
            </summary>
            <remarks>
            This is used in various attributes of the assembly where file and assembly
            version is defined.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.PRODUCT_COPYRIGHT">
            <summary>
            Specifies the Awesomium.Core assembly copyright.
            </summary>
            <remarks>
            This is used in various attributes of the assembly where file and assembly
            version is defined.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.PRODUCT_TRADEMARK">
            <summary>
            Specifies the Awesomium product trademark.
            </summary>
            <remarks>
            This is used in various attributes of the assembly where file and assembly
            version is defined.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.PUBLIC_KEY_TOKEN">
            <summary>
            Specifies the Public Key Token of the assembly's Strong Name.
            </summary>
            <remarks>
            This is used with <see cref="F:Awesomium.Core.WebCore.DLLName"/> and allows indirect
            access to the Awesomium native library through the strong name of
            Awesomium.Core. It is necessary for installing the native dependencies
            in GAC.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.SWF_PUBLIC_KEY_TOKEN">
            <summary>
            Specifies the Public Key Token of the Awesomium.Windows.Forms assembly.
            </summary>
            <remarks>
            This is used by the Windows Forms <c>WebControl</c>.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Core assembly's Strong Name.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_DESIGN_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls.Design.10
            assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls.Design.10 assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_DESIGN_11_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls.Design.11
            assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls.Design.11 assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.WPF_DESIGN_12_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Controls.Design.12
            assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Controls.Design.12 assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.SWF_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Forms assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Forms assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.SWF_DESIGN_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Windows.Forms.Design
            assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Windows.Forms.Design assembly.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ReleaseInfo.UNITY_PUBLIC_KEY">
            <summary>
            Specifies the full Public Key of the Awesomium.Unity assembly's Strong Name.
            </summary>
            <remarks>
            This is used with the InternalsVisibleToAttribute to allow the internals of this
            assembly, be visible from the Awesomium.Unity assembly.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.IResourceInterceptor">
            <summary>
            Used to intercept requests and responses for resources.
            </summary>
            <remarks>
            Assign your <see cref="T:Awesomium.Core.IResourceInterceptor"/> to <see cref="P:Awesomium.Core.WebCore.ResourceInterceptor"/>,
            to intercept requests for resources.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebCore.ResourceInterceptor"/>
        </member>
        <member name="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)">
            <summary>
            Called when a request for resources occurs. You can use 
            this to modify requests before they are sent, respond to requests using 
            your own custom resource-loading back-end, or to monitor requests for 
            tracking purposes.
            </summary>
            <param name="request">
            The resource request.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.ResourceResponse"/> (see <see cref="M:Awesomium.Core.ResourceResponse.Create(System.UInt32,System.IntPtr,System.String)"/>)
            to override the response; otherwise, return <c>null</c> (<c>Nothing</c> in Visual Basic) to allow 
            normal behavior.
            </returns>
            <remarks>
            <note type="caution">
            This method is called on the I/O Thread. Therefore, you should not
            make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.IResourceInterceptor.OnFilterNavigation(Awesomium.Core.NavigationRequest)">
            <summary>
            Called when a frame navigation occurs.
            </summary>
            <param name="request">
            A <see cref="T:Awesomium.Core.NavigationRequest"/> instance providing information
            about the navigation request.
            </param>
            <returns>
            <c>true</c> to cancel and block the navigation; <c>false</c> otherwise.
            </returns>
            <remarks>
            <note>
            This global function overrides individual <see cref="T:Awesomium.Core.INavigationInterceptor"/>
            services of <see cref="T:Awesomium.Core.IWebView"/> instances. If you cancel a navigation here
            by returning <c>true</c>, <see cref="E:Awesomium.Core.INavigationInterceptor.BeginLoadingFrame"/>
            and <see cref="E:Awesomium.Core.INavigationInterceptor.BeginNavigation"/> will never be called.
            <p/>
            Navigation rules added to the <see cref="T:Awesomium.Core.INavigationInterceptor"/> of the
            view, will also be ignored.
            </note>
            <note type="caution">
            This method is called on the I/O Thread. Therefore, you should not
            make any calls to instances and members that are not thread-safe.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.NavigationInterceptor.RaisePropertyChanged(System.String)">
            <summary>
            Helper method to raise the <see cref="E:Awesomium.Core.NavigationInterceptor.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property whose value has changed.
            </param>
        </member>
        <member name="M:Awesomium.Core.NavigationInterceptor.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Core.NavigationInterceptor.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.NavigationRule">
            <summary>
            Represents the rules that can applied to a URL that matches
            a <see cref="P:Awesomium.Core.NavigationFilterRule.Filter"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NavigationRule.Allow">
            <summary>
            Allow any URLs that match a specified <see cref="P:Awesomium.Core.NavigationFilterRule.Filter"/>,
            to load.
            </summary>
        </member>
        <member name="F:Awesomium.Core.NavigationRule.Deny">
            <summary>
            Prevent loading any URLs that match a specified <see cref="P:Awesomium.Core.NavigationFilterRule.Filter"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Core.NavigationFilterRule">
            <summary>
            Represents a filtering rule that can be applied to URLs
            that the frames in a page loaded in an <see cref="T:Awesomium.Core.IWebView"/> instance,
            navigate to.
            </summary>
            <seealso cref="T:Awesomium.Core.INavigationInterceptor"/>
        </member>
        <member name="M:Awesomium.Core.NavigationFilterRule.#ctor(System.String,Awesomium.Core.NavigationRule)">
            <summary>
            Initializes a new instance of <see cref="T:Awesomium.Core.NavigationFilterRule"/>.
            </summary>
            <param name="filter">
            The navigation filtering pattern.
            </param>
            <param name="rule">
            The rule to apply to requests matching the <paramref name="filter"/>.
            </param>
        </member>
        <member name="M:Awesomium.Core.NavigationFilterRule.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.NavigationFilterRule.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.NavigationFilterRule.op_Equality(Awesomium.Core.NavigationFilterRule,Awesomium.Core.NavigationFilterRule)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.NavigationFilterRule"/> instances are equivalent.
            </summary>
            <param name="nvf1">
            The <see cref="T:Awesomium.Core.NavigationFilterRule"/> instance that is to the left of the equality operator.
            </param>
            <param name="nvf2">
            The <see cref="T:Awesomium.Core.NavigationFilterRule"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="nvf1"/> and <paramref name="nvf2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.NavigationFilterRule.op_Inequality(Awesomium.Core.NavigationFilterRule,Awesomium.Core.NavigationFilterRule)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.NavigationFilterRule"/> instances are not equal.
            </summary>
            <param name="nvf1">
            The <see cref="T:Awesomium.Core.NavigationFilterRule"/> instance that is to the left of the inequality operator.
            </param>
            <param name="nvf2">
            The <see cref="T:Awesomium.Core.NavigationFilterRule"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="nvf1"/> and <paramref name="nvf2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.NavigationFilterRule.Filter">
            <summary>
            Gets the filtering pattern to match to the URL 
            a frame navigates to.
            </summary>
            <remarks>
            <note>
            This can contain wildcards.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.NavigationFilterRule.Rule">
            <summary>
            Gets the rule to apply to the specified <see cref="P:Awesomium.Core.NavigationFilterRule.Filter"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceInterceptor.SyncRoot">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ResourceRequest">
            <summary>
            Represents a request for a URL resource. You can get information about the request or modify it 
            (change <c>GET</c> to <c>POST</c>, modify headers, etc.).
            </summary>
            <seealso cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.Cancel">
            <summary>
            Cancels this request.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.Clear">
            <summary>
            Clears all upload elements.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.AppendExtraHeader(System.String,System.String)">
            <summary>
            Add a single HTTP header key/value pair.
            </summary>
            <param name="name">
            The name of the HTTP header.
            </param>
            <param name="value">
            The value assigned to the specified header key.
            </param>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.AppendUploadFilePath(System.String)">
            <summary>
            Appends a file for <c>POST</c> data (adds a new <see cref="T:Awesomium.Core.UploadElement"/>).
            </summary>
            <param name="path">The path to the file to append.</param>
        </member>
        <member name="M:Awesomium.Core.ResourceRequest.AppendUploadBytes(System.String,System.UInt32)">
            <summary>
            Appends a string of bytes for <c>POST</c> data (adds a new <see cref="T:Awesomium.Core.UploadElement"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.ProcessId">
            <summary>
            Gets the process identifier where this request originated from. This corresponds
            to <see cref="P:Awesomium.Core.IWebView.ProcessId"/>
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.ViewId">
            <summary>
            The unique identifier of the view where this request originated from. This corresponds
            to <see cref="P:Awesomium.Core.IWebView.Identifier"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Url">
            <summary>
            Gets the URL associated with this request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Method">
            <summary>
            Gets or sets the HTTP method (usually "GET" or "POST")
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Referrer">
            <summary>
            Gets or sets the referrer.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.ExtraHeaders">
            <summary>
            Gets or sets the extra headers for the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Count">
            <summary>
            Gets the number of upload elements (essentially, batches of POST data).
            </summary>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.Element(System.UInt32)">
            <summary>
            Gets a certain upload element.
            </summary>
            <param name="index">The index of the upload element to seek.</param>
            <returns>An <see cref="T:Awesomium.Core.UploadElement"/> instance.</returns>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.IsWindowOpen">
            <summary>
            Gets if this is the first request sent by a new view that is the
            result of JavaScript <c>window.open</c>.
            </summary>
            <remarks>
            The initial request (<see cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/>) of new views that are the result 
            of JavaScript <c>window.open</c>, is always issued before the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event is fired. 
            <p/>
            By default, Requests that are the result of JavaScript <c>window.open</c> or are <c>POST</c> requests 
            (such as the submission of HTML forms with method <c>POST</c> and target <c>_blank</c>), are not canceled. The user is 
            expected to wrap the new view (see: <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>) when 
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs, without reloading the target URL since navigation to the target URL 
            is already queued on the new view.
            <p/>
            In order to avoid double requests issued to a target URL, any other requests (most possibly links with target 
            <c>_blank</c> or the submission of HTML forms with target <c>_blank</c> and method <c>GET</c> where data is passed through 
            the URL therefore there's no danger of loosing data), <b>are canceled by default</b>, before <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>,
            and the user must then load the target URL manually.
            <p/>
            <c>POST</c> or <c>window.open</c> requests cannot be canceled in advance, as we do not know if the user chooses to wrap 
            the new view (which is the expected behavior). This however can cause implications in certain scenarios (such as in a 
            <i>popup blocker</i> scenario), where users may want to cancel such requests too.
            <p/>
            <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/> allows you to implement an <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel such requests yourself
            prior to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, if you do not intend to wrap the new view at <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            </remarks>
            <seealso cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>
        </member>
        <member name="P:Awesomium.Core.ResourceRequest.IgnoreDataSources">
            <summary>
            Gets or sets if any DataSource handlers for this request, should be ignored.
            </summary>
            <remarks>
            This is useful when you are using <see cref="T:Awesomium.Core.Data.DataSource"/> 
            to override default protocols such as <c>HTTP</c> or <c>FTP</c> (see <see cref="P:Awesomium.Core.WebConfig.AssetProtocol"/>)
            and you only want a subset of requests to be handled by <see cref="T:Awesomium.Core.Data.DataSource"/>.
            The request will be handled by the default handler if this request ignores the
            <see cref="T:Awesomium.Core.Data.DataSource"/> handler. This is set to <c>false</c> by default.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.ResourceResponse">
            <summary>
            Represents a wrapper around a raw block of data and a specified mime-type. It can be used with
            <see cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/> to return a custom resource for a certain resource request.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ResourceResponse.Create(System.UInt32,System.IntPtr,System.String)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.ResourceResponse"/> from a raw block of data. (Data is not owned,
            a copy is made of the supplied buffer.)
            </summary>
            <param name="numBytes">
            Size (in bytes) of the memory buffer.
            </param>
            <param name="buffer">
            Raw memory buffer to be copied.
            </param>
            <param name="mimeType">
            The mime-type of the data. See: http://en.wikipedia.org/wiki/Internet_media_type
            </param>
        </member>
        <member name="M:Awesomium.Core.ResourceResponse.Create(System.String)">
            <summary>
            Creates a ResourceResponse from a file on disk.
            </summary>
            <param name="filePath">
            The path to the file.
            </param>
        </member>
        <member name="T:Awesomium.Core.UploadElement">
            <summary>
            Represents a batch of <i>upload</i> data sent along with a <see cref="T:Awesomium.Core.ResourceRequest"/>.
            This data is usually sent with a <c>POST</c> request.
            </summary>
        </member>
        <member name="F:Awesomium.Core.UploadElement.Empty">
            <summary>
            An empty <see cref="T:Awesomium.Core.UploadElement"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.UploadElement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.UploadElement.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.UploadElement.op_Equality(Awesomium.Core.UploadElement,Awesomium.Core.UploadElement)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.UploadElement"/> instances are equivalent.
            </summary>
            <param name="ue1">
            The <see cref="T:Awesomium.Core.UploadElement"/> instance that is to the left of the equality operator.
            </param>
            <param name="ue2">
            The <see cref="T:Awesomium.Core.UploadElement"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="ue1"/> and <paramref name="ue2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.UploadElement.op_Inequality(Awesomium.Core.UploadElement,Awesomium.Core.UploadElement)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.UploadElement"/> instances are not equal.
            </summary>
            <param name="ue1">
            The <see cref="T:Awesomium.Core.UploadElement"/> instance that is to the left of the inequality operator.
            </param>
            <param name="ue2">
            The <see cref="T:Awesomium.Core.UploadElement"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="ue1"/> and <paramref name="ue2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.UploadElement.IsFilePath">
            <summary>
            Gets is this <see cref="T:Awesomium.Core.UploadElement"/> is a file.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UploadElement.IsBytes">
            <summary>
            Gets is this <see cref="T:Awesomium.Core.UploadElement"/> is a string of bytes.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UploadElement.Bytes">
            <summary>
            Gets the string of bytes associated with this <see cref="T:Awesomium.Core.UploadElement"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UploadElement.FilePath">
            <summary>
            Gets the file path associated with this <see cref="T:Awesomium.Core.UploadElement"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.UploadElement.IsEmpty">
            <summary>
            Gets if this is an empty <see cref="T:Awesomium.Core.UploadElement"/>
            instance.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Wildcard">
            <summary>
            Represents a wildcard running on the
            <see cref="N:System.Text.RegularExpressions"/> engine.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Wildcard.#ctor(System.String)">
            <summary>
            Initializes a wildcard with the given search pattern.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
        </member>
        <member name="M:Awesomium.Core.Wildcard.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a wildcard with the given search pattern and options.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
            <param name="options">A combination of one or more
            <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.</param>
        </member>
        <member name="M:Awesomium.Core.Wildcard.WildcardToRegex(System.String)">
            <summary>
            Converts a wildcard to a regex.
            </summary>
            <param name="pattern">The wildcard pattern to convert.</param>
            <returns>A regex equivalent of the given wildcard.</returns>
        </member>
        <member name="T:Awesomium.Core.CoreResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.AWE_PDF">
             <summary>
               Looks up a localized string similar to &apos;use strict&apos;;
            
            var kDefaultURL = &apos;{0}&apos;;.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.AwesomiumChildProcessTest">
            <summary>
              Looks up a localized string similar to AwesomiumChildProcessTest.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ChildProcessTestDomainName">
            <summary>
              Looks up a localized string similar to Awesomium.ChildProcess.TestDomain.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_AssetHostReserved">
            <summary>
              Looks up a localized string similar to The specified asset host name, is reserved..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CannotDisposeDataSource">
            <summary>
              Looks up a localized string similar to Cannot dispose a DataSource that is assigned to an active WebSession. Make sure that no session is using this DataSource, before disposing it..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CannotDisposeWebSession">
            <summary>
              Looks up a localized string similar to Cannot dispose a WebSession that is assigned to active views or controls active download operations. Make sure that no view and no download operation is using this session before disposing it..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreAlreadyInitialized">
            <summary>
              Looks up a localized string similar to The WebCore is already initialized..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreAlreadyUpdates">
            <summary>
              Looks up a localized string similar to Starting an update loop on a thread with an existing message loop, is not supported..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreNotInitialized">
            <summary>
              Looks up a localized string similar to The WebCore is not initialized..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreNotRunning">
            <summary>
              Looks up a localized string similar to The WebCore is not running..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CoreReInitialize">
            <summary>
              Looks up a localized string similar to You are attempting to re-initialize the WebCore. The WebCore must only be initialized once per process and must be shut down only when the process exits..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_CrossThread">
            <summary>
              Looks up a localized string similar to The calling thread cannot access this object because a different thread owns it..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DataPathUsed">
            <summary>
              Looks up a localized string similar to A WebSession using the same cache, has already been initialized on this system..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DataSourceIsAssigned">
            <summary>
              Looks up a localized string similar to The specified DataSource instance, is assigned to another WebSession. A DataSource can only be used by a single session..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DevToolsNoDOM">
            <summary>
              Looks up a localized string similar to Wait for DocumentReady before creating a Developer Tools Inspector view..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DevToolsView">
            <summary>
              Looks up a localized string similar to Operation not available on a Developer Tools Inspector view..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DevToolsViewExists">
            <summary>
              Looks up a localized string similar to A Developer Tools Inspector view, is already associated with this view. Dispose it before you create another..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DirectoryDataSourceNotInMemory">
            <summary>
              Looks up a localized string similar to Attempted to call this method on a DirectoryDataSource that has not been set to cache resources in memory..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_DownloadItemIsActive">
            <summary>
              Looks up a localized string similar to The specified DownloadItem represents an active download operation..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_IdOutOfRange">
            <summary>
              Looks up a localized string similar to A valid identifier must be greater than 0..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidAsyncResult">
            <summary>
              Looks up a localized string similar to Invalid IAsyncResult specified..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidHandle">
            <summary>
              Looks up a localized string similar to Invalid handle specified..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJpegQuality">
            <summary>
              Looks up a localized string similar to Valid range is 0 to 100..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJSExecution">
            <summary>
              Looks up a localized string similar to Cannot execute Javascript on the page, before the DOM is ready. Wait for the DocumentReady event before executing your Javascript..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJSObject">
            <summary>
              Looks up a localized string similar to This operation is only supported on valid Remote objects..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJSObjectName">
            <summary>
              Looks up a localized string similar to The specified name ({0}), is reserved. It either represents an HTML DOM object, or an object variable already available in the page. Use ExecuteJavascriptWithResult after DocumentReady, to obtain this object..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidJSSynchInvoke">
            <summary>
              Looks up a localized string similar to You cannot make synchronous invocations from inside a synchronous JavaScript method handler..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidSynchInvoke">
            <summary>
              Looks up a localized string similar to You cannot make synchronous invocations from inside a synchronous IPC message dispatcher loop..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidWebView">
            <summary>
              Looks up a localized string similar to This IWebView instance is invalid. It has either been destroyed or it was never properly instantiated..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_InvalidZoom">
            <summary>
              Looks up a localized string similar to Valid range is from 10 to 500..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_JSAnonymousFunction">
            <summary>
              Looks up a localized string similar to Do not pass anonymous delegates, lambda expressions or delegates returned from a property getter to JavaScript. Instead, pass the delegate of an explicitly defined method..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_JSDisabled">
            <summary>
              Looks up a localized string similar to Javascript is disabled on the WebSession of this IWebView instance..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_JSFunctionSpecialName">
            <summary>
              Looks up a localized string similar to Do not pass anonymous delegates, lambda expressions or delegates returned from a property getter to this method. Instead, use an overload that takes a methodName parameter..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_JSInvalidArray">
            <summary>
              Looks up a localized string similar to Cannot cast an array of {0} to an array of Awesomium.Core.JSValue.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_JSObjectDisposed">
            <summary>
              Looks up a localized string similar to The JSObject instance has been disposed..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_JSObjectTimeout">
            <summary>
              Looks up a localized string similar to The operation has timed out. The child process or the I/O thread, are busy. Please try to create the object again..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_JSObjectUndefined">
            <summary>
              Looks up a localized string similar to You cannot perform this operation on an invalid (undefined) object..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_NoLog">
            <summary>
              Looks up a localized string similar to LogLevel.None was specified for WebConfig.LogLevel during WebCore initialization..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_NoRemoteDebugging">
            <summary>
              Looks up a localized string similar to Creating Developer Tools Inspector views, is only supported if Remote Debugging is activated during initialization (see: WebConfig.RemoteDebuggingPort)..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_NotChildProcess">
            <summary>
              Looks up a localized string similar to This method should only be called from an Awesomium child process..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_NullReference">
            <summary>
              Looks up a localized string similar to Object reference not set to an instance of an object..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_OutputDirectoryDoesNotExist">
            <summary>
              Looks up a localized string similar to The specified output directory ({0}), does not exist..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_PackagePathNotFound">
            <summary>
              Looks up a localized string similar to Could not locate the path to the native Awesomium library..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_PAKFileNotFound">
            <summary>
              Looks up a localized string similar to The specified PAK file, was not found..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_SurfaceDisposed">
            <summary>
              Looks up a localized string similar to The specified ISurface instance, has been disposed..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_SurfaceIsAssigned">
            <summary>
              Looks up a localized string similar to The specified ISurface instance, is assigned to another view. A surface can only be used by a single view..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_SyncCtxExited">
            <summary>
              Looks up a localized string similar to An error occurred invoking the method. The destination thread no longer exists..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_SyncCtxInstallFailed">
            <summary>
              Looks up a localized string similar to Failed to create and assign a synchronization context..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_SyncCtxSendTimeout">
            <summary>
              Looks up a localized string similar to The timeout period elapsed prior to completion of the operation..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_ViewAlreadyCreated">
            <summary>
              Looks up a localized string similar to You cannot change the value of this property when the underlying web-view of this component, has already been created..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_ViewWrapped">
            <summary>
              Looks up a localized string similar to The specified web-view instance has already been wrapped. You can access it through: WebCore.Views.GetByHandle.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_WebControlDisabled">
            <summary>
              Looks up a localized string similar to The control is disabled either manually or it has been destroyed..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.ERR_WebViewNoParentWindow">
            <summary>
              Looks up a localized string similar to You cannot access members on a windowed IWebView instance, until you set a valid IWebView.ParentWindow..
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.HTML_Download">
             <summary>
               Looks up a localized string similar to &lt;!DOCTYPE html&gt;
            
            &lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
            &lt;head&gt;
                &lt;meta charset=&quot;utf-8&quot; /&gt;
                &lt;title&gt;Download&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;a id=&quot;downloadLink&quot; href=&quot;{0}&quot; download&gt;&lt;div style=&apos;width: 100px; height: 100px&apos;&gt;&lt;/div&gt;&lt;/a&gt;
            &lt;/body&gt;
            &lt;/html&gt;.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.JS_DevTools">
             <summary>
               Looks up a localized string similar to // Some useful extensions to String.
            if (typeof String.prototype.startsWith != &apos;function&apos;) {{
                Object.defineProperty(String.prototype, &apos;startsWith&apos;, {{
                    value: function(str) {{ return this.slice(0, str.length) == str; }},
                    configurable: true
                }});
            }}
            if (typeof String.prototype.endsWith != &apos;function&apos;) {{
                Object.defineProperty(String.prototype, &apos;endsWith&apos;, {{
                    value: function(str){{ return this.slice(-str.length) == str; }},
                    configurable: true
                }});
            }}
            
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.JS_DevToolsClose">
             <summary>
               Looks up a localized string similar to &lt;!DOCTYPE html&gt;
            
            &lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
            &lt;head&gt;
                &lt;meta charset=&quot;utf-8&quot; /&gt;
                &lt;title&gt;Developer Tools - Closed&lt;/title&gt;
                &lt;link href=&apos;http://fonts.googleapis.com/css?family=Lato:300&apos; rel=&apos;stylesheet&apos; type=&apos;text/css&apos;&gt;
                &lt;style&gt;
                    * {
                        margin: 0;
                    }
            
                    html, body {
                        height: 100%;
                        width: 100%;
                        font-family: &apos;Lato&apos;, Helvetica, Tahoma;
                        display: table;
                    }
            
                    button {
                 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.JS_DevToolsInit">
             <summary>
               Looks up a localized string similar to &lt;!DOCTYPE html&gt;
            
            &lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
            &lt;head&gt;
                &lt;meta charset=&quot;utf-8&quot; /&gt;
                &lt;title&gt;Developer Tools - Loading&lt;/title&gt;
                &lt;style&gt;
                    * {
                        margin: 0;
                    }
            
                    html, body {
                        height: 100%;
                    }
            
                    #spinnerDiv {
                        min-height: 100%;
                        height: auto !important;
                        height: 100%;
                    }
                &lt;/style&gt;
                &lt;script&gt;
            
                    !function (a, b) { &quot;object&quot; == typeof exports ? module.export [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.JS_OSMJIF">
             <summary>
               Looks up a localized string similar to AweJIF = function() {{
                if (this.__proto__ !== Object.prototype) {{
                    delete window.AweJIF;
                    throw new TypeError(&apos;Illegal constructor&apos;, &apos;AweJIF&apos;, 04);
                }}
                Object.defineProperty(this, &apos;toString&apos;, {{
                    value: (function() {{ return objToString.apply(this, arguments); }}).bind(this)
                }});
            
                // Just a placeholder needed so that String.Format does not fail with unused ids.
                // Unused ids here only (see: JavascriptHelper::JSWindowHandlers).
                var formatArray = [&apos;{ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.JS_OSMJIF_AppInit">
            <summary>
              Looks up a localized string similar to if (window.OSMJIF) { OSMJIF.appInit(); }.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.JS_OSMJIF_Init">
             <summary>
               Looks up a localized string similar to if (!window.OSMJIF) {
                console.log(&apos;### Awesomium.NET JavaScript Interoperation Framework has not been created!&apos;);
            }
            
            if (window.OSMJIF &amp;&amp; !OSMJIF.assignedOSMHandlers) {
                OSMJIF.init();
                OSMJIF.log(&apos;JIF delayed initialization&apos;);
            }
            
            if (window.OSMJIF &amp;&amp; !OSMJIF.assignedOSMAppHandlers) {
                OSMJIF.appInit();
                OSMJIF.log(&apos;JIF App delayed initialization&apos;);
            }
            
            if (window.OSMJIF) {
                OSMJIF.domInit();
            }.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.JS_Spin">
             <summary>
               Looks up a localized string similar to /**
             * Copyright (c) 2011-2014 Felix Gnass
             * Licensed under the MIT license
             */
            (function(root, factory) {
            
              /* CommonJS */
              if (typeof exports == &apos;object&apos;)  module.exports = factory()
            
              /* AMD module */
              else if (typeof define == &apos;function&apos; &amp;&amp; define.amd) define(factory)
            
              /* Browser global */
              else root.Spinner = factory()
            }
            (this, function() {
              &quot;use strict&quot;;
            
              var prefixes = [&apos;webkit&apos;, &apos;Moz&apos;, &apos;ms&apos;, &apos;O&apos;] /* Vendor prefixes */
                , animations = {} /* Animation rules keyed by th [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TempCache">
            <summary>
              Looks up a localized string similar to {0}{1}TempCache{1}.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Crashed">
            <summary>
              Looks up a localized string similar to Crashed!.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Error_1">
            <summary>
              Looks up a localized string similar to Error: {0}.
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Error_2">
            <summary>
              Looks up a localized string similar to Error: {0} ({1}).
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Loading">
            <summary>
              Looks up a localized string similar to Loading....
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.TITLE_Navigating">
            <summary>
              Looks up a localized string similar to Navigating....
            </summary>
        </member>
        <member name="P:Awesomium.Core.CoreResources.URL_SpecialDataSource">
            <summary>
              Looks up a localized string similar to {0}://{1}/?href={2}&amp;scheme={3}.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Selection">
            <summary>
            Provides textual information about the current selection range of a page.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Selection.Empty">
            <summary>
            Represents an empty selection range.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Selection.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Selection.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.Selection.op_Equality(Awesomium.Core.Selection,Awesomium.Core.Selection)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Selection"/> instances represent the same selection.
            </summary>
            <param name="sd1">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the left of the equality operator.
            </param>
            <param name="sd2">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="sd1"/> and <paramref name="sd2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Selection.op_Inequality(Awesomium.Core.Selection,Awesomium.Core.Selection)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.Selection"/> instances are not equal.
            </summary>
            <param name="sd1">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the left of the inequality operator.
            </param>
            <param name="sd2">
            The <see cref="T:Awesomium.Core.Selection"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="sd1"/> and <paramref name="sd2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.Selection.Text">
            <summary>
            Gets the selected content in a page, in plain text form.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Selection.HTML">
            <summary>
            Gets the selected content in a page, in HTML form.
            </summary>
        </member>
        <member name="T:Awesomium.Core.JavascriptHelper">
            <summary>
            This helper creates a remote internal interoperation object
            for every view and injects the necessary javascript on every page,
            that allows interoperation of the page with Awesomium.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JavascriptHelper.Register">
            <summary>
            Must be called once when the view is created.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JavascriptHelper.DOMInitialize">
            <summary>
            Must be called at view's DOM ready.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JavascriptHelper.JIFInitialize">
            <summary>
            Secures callbacks in OSMJIF.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JavascriptHelper.IsJIFObject(Awesomium.Core.JSObject)">
            <summary>
            Gets if the specified <see cref="T:Awesomium.Core.JSObject"/> is the
            global interoperation object.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JavascriptHelper.IsJIFObject(System.UInt32)">
            <summary>
            Gets if the specified remote object identifier is the
            one of the global interoperation object.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JavascriptHelper.ClearSelection">
            <summary>
            Informs listeners of an empty selection.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JavascriptHelper.OnMethodCall(Awesomium.Core.IWebView,Awesomium.Core.JavascriptMethodEventArgs)">
            <summary>
            Should be called when the IJSMethodHandler gets a call from one of the
            global interoperation object's methods.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.JSWindowHandlers">
            <summary>
            Gets the formatted and minified global JavaScript that 
            must be injected to all frames prior loading.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.IsRegistered">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.JavascriptHelper"/> has been registered
            for this view.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.View">
            <summary>
            Gets the view this <see cref="T:Awesomium.Core.JavascriptHelper"/> is assigned to.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.RemoteObjectId">
            <summary>
            Gets the identifier of the remote interoperation object.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.Selection">
            <summary>
            Gets the current selection in the page loaded to the <see cref="P:Awesomium.Core.JavascriptHelper.View"/>
            this <see cref="T:Awesomium.Core.JavascriptHelper"/> is assigned to.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.Delegate">
            <summary>
            Gets a delegate object used to invoke internal members of <c>OSMJIF</c>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.IsConnected">
            <summary>
            <c>OSMJIF</c> has called back on us verifying registration.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JavascriptHelper.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="T:Awesomium.Core.TextInputType">
            <summary>
            Used with <see cref="T:Awesomium.Core.IMEUpdateEventArgs"/>.
            </summary>
            <seealso cref="T:Awesomium.Core.IWebViewIMEComposition"/>
            <seealso cref="E:Awesomium.Core.IWebViewIMEComposition.Updated"/>
        </member>
        <member name="F:Awesomium.Core.TextInputType.None">
            <summary>
            Input is not editable, no IME should be displayed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TextInputType.Text">
            <summary>
            Input is editable, IME should be displayed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TextInputType.Password">
            <summary>
            Input is a password box, IME should only be displayed if suitable.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TextInputType.Search">
            <summary>
            Input is a search box, IME should only be displayed if suitable.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TextInputType.Email">
            <summary>
            Input is an email input, IME should only be displayed if suitable.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TextInputType.Number">
            <summary>
            Input is a number input, IME should only be displayed if suitable.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TextInputType.Telephone">
            <summary>
            Input is a telephone input, IME should only be displayed if suitable.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TextInputType.URL">
            <summary>
            Input is a URL input, IME should only be displayed if suitable.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Surface">
            <summary>
            Represents the base class for managed surfaces.
            </summary>
            <remarks>
            Awesomium.NET provides the <see cref="T:Awesomium.Core.Surface"/> base class that implements <see cref="T:Awesomium.Core.ISurface"/>.
            In most scenarios, deriving <see cref="T:Awesomium.Core.Surface"/> is the suggested way for defining
            your own surface. Implementing <see cref="T:Awesomium.Core.ISurface"/> is useful when you
            want to implement your surface in a class already deriving another class.
            What's more, Awesomium.NET already provides predefined surface implementations
            for most technologies.
            <p/>
            Here's a list of predefined surfaces available with Awesomium.NET:
            <list type="table">
            <listheader>
            <term>Technology</term>
            <description>Type</description>
            </listheader>
            <item>
            <term>Core</term>
            <description><see cref="T:Awesomium.Core.BitmapSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.ImageSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ImageSurface"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ControlSurface"/></description>
            </item>
            </list>
            To specify your own surface implementation (either this is an <see cref="T:Awesomium.Core.ISurface"/> implementation 
            or a <see cref="T:Awesomium.Core.Surface"/> subclass), you need to do any of the following:
            <list type="bullet">
            <item>
            <description>
            Assign your surface instance to <see cref="P:Awesomium.Core.IWebView.Surface"/>. The instance assigned, should be able to handle changes in size. 
            In particular, <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/> is called every time the size of the view changes.
            </description>
            </item>
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event and assign your surface to <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/>, whenever the event occurs. 
            The event occurs every time the size of the view changes. You can assign the same surface every time, or a new one (if your <see cref="T:Awesomium.Core.ISurface"/> 
            implementation cannot handle resizing. All classes deriving <see cref="T:Awesomium.Core.Surface"/> that are available with Awesomium.NET, can handle changes in size). 
            Each time <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the surface previously assigned to the view 
            either through <see cref="P:Awesomium.Core.IWebView.Surface"/> or in an earlier handling of this event, or the default surface for the view if none was previously specified.
            So even if you do not set <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, the view will keep using any 
            previously assigned surface.
            </description>
            </item>
            </list>
            <note>
            Surfaces are destroyed either manually when they are not needed or internally, when assigned to a view, when the view they are assigned to, is destroyed.
            </note> 
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="T:Awesomium.Core.ISurface">
            <summary>
            This interface can be used to provide your own surface
            implementation and directly handle paint and pixel-scroll events
            for an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            Awesomium.NET provides the <see cref="T:Awesomium.Core.Surface"/> base class that implements <see cref="T:Awesomium.Core.ISurface"/>.
            In most scenarios, deriving <see cref="T:Awesomium.Core.Surface"/> is the suggested way for defining
            your own surface. Implementing <see cref="T:Awesomium.Core.ISurface"/> is useful when you
            want to implement your surface in a class already deriving another class.
            What's more, Awesomium.NET already provides predefined surface implementations
            for most technologies.
            <p/>
            Here's a list of predefined surfaces available with Awesomium.NET:
            <list type="table">
            <listheader>
            <term>Technology</term>
            <description>Type</description>
            </listheader>
            <item>
            <term>Core</term>
            <description><see cref="T:Awesomium.Core.BitmapSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.ImageSurface"/></description>
            </item>
            <item>
            <term>WPF</term>
            <description><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ImageSurface"/></description>
            </item>
            <item>
            <term>Windows Forms</term>
            <description><see cref="T:Awesomium.Windows.Forms.ControlSurface"/></description>
            </item>
            </list>
            To specify your own surface implementation (either this is an <see cref="T:Awesomium.Core.ISurface"/> implementation 
            or a <see cref="T:Awesomium.Core.Surface"/> subclass), you need to do any of the following:
            <list type="bullet">
            <item>
            <description>
            Assign your surface instance to <see cref="P:Awesomium.Core.IWebView.Surface"/>. The instance assigned, should be able to handle changes in size. 
            In particular, <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/> is called every time the size of the view changes.
            </description>
            </item>
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event and assign your surface to <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/>, whenever the event occurs. 
            The event occurs every time the size of the view changes. You can assign the same surface every time, or a new one (if your <see cref="T:Awesomium.Core.ISurface"/> 
            implementation cannot handle resizing. All classes deriving <see cref="T:Awesomium.Core.Surface"/> that are available with Awesomium.NET, can handle changes in size). 
            Each time <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the surface previously assigned to the view 
            either through <see cref="P:Awesomium.Core.IWebView.Surface"/> or in an earlier handling of this event, or the default surface for the view if none was previously specified.
            So even if you do not set <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> occurs, the view will keep using any 
            previously assigned surface.
            </description>
            </item>
            </list>
            <note>
            Surfaces are destroyed either manually when they are not needed or internally, when assigned to a view, when the view they are assigned to, is destroyed.
            </note> 
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)">
            <summary>
            Called when the size of the view has changed and the surface needs to be re-initialized.
            </summary>
            <param name="view">
            Indicates the view requesting the surface initialization. This is the view this
            <see cref="T:Awesomium.Core.ISurface"/> instance has been assigned too. Surfaces can only be
            assigned to a single view at a time.
            </param>
            <param name="width">
            Indicates the new width of the <paramref name="view"/>.
            </param>
            <param name="height">
            Indicates the new height of the <paramref name="view"/>.
            </param>
            <remarks>
            This method is called right after <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>, to initialize
            the surface. It can be called more than once, whenever the size of the view changes, 
            if the same surface is used throughout the view's life.
            <p/>
            This is the place where it is generally suggested that you initialize any back buffer
            used to copy the view's pixel buffer.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.ISurface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to paint a certain section of the Surface with a block of pixels. It is your responsibility to copy
            <paramref name="srcBuffer"/> to the location in this Surface specified by <paramref name="destRect"/>.
            </summary>
            <param name="srcBuffer">
            A pointer to a block of pixels in 32-bit BGRA format. 
            The size of the buffer is: <c>srcRowSpan * srcRect.Height</c>.
            </param>
            <param name="srcRowSpan">
            The number of bytes of each row. (Usually: <c>srcRect.Width * 4</c>)
            </param>
            <param name="srcRect">
            The dimensions of the region of <paramref name="srcBuffer"/> to copy from.
            May have a non-zero origin.
            </param>
            <param name="destRect">
            The location to copy <paramref name="srcBuffer"/> to. Always has same dimensions as <paramref name="srcRect"/> 
            but may have different origin (which specifies the offset of the section to copy to).
            </param>
        </member>
        <member name="M:Awesomium.Core.ISurface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to 'scroll' an existing section of the Surface by a certain offset. 
            It your responsibility to translate the pixels within the specified clipping rectangle 
            (<paramref name="clipRect"/>) by the specified offset.
            </summary>
            <param name="dx">The amount of pixels to offset horizontally.</param>
            <param name="dy">The amount of pixels to offset vertically.</param>
            <param name="clipRect">The rectangle that this operation should be clipped to.</param>
        </member>
        <member name="M:Awesomium.Core.Surface.OnInitialized(System.Object,Awesomium.Core.SurfaceInitializedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.Surface.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Surface.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.Surface.Updated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Surface.OnResized(System.Object,Awesomium.Core.SurfaceResizedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.Surface.Resized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Surface.Dispose">
            <summary>
            Perform cleanup of managed resources.
            </summary>
            <remarks>
            <note>
            Surfaces are destroyed either manually when they are not needed or internally, when assigned to a view, 
            when the view they are assigned to, is destroyed.
            </note> 
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Surface.OnDispose">
            <inheritdoc/>
        </member>
        <member name="M:Awesomium.Core.Surface.GetView(Awesomium.Core.ISurface)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance a surface is currently assigned to.
            </summary>
            <param name="surface">
            The <see cref="T:Awesomium.Core.ISurface"/> instance to check.
            </param>
            <returns>
            An <see cref="T:Awesomium.Core.IWebView"/> instance the specified <see cref="T:Awesomium.Core.ISurface"/> is currently assigned to,
            or <c>null</c> (<c>Nothing</c> in Visual Basic) if the specified <see cref="T:Awesomium.Core.ISurface"/>
            is currently not used by a view.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Surface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)">
            <summary>
            Called when the size of the view has changed and the surface needs to be re-initialized.
            </summary><param name="view">
            Indicates the view requesting the surface initialization. This is the view this
            <see cref="T:Awesomium.Core.ISurface"/> instance has been assigned too. Surfaces can only be
            assigned to a single view at a time.
            </param><param name="width">
            Indicates the new width of the <paramref name="view"/>.
            </param><param name="height">
            Indicates the new height of the <paramref name="view"/>.
            </param><remarks>
            This method is called right after <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>, to initialize
            the surface. It can be called more than once, whenever the size of the view changes, 
            if the same surface is used throughout the view's life.
            <p/>
            This is the place where it is generally suggested that you initialize any back buffer
            used to copy the view's pixel buffer.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to paint a certain section of the Surface with a block of pixels. It is your responsibility to copy
            <paramref name="srcBuffer"/> to the location in this Surface specified by <paramref name="destRect"/>.
            </summary><param name="srcBuffer">
            A pointer to a block of pixels in 32-bit BGRA format. 
            The size of the buffer is: <c>srcRowSpan * srcRect.Height</c>.
            </param><param name="srcRowSpan">
            The number of bytes of each row. (Usually: <c>srcRect.Width * 4</c>)
            </param><param name="srcRect">
            The dimensions of the region of <paramref name="srcBuffer"/> to copy from.
            May have a non-zero origin.
            </param><param name="destRect">
            The location to copy <paramref name="srcBuffer"/> to. Always has same dimensions as <paramref name="srcRect"/> 
            but may have different origin (which specifies the offset of the section to copy to).
            </param>
            <remarks>
            When the call to this method returns, the <see cref="E:Awesomium.Core.Surface.Updated"/> is fired.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)">
            <summary>
            This method is called whenever the <see cref="T:Awesomium.Core.IWebView"/> instance this surface is assigned to,
            wants to 'scroll' an existing section of the Surface by a certain offset. 
            It your responsibility to translate the pixels within the specified clipping rectangle 
            (<paramref name="clipRect"/>) by the specified offset.
            </summary><param name="dx">The amount of pixels to offset horizontally.</param><param name="dy">The amount of pixels to offset vertically.</param><param name="clipRect">The rectangle that this operation should be clipped to.</param>
            <remarks>
            When the call to this method returns, the <see cref="E:Awesomium.Core.Surface.Updated"/> is fired.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.Surface.Initialized">
            <summary>
            Occurs when this surface is being initialized for use with a <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <remarks>
            This event can be called more than once if you are reusing this surface
            for multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <note>
            While assigned to a view and initialized, a surface can only be used
            with that single view.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.Surface.Updated">
            <summary>
            Occurs when the surface has been updated, which is after a <see cref="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)"/>
            or <see cref="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)"/> operation has completed.
            </summary>
        </member>
        <member name="E:Awesomium.Core.Surface.Resized">
            <summary>
            Occurs when the surface has completed resizing and has updated its buffer.
            </summary>
            <remarks>
            <note>
            The event is only fired by <see cref="T:Awesomium.Core.Surface"/> instances that support
            resizing. All classes deriving <see cref="T:Awesomium.Core.Surface"/> that are available 
            with Awesomium.NET, can handle changes in size.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.Surface.Width">
            <summary>
            Gets the current width of the surface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Surface.Height">
            <summary>
            Gets the current height if the surface.
            </summary>
        </member>
        <member name="P:Awesomium.Core.Surface.View">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance this surface
            is currently assigned to.
            </summary>
            <remarks>
            This can be <c>null</c> (<c>Nothing</c> in Visual Basic)
            if the surface is not currently assigned to any view.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.Utilities">
            <summary>
            Static class providing helper functions.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Utilities.EmptyStrings">
            <summary>
            An empty array of strings.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Utilities.GetKeyIdentifierFromVirtualKeyCode(Awesomium.Core.VirtualKey)">
            <summary>
            Utility function for generating a key identifier string from a virtual key-code.
            </summary>
            <param name="virtualKeyCode">
            The virtual key-code to generate the key identifier of.
            </param>
            <returns>
            A <see cref="T:System.String"/> indicating the key identifier of a virtual key-code.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Utilities.WriteDataPak(System.String,System.String,System.String[])">
            <summary>
            Packs all files in a certain directory, into a PAK file.
            </summary>
            <param name="outFile">
            The full file-path to the output PAK file (filename should end with '.pak').
            </param>
            <param name="inDir">
            The path to the input directory.
            </param>
            <param name="ignoreExt">
            A list of file extensions to ignore (you don't need to prefix the extensions with a dot ".").
            </param>
            <returns>
            The number of files written to the PAK, or <c>-1</c> if the operation was not successful.
            </returns>
            <seealso cref="M:Awesomium.Core.Data.DataPakSource.FromDirectory(System.String,System.Boolean,System.String[])"/>
        </member>
        <member name="M:Awesomium.Core.Utilities.CopyBuffers(System.Int32,System.Int32,System.Runtime.InteropServices.HandleRef,System.Int32,System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Helper function for copying pixel buffers.
            </summary>
        </member>
        <member name="M:Awesomium.Core.Utilities.IsDotNetAssembly(System.String)">
            <summary>
            Attempts to find out if a specified child process executable, is a .NET assembly.
            </summary>
            <param name="asmFile">
            The path to the executable file.
            </param>
        </member>
        <member name="M:Awesomium.Core.Utilities.GetMimeType(System.String)">
            <summary>
            Gets the (Apache) mime type for a specified <paramref name="fileName"/>,
            based on its extension.
            </summary>
            <param name="fileName"></param>
            <returns>
            A <see cref="T:System.String"/> value representing the mime type of the
            specified <paramref name="fileName"/>, or <c>unknown/unknown</c>
            if the mime type could not be identified.
            </returns>
            <remarks>
            This method does not actually load the file to identify the mime type. 
            The returned mime type depends on the file's extension. 
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Utilities.MinifyJavascript(System.String)">
            <summary>
            Minifies JavaScript code.
            </summary>
            <param name="script">
            A <see cref="T:System.String"/> representing the JavaScript code
            to minify.
            </param>
            <returns>
            Minified, single-line JavaScript code.
            </returns>
            <remarks>
            This is only a helper function that performs simple cleanup of
            JavaScript code. This function:
            <list type="bullet">
            <item>
            <description>
            Removes unnecessary whitespace.
            </description>
            </item>
            <item>
            <description>
            Removes comments.
            </description>
            </item>
            <item>
            <description>
            Removes line breaks (turns multi-line to single-line code).
            </description>
            </item>
            <item>
            <description>
            Does not remove unnecessary semicolons, brackets etc..
            </description>
            </item>
            <item>
            <description>
            Does not compress the code by applying encodings.
            </description>
            </item>
            <item>
            <description>
            Does not compress the code by checking the scope or semantics
            of variables or functions and renaming them.
            </description>
            </item>
            </list>
            <note>
            This function uses compiled regular expressions and string manipulation.
            Though fast enough, if you use the same code multiple times in scenarios 
            that demand maximum performance, it is suggested that you cache the minified
            code once in a static variable.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Utilities.ToUri(System.String)">
            <summary>
            Gets a <see cref="T:System.Uri"/> instance for this string.
            </summary>
            <param name="uriString">
            The textual representation of a URI.
            </param>
            <returns>
            A <see cref="T:System.Uri"/> instance for the string provided,
            or a <see cref="T:System.Uri"/> representing <c>about:error</c>,
            if the string provided was not a well formatted URI.
            </returns>
            <remarks>
            <note>
            If <see cref="P:System.Uri.AbsoluteUri"/> of the returned <see cref="T:System.Uri"/> equals
            <c>about:error</c>, you can get the original erroneous URI string
            through <see cref="M:System.Object.ToString"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Utilities.ToUri(System.String,System.Uri)">
            <summary>
            Gets a <see cref="T:System.Uri"/> instance for this string, using the specified base and 
            relative URI instances.
            </summary>
            <param name="uriString">
            The relative URI to add to the <paramref name="baseUri"/>.
            </param>
            <param name="baseUri">
            The base <see cref="T:System.Uri"/>.
            </param>
            <returns>
            A <see cref="T:System.Uri"/> instance for the string provided,
            or a <see cref="T:System.Uri"/> representing <c>about:error</c>,
            if the <paramref name="baseUri"/> or string provided,
            were not well formatted URIs.
            </returns>
            <remarks>
            <note>
            If <see cref="P:System.Uri.AbsoluteUri"/> of the returned <see cref="T:System.Uri"/> equals
            <c>about:error</c>, you can get the original erroneous URI string
            through <see cref="M:System.Object.ToString"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.Utilities.IsBlank(System.Uri)">
            <summary>
            Gets if the specified <see cref="T:System.Uri"/>, represents the special
            <c>about:blank</c> URL.
            </summary>
            <param name="uri">
            A <see cref="T:System.Uri"/> instance representing the URI to check.
            </param>
            <returns>
            <c>true</c>, if the specified <paramref name="uri"/> represents the 
            special <c>about:blank</c> URL or if a <c>null</c> reference (<c>Nothing</c>
            in Visual Basic) is specified; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Utilities.ParseQueryString(System.Uri)">
            <summary>
            Parses a given URI's query string into a <see cref="T:System.Collections.Specialized.NameValueCollection"/> 
            using <see cref="P:System.Text.Encoding.UTF8"/> encoding.
            </summary>
            <param name="url">
            The <see cref="T:System.Uri"/> whose <see cref="P:System.Uri.Query"/> will be parsed.
            </param>
            <returns>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters and values.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Utilities.ParseQueryString(System.Uri,System.Text.Encoding)">
            <summary>
            Parses a given URI's query string into a <see cref="T:System.Collections.Specialized.NameValueCollection"/> 
            using the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="url">
            The <see cref="T:System.Uri"/> whose <see cref="P:System.Uri.Query"/> will be parsed.
            </param>
            <param name="encoding">
            The <see cref="T:System.Text.Encoding"/> to use.
            </param>
            <returns>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters and values.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Utilities.ToWebRequest(Awesomium.Core.IResourceRequest)">
            <summary>
            Gets an <see cref="T:System.Net.HttpWebRequest"/> equivalent to this <see cref="T:Awesomium.Core.IResourceRequest"/> instance.
            </summary>
            <param name="request">
            The <see cref="T:Awesomium.Core.IResourceRequest"/> to convert.
            </param>
            <returns>
            An <see cref="T:System.Net.HttpWebRequest"/> equivalent to this <see cref="T:Awesomium.Core.IResourceRequest"/> instance.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Utilities.ToWebRequest(Awesomium.Core.IResourceRequest,System.Net.HttpWebRequest)">
            <summary>
            Gets an <see cref="T:System.Net.HttpWebRequest"/> equivalent to this <see cref="T:Awesomium.Core.IResourceRequest"/> instance.
            </summary>
            <param name="request">
            The <see cref="T:Awesomium.Core.IResourceRequest"/> to convert.
            </param>
            <param name="requestToFill">
            An <see cref="T:System.Net.HttpWebRequest"/> to fill with the information provided by this <see cref="T:Awesomium.Core.IResourceRequest"/>.
            </param>
            <returns>
            An <see cref="T:System.Net.HttpWebRequest"/> equivalent to this <see cref="T:Awesomium.Core.IResourceRequest"/> instance.
            </returns>
        </member>
        <member name="M:Awesomium.Core.Utilities.ToWebRequest(Awesomium.Core.IResourceRequest,System.Net.HttpWebRequest,System.Net.CookieContainer)">
            <summary>
            Gets an <see cref="T:System.Net.HttpWebRequest"/> equivalent to this <see cref="T:Awesomium.Core.IResourceRequest"/> instance.
            </summary>
            <param name="request">
            The <see cref="T:Awesomium.Core.IResourceRequest"/> to convert.
            </param>
            <param name="requestToFill">
            An <see cref="T:System.Net.HttpWebRequest"/> to fill with the information provided by this <see cref="T:Awesomium.Core.IResourceRequest"/>.
            </param>
            <param name="cookieContainer">
            A <see cref="T:System.Net.CookieContainer"/> to be assigned to the <paramref name="requestToFill"/>
            or the returned <see cref="T:System.Net.HttpWebRequest"/> instance.
            </param>
            <returns>
            An <see cref="T:System.Net.HttpWebRequest"/> equivalent to this <see cref="T:Awesomium.Core.IResourceRequest"/> instance.
            </returns>
            <exception cref="T:System.NullReferenceException">
            <see cref="T:Awesomium.Core.IResourceRequest"/> reference not set to an instance of an object.
            </exception>
        </member>
        <member name="P:Awesomium.Core.Utilities.BlankUri">
            <summary>
            Gets a blank <see cref="T:System.Uri"/> ("about:blank").
            </summary>
        </member>
        <member name="T:Awesomium.Core.BitmapSurface">
            <summary>
            Represents the default surface used with <see cref="T:Awesomium.Core.WebView"/> instances.
            It is a basic bitmap that keeps track of whether or not it has changed since the
            last time you called <see cref="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)"/>.
            </summary>
            <remarks>
            This surface wraps the <c>BitmapSurface</c> available through the native
            Awesomium library.
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.BitmapSurface"/> instance of a specified size.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Copies this bitmap to a certain destination. This will also set <see cref="P:Awesomium.Core.BitmapSurface.IsDirty"/>
            to <c>false</c>.
            </summary>
            <param name="destBuffer">
            A pointer to the destination pixel buffer.
            </param>
            <param name="destRowSpan">
            The number of bytes per-row of the destination.
            </param>
            <param name="destDepth">
            The depth (number of bytes per pixel; usually 4 for BGRA surfaces and 3 for BGR surfaces).
            </param>
            <param name="convertToRGBA">
            Indicates if we should convert BGRA to RGBA.
            </param>
            <param name="flipY">
            Indicates if we should invert the bitmap vertically.
            </param>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToPNG(System.String,System.Boolean)">
            <summary>
            Save this bitmap to a PNG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .png).
            </param>
            <param name="preserveTransparency">
            Indicates if we should preserve the alpha channel.
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToPNG(System.String)">
            <summary>
            Save this bitmap to a PNG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .png).
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToJPEG(System.String,System.Int32)">
            <summary>
            Save this bitmap to a JPEG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .jpg).
            </param>
            <param name="quality">
            Indicates the compression quality (1-100, with 100 being best
            picture quality but highest file size).
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.SaveToJPEG(System.String)">
            <summary>
            Save this bitmap to a JPEG image on disk.
            </summary>
            <param name="filePath">
            The file path (should have filename ending in .jpg).
            </param>
            <returns>
            <c>true</c> if the operation succeeded; <c>false</c> otherwise.
            </returns>
            <remarks>
            The created JPEG image will have a default quality of <c>90</c>.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.BitmapSurface.GetAlphaAtPoint(System.Int32,System.Int32)">
            <summary>
            Gets the opacity (0-255) of a certain point (in pixels).
            </summary>
            <param name="x">The x-coordinate in pixels.</param>
            <param name="y">The y-coordinate in pixels.</param>
            <returns>
            The opacity of the bitmap in the specified coordinates.
            </returns>
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.Buffer">
            <summary>
            A pointer to the raw pixel buffer (32-bit BGRA format, 4 bpp).
            </summary>
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.Width">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.Height">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.RowSpan">
            <summary>
            The number of bytes per row (this is usually <c>Width * 4</c>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.BitmapSurface.IsDirty">
            <summary>
            Gets or sets if the bitmap has changed.
            </summary>
            <remarks>
            This is updated automatically if the bitmap has changed after the last
            time <see cref="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)"/> was called. It is only useful to set this yourself,
            if you copied the bitmap buffer without using the <see cref="M:Awesomium.Core.BitmapSurface.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Boolean,System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="T:Awesomium.Core.CursorType">
            <summary>
            An enumeration of all the possible web cursors.
            </summary>
            <remarks>
            This enumeration is used with the <see cref="E:Awesomium.Core.IWebView.CursorChanged"/> event.
            </remarks>
            <seealso cref="E:Awesomium.Core.IWebView.CursorChanged"/>
            <seealso cref="T:Awesomium.Core.CursorChangedEventArgs"/>
        </member>
        <member name="T:Awesomium.Core.Error">
            <summary>
            Represents a generic error.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.None">
            <summary>
            No error (everything is cool!)
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.BadParameters">
            <summary>
            Bad parameters were supplied.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.ObjectGone">
            <summary>
            The object no longer exists.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.ConnectionGone">
            <summary>
            The IPC connection no longest exists.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.TimedOut">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.WebViewGone">
            <summary>
            The web-view no longer exists.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Error.Generic">
            <summary>
            A generic error was encountered.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ScrollEventHandler">
            <summary>
            Represents the method that will handle the <see cref="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.ScrollEventArgs">
            <summary>
            Provides data for the <see cref="M:Awesomium.Core.Surface.Scroll(System.Int32,System.Int32,Awesomium.Core.AweRect)"/> event.
            </summary>
        </member>
        <member name="T:Awesomium.Core.PaintEventHandler">
            <summary>
            Represents the method that will handle the <see cref="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Awesomium.Core.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Awesomium.Core.PaintEventArgs">
            <summary>
            Provides data for the <see cref="M:Awesomium.Core.Surface.Paint(System.IntPtr,System.Int32,Awesomium.Core.AweRect,Awesomium.Core.AweRect)"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JSArray.OnDispose">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.JSValue">
            <summary>
            Represents a value in Javascript.
            </summary>
            <remarks>
            The supported data types by the Javascript interoperation
            API, are:
            <list type="table">
            <listheader>
            <term>Javascript Type</term>
            <description>Managed Equivalent</description>
            </listheader>
            <item>
            <term>
            <c>Boolean</c>
            </term>
            <description>
            <see cref="T:System.Boolean"/>
            <p/>
            You can explicitly or implicitly cast from and to a <see cref="T:Awesomium.Core.JSValue"/>.
            </description>
            </item>
            <item>
            <term>
            <c>Integer</c>
            </term>
            <description>
            <see cref="T:System.Int32"/>
            <p/>
            You can explicitly cast from and explicitly or implicitly cast to, a <see cref="T:Awesomium.Core.JSValue"/>.
            </description>
            </item>
            <item>
            <term>
            <c>Double</c>
            </term>
            <description>
            <see cref="T:System.Double"/>
            <p/>
            You can explicitly cast from and explicitly or implicitly cast to, a <see cref="T:Awesomium.Core.JSValue"/>.
            </description>
            </item>
            <item>
            <term>
            <c>String</c>
            </term>
            <description>
            <see cref="T:System.String"/>
            <p/>
            You can explicitly or implicitly cast from and to a <see cref="T:Awesomium.Core.JSValue"/>.
            </description>
            </item>
            <item>
            <term>
            <c>Array</c>
            </term>
            <description>
            <see cref="T:Awesomium.Core.JSValue"/><c>[]</c>
            <p/>
            You can explicitly cast from and explicitly or implicitly cast to, a <see cref="T:Awesomium.Core.JSValue"/>.
            </description>
            </item>
            <item>
            <term>
            <c>Object</c>
            </term>
            <description>
            <see cref="T:Awesomium.Core.JSObject"/>
            <p/>
            You can explicitly or implicitly cast from and to a <see cref="T:Awesomium.Core.JSValue"/>.
            </description>
            </item>
            <item>
            <term>
            <c>Null</c>
            </term>
            <description>
            <see cref="F:Awesomium.Core.JSValue.Null"/>
            </description>
            </item>
            <item>
            <term>
            <c>Undefined</c>
            </term>
            <description>
            <see cref="F:Awesomium.Core.JSValue.Undefined"/>
            </description>
            </item>
            </list>
            <note>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit (and for some types, implicit) casting to and 
            from the managed equivalent of all the supported data types. You rarely need to work with the
            <see cref="T:Awesomium.Core.JSValue"/> itself. However, it can be useful if you need to check the
            value type before casting.
            </note>
            </remarks>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="F:Awesomium.Core.JSValue.Null">
            <summary>
            Gets the global <c>Null</c> <see cref="T:Awesomium.Core.JSValue"/> instance.
            </summary>
        </member>
        <member name="F:Awesomium.Core.JSValue.Undefined">
            <summary>
            Gets the global <c>Undefined</c> <see cref="T:Awesomium.Core.JSValue"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.Boolean)">
            <summary>
            Creates a value of type <c>Boolean</c>.
            </summary>
            <param name="value">
            The managed boolean to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.Int32)">
            <summary>
            Creates a value of type <c>Integer</c>.
            </summary>
            <param name="value">
            The managed integer to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.Double)">
            <summary>
            Creates a value of type <c>Double</c>.
            </summary>
            <param name="value">
            The managed double to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(System.String)">
            <summary>
            Creates a value of type <c>String</c>.
            </summary>
            <param name="value">
            The managed string to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(Awesomium.Core.JSObject)">
            <summary>
            Creates a value of type <c>Object</c>.
            </summary>
            <param name="value">
            The Javascript <c>Object</c> to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.#ctor(Awesomium.Core.JSValue[])">
            <summary>
            Creates a value of type <c>Array</c>.
            </summary>
            <param name="values">
            An array of <see cref="T:Awesomium.Core.JSValue"/> to create a Javascript value for.
            </param>
            <remarks>
            <see cref="T:Awesomium.Core.JSValue"/> supports explicit and implicit casting to and from the managed
            equivalent of all the supported data types. You rarely need to create a <see cref="T:Awesomium.Core.JSValue"/>
            explicitly. You can directly pass any of the equivalent managed values, to methods
            and properties expecting a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSValue.ToString">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(Awesomium.Core.JSValue)~System.Boolean">
            <summary>
            Implicitly converts a <see cref="T:Awesomium.Core.JSValue"/> to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The following table presents the boolean value returned by this operator,
            depending on the JavaScript value this <see cref="T:Awesomium.Core.JSValue"/> instance wraps:
            <list type="table">
            <listheader>
            <term>
            JavaScript value
            </term>
            <description>
            Returns
            </description>
            </listheader>
            <item>
            <term>
            JavaScript <c>Boolean</c>.
            </term>
            <description>
            The managed equivalent <see cref="T:System.Boolean"/> value.
            </description>
            </item>
            <item>
            <term>
            JavaScript <c>Integer</c> or <c>Double</c>.
            </term>
            <description>
            <c>True</c> for any non-zero value; <c>False</c> otherwise.
            </description>
            </item>
            <item>
            <term>
            JavaScript <c>undefined</c> or <c>null</c>.
            </term>
            <description>
            <c>False</c>
            </description>
            </item>
            <item>
            <term>
            Any other valid JavaScript value or <c>Object</c> (see <see cref="T:Awesomium.Core.JSObject"/>).
            </term>
            <description>
            <c>True</c>
            </description>
            </item>
            <item>
            <term>
            An uninitialized instance of <see cref="T:Awesomium.Core.JSValue"/>.
            </term>
            <description>
            <c>False</c>
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            In addition to getting JavaScript <c>Boolean</c> values, this operator is very
            useful if you want to check the validity of the JavaScript value or <c>Object</c> 
            a JavaScript Interoperation API call returns.
            <p/>
            For an example, see the <b>Examples</b> section below.
            </remarks>
            <example>
            <code lang="C#">
            JSValue windowVal = webView.ExecuteJavascriptWithResult( "window" );
            
            if ( !windowVal )
                return;
                
            using ( dynamic window = (JSObject)windowVal )
            {
                JSValue childVal = window.open( "", "", "width=300, height=200, top=50, left=50" );
                
                if ( !childVal )
                    return;
                    
                using ( dynamic childWindow = (JSObject)childVal )
                {
                    //
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(System.Boolean)~Awesomium.Core.JSValue">
            <summary>
            Converts a <see cref="T:System.Boolean"/> value to a <see cref="T:Awesomium.Core.JSValue"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Boolean"/> to convert.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Explicit(Awesomium.Core.JSValue)~System.Int32">
            <summary>
            Converts a <see cref="T:Awesomium.Core.JSValue"/> to a 32-bit signed integer.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The 32-bit signed integer represented by this <see cref="T:Awesomium.Core.JSValue"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:Awesomium.Core.JSValue"/> does not represent a number. (See <see cref="P:Awesomium.Core.JSValue.IsNumber"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(System.Int32)~Awesomium.Core.JSValue">
            <summary>
            Converts a 32-bit signed integer value to a <see cref="T:Awesomium.Core.JSValue"/>.
            </summary>
            <param name="value">
            The 32-bit signed integer to convert.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Explicit(Awesomium.Core.JSValue)~System.Double">
            <summary>
            Converts a <see cref="T:Awesomium.Core.JSValue"/> to a double-precision floating-point number.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The double-precision floating-point number represented by this <see cref="T:Awesomium.Core.JSValue"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:Awesomium.Core.JSValue"/> does not represent a number. (See <see cref="P:Awesomium.Core.JSValue.IsNumber"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(System.Double)~Awesomium.Core.JSValue">
            <summary>
            Converts a double-precision floating-point number value to a <see cref="T:Awesomium.Core.JSValue"/>.
            </summary>
            <param name="value">
            The double-precision floating-point number to convert.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(Awesomium.Core.JSValue)~System.String">
            <summary>
            Implicitly converts a <see cref="T:Awesomium.Core.JSValue"/> to a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The string value represented by this <see cref="T:Awesomium.Core.JSValue"/>, or the
            textual representation of the <see cref="T:Awesomium.Core.JSValue"/>, if it does not
            represent a JavaScript <c>String</c> (see <see cref="P:Awesomium.Core.JSValue.IsString"/>).
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(System.String)~Awesomium.Core.JSValue">
            <summary>
            Converts a <see cref="T:System.String"/> value to a <see cref="T:Awesomium.Core.JSValue"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> to convert.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(Awesomium.Core.JSValue)~Awesomium.Core.JSObject">
            <summary>
            Implicitly converts a <see cref="T:Awesomium.Core.JSValue"/> to a <see cref="T:Awesomium.Core.JSObject"/>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.JSObject"/> value represented by this <see cref="T:Awesomium.Core.JSValue"/>, or
            a special invalid <see cref="T:Awesomium.Core.JSObject"/> that is equivalent to <see cref="F:Awesomium.Core.JSValue.Undefined"/>,
            if the <see cref="T:Awesomium.Core.JSValue"/> is <c>null</c>, <c>undefined</c> or does not
            represent a JavaScript <c>Object</c>.
            </returns>
            <remarks>
            This operator is guaranteed to return a <see cref="T:Awesomium.Core.JSObject"/> in all cases.
            <p/>
            If the <see cref="T:Awesomium.Core.JSValue"/> is <c>null</c>, <c>undefined</c> or does not
            represent a JavaScript <c>Object</c>, a special invalid <see cref="T:Awesomium.Core.JSObject"/>
            that is equivalent to <see cref="F:Awesomium.Core.JSValue.Undefined"/> is returned.
            <p/>
            The <see cref="T:Awesomium.Core.JSObject"/> type also contains an implicit operator to
            <see cref="T:System.Boolean"/> that when invoked on an invalid <see cref="T:Awesomium.Core.JSObject"/>,
            will return <c>false</c>. Therefore the following code is safe in all situations:
            <code lang="C#">
            JSObject window = webView.ExecuteJavascriptWithResult( "window" );
            
            if ( !window )
                return;
            </code>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(Awesomium.Core.JSValue)~Awesomium.Core.JSFunction">
            <summary>
            Implicitly converts a <see cref="T:Awesomium.Core.JSValue"/> to a <see cref="T:Awesomium.Core.JSFunction"/>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.JSFunction"/> object represented by this <see cref="T:Awesomium.Core.JSValue"/>, or
            a special invalid <see cref="T:Awesomium.Core.JSFunction"/> that is equivalent to <see cref="F:Awesomium.Core.JSValue.Undefined"/>,
            if the <see cref="T:Awesomium.Core.JSValue"/> is <c>null</c>, <c>undefined</c> or does not
            represent a JavaScript <c>Function</c> object.
            </returns>
            <remarks>
            This operator is guaranteed to return a <see cref="T:Awesomium.Core.JSFunction"/> in all cases.
            <p/>
            If the <see cref="T:Awesomium.Core.JSValue"/> is <c>null</c>, <c>undefined</c> or does not
            represent a JavaScript <c>Function</c> object, a special invalid <see cref="T:Awesomium.Core.JSFunction"/>
            that is equivalent to <see cref="F:Awesomium.Core.JSValue.Undefined"/> is returned.
            <p/>
            The <see cref="T:Awesomium.Core.JSObject"/> type also contains an implicit operator to
            <see cref="T:System.Boolean"/> that when invoked on an invalid <see cref="T:Awesomium.Core.JSFunction"/>,
            will return <c>false</c>. Therefore the following code is safe in all situations:
            <code lang="C#">
            JSFunction closeFunction = webView.ExecuteJavascriptWithResult( "window.close" );
            
            if ( !closeFunction )
                return;
            </code>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(Awesomium.Core.JSObject)~Awesomium.Core.JSValue">
            <summary>
            Converts a <see cref="T:Awesomium.Core.JSObject"/> to a <see cref="T:Awesomium.Core.JSValue"/>.
            </summary>
            <param name="obj">
            The <see cref="T:Awesomium.Core.JSObject"/> to convert.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> representing <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Awesomium.Core.JSObject"/> instance is disposed.
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Explicit(Awesomium.Core.JSValue)~Awesomium.Core.JSValue[]">
            <summary>
            Converts a <see cref="T:Awesomium.Core.JSValue"/> to an array of <see cref="T:Awesomium.Core.JSValue"/>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The array of <see cref="T:Awesomium.Core.JSValue"/> represented by this <see cref="T:Awesomium.Core.JSValue"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            The <see cref="T:Awesomium.Core.JSValue"/> does not represent a JavaScript <c>Array</c>. (See <see cref="P:Awesomium.Core.JSValue.IsArray"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Implicit(Awesomium.Core.JSValue[])~Awesomium.Core.JSValue">
            <summary>
            Converts an array of <see cref="T:Awesomium.Core.JSValue"/> to a <see cref="T:Awesomium.Core.JSValue"/>.
            </summary>
            <param name="value">
            The array of <see cref="T:Awesomium.Core.JSValue"/> to convert.
            </param>
            <returns>
            The converted <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Equality(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSValue"/> instances represent the same JavaScript value.
            </summary>
            <param name="v1">
            The <see cref="T:Awesomium.Core.JSValue"/> that is to the left of the equality operator.
            </param>
            <param name="v2">
            The <see cref="T:Awesomium.Core.JSValue"/> that is to the right of the equality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSValue"/> instances
            represent the same Javascript value; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Inequality(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Tests whether two <see cref="T:Awesomium.Core.JSValue"/> instances represent different JavaScript values.
            </summary>
            <param name="v1">
            The <see cref="T:Awesomium.Core.JSValue"/> that is to the left of the inequality operator.
            </param>
            <param name="v2">
            The <see cref="T:Awesomium.Core.JSValue"/> that is to the right of the inequality operator.
            </param>
            <returns>
            This operator returns <c>true</c> if the two <see cref="T:Awesomium.Core.JSValue"/> instances
            represent different Javascript values; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Addition(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Computes the sum of the two specified <see cref="T:Awesomium.Core.JSValue"/> instances.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> whose value represents the sum of the
            specified operands.
            <p/>
            A <c>null</c> value is equivalent to <c>0</c>.
            <p/>
            If either operand is <c>undefined</c>, the result is <c>NaN</c>.
            <note type="note">
            If either parameter is an <c>object</c> or an <c>array</c>,
            a string concatenation of the textual representation of the two
            objects is performed.
            </note>
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Subtraction(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Subtracts the value of the second <see cref="T:Awesomium.Core.JSValue"/> from the first.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> whose value represents the result of the subtraction.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_UnaryNegation(Awesomium.Core.JSValue)">
            <summary>
            Negates the value of a <see cref="T:Awesomium.Core.JSValue"/> instance.
            </summary>
            <param name="value">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> whose value represents the result of the negation.
            <p/>
            <note type="note">
            If the specified <see cref="T:Awesomium.Core.JSValue"/> does not represent a JavaScript
            <c>number</c>, the result is always <c>NaN</c>.
            </note>
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Increment(Awesomium.Core.JSValue)">
            <summary>
            Increments the value of the specified <see cref="T:Awesomium.Core.JSValue"/> instance by one.
            </summary>
            <param name="value">
            The <see cref="T:Awesomium.Core.JSValue"/> whose value is incremented.
            </param>
            <returns>
            The value of <see cref="T:Awesomium.Core.JSValue"/> before the operation if the unary expression uses
            prefix notation or the value of <see cref="T:Awesomium.Core.JSValue"/> after the operation if the
            unary expression uses postfix notation.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Decrement(Awesomium.Core.JSValue)">
            <summary>
            Decrements the value of the specified <see cref="T:Awesomium.Core.JSValue"/> instance by one.
            </summary>
            <param name="value">
            The <see cref="T:Awesomium.Core.JSValue"/> whose value is decremented.
            </param>
            <returns>
            The value of <see cref="T:Awesomium.Core.JSValue"/> before the operation if the unary expression uses
            prefix notation or the value of <see cref="T:Awesomium.Core.JSValue"/> after the operation if the
            unary expression uses postfix notation.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Multiply(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Computes the product of the two <see cref="T:Awesomium.Core.JSValue"/> parameters.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> whose value represents the product of the two parameters.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Division(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Divides the value of the first <see cref="T:Awesomium.Core.JSValue"/> from the second.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> whose value represents the result
            of the division.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_GreaterThan(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Compares the two <see cref="T:Awesomium.Core.JSValue"/> parameters to determine whether the first is greater than the second.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> of type <c>Boolean</c> (see: <see cref="P:Awesomium.Core.JSValue.IsBoolean"/>), that is <c>true</c>
            if the first instance is greater than the second instance. Otherwise, <c>false</c>.
            <p/>
            If either operand is <c>undefined</c>, the result is always <c>false</c>.
            <p/>
            A <c>null</c> operand is equivalent to <c>0</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_GreaterThanOrEqual(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Compares the two <see cref="T:Awesomium.Core.JSValue"/> parameters to determine whether the first is greater than or equal to the second.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> of type <c>Boolean</c> (see: <see cref="P:Awesomium.Core.JSValue.IsBoolean"/>), that is <c>true</c>
            if the first instance is greater than or equal to the second instance. Otherwise, <c>false</c>.
            <p/>
            If either operand is <c>undefined</c>, the result is always <c>false</c>.
            <p/>
            A <c>null</c> operand is equivalent to <c>0</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_LessThan(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Compares the two <see cref="T:Awesomium.Core.JSValue"/> parameters to determine whether the first is less than the second.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> of type <c>Boolean</c> (see: <see cref="P:Awesomium.Core.JSValue.IsBoolean"/>), that is <c>true</c>
            if the first instance is less than the second instance. Otherwise, <c>false</c>.
            <p/>
            If either operand is <c>undefined</c>, the result is always <c>false</c>.
            <p/>
            A <c>null</c> operand is equivalent to <c>0</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_LessThanOrEqual(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Compares the two <see cref="T:Awesomium.Core.JSValue"/> parameters to determine whether the first is less than or equal to the second.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> of type <c>Boolean</c> (see: <see cref="P:Awesomium.Core.JSValue.IsBoolean"/>), that is <c>true</c>
            if the first instance is less than or equal to the second instance. Otherwise, <c>false</c>.
            <p/>
            If either operand is <c>undefined</c>, the result is always <c>false</c>.
            <p/>
            A <c>null</c> operand is equivalent to <c>0</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_BitwiseOr(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Computes the bitwise OR of the specified <see cref="T:Awesomium.Core.JSValue"/> instances.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> that contains the results of the bitwise OR operation.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_BitwiseAnd(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Computes the bitwise AND of its <see cref="T:Awesomium.Core.JSValue"/> operands.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> that contains the results of the bitwise AND operation.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_ExclusiveOr(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Performs a bitwise exclusive-OR operation on the specified <see cref="T:Awesomium.Core.JSValue"/> instances.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> that contains the results of the bitwise XOR operation.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_OnesComplement(Awesomium.Core.JSValue)">
            <summary>
            Performs a bitwise one's complement operation on the specified <see cref="T:Awesomium.Core.JSValue"/> instance.
            </summary>
            <param name="value">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> instance that contains the results of the one's complement operation.
            <p/>
            <note type="note">
            If the specified <see cref="T:Awesomium.Core.JSValue"/> does not represent a JavaScript <c>number</c>, the
            result is always <c>-1</c>.
            </note>
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_Modulus(Awesomium.Core.JSValue,Awesomium.Core.JSValue)">
            <summary>
            Computes the remainder after dividing the first <see cref="T:Awesomium.Core.JSValue"/> parameter by the second.
            </summary>
            <param name="v1">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <param name="v2">
            A <see cref="T:Awesomium.Core.JSValue"/> instance.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.JSValue"/> that represents the remainder.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_True(Awesomium.Core.JSValue)">
            <summary>
            Definitely <c>true</c> operator.
            </summary>
            <param name="value">
            A <see cref="T:Awesomium.Core.JSValue"/> to check.
            </param>
            <returns>
            <c>true</c> if the operand is valid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.JSValue.op_False(Awesomium.Core.JSValue)">
            <summary>
            Definitely <c>false</c> operator.
            </summary>
            <param name="value">
            A <see cref="T:Awesomium.Core.JSValue"/> to check.
            </param>
            <returns>
            <c>true</c> if the operand is invalid; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsBoolean">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Boolean</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsInteger">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Integer</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsDouble">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a Javascript <c>Double</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsNumber">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript number.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsString">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>String</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsArray">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>Array</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsObject">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>Object</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsFunctionObject">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>Function</c> object.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsNull">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>Null</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsUndefined">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>Undefined</c> object.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsNaN">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>NaN</c> (Not a Number) value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.IsInfinity">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.JSValue"/> instance represents
            a JavaScript <c>Infinity</c> value.
            </summary>
        </member>
        <member name="P:Awesomium.Core.JSValue.Item(System.Int32)">
            <summary>
            Gets or sets the member of this JavaScript <c>Array</c> or <c>Object</c>
            at the index specified.
            </summary>
            <param name="index">
            The index of the member to get or set.
            </param>
            <returns>
            The member of this JavaScript <c>Array</c> or <c>Object</c>
            at the index specified.
            </returns>
            <remarks>
            The following table represents the behavior of this property, based on the
            JavaScript value this <see cref="T:Awesomium.Core.JSValue"/> instance represents:
            <list type="table">
            <listheader>
            <term>
            JavaScript Value
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <c>Array</c>
            </term>
            <description>
            Gets or sets the member at the specified index. If the specified <paramref name="index"/>
            is out of range, the getter returns <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            </description>
            </item>
            <item>
            <term>
            <c>Object</c>
            </term>
            <description>
            Gets or sets the value of a property named after the specified <paramref name="index"/>.
            If no property with the specified numeric name exists, the getter returns <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            </description>
            </item>
            <item>
            <term>
            <c>String</c>
            </term>
            <description>
            The getter returns the character at the specified <paramref name="index"/>. If the specified 
            <paramref name="index"/> is out of range, the getter returns <see cref="F:Awesomium.Core.JSValue.Undefined"/>.
            The setter has no effect on a <see cref="T:Awesomium.Core.JSValue"/> representing a JavaScript <c>String</c>.
            </description>
            </item>
            </list>
            <note type="note">
            <see cref="T:Awesomium.Core.JSValue"/> supports implicit casting to <see cref="T:Awesomium.Core.JSObject"/> and <see cref="T:System.String"/>
            and explicit casting to an array of <see cref="T:Awesomium.Core.JSValue"/>. The use of this property only becomes
            handy when your are using the Dynamic Language Runtime (DLR) and you do not know the kind of value
            a certain dynamic expression returns.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Core.LogLevel">
            <summary>
            Specifies the level of verbosity for the log. 
            See <see cref="P:Awesomium.Core.WebConfig.LogLevel"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogLevel.None">
            <summary>
            No log is created.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogLevel.Normal">
            <summary>
            Logs only errors.
            </summary>
        </member>
        <member name="F:Awesomium.Core.LogLevel.Verbose">
            <summary>
            Logs everything.
            </summary>
        </member>
        <member name="T:Awesomium.Core.MouseButton">
            <summary>
            Represents the three different mouse-button types.
            </summary>
        </member>
        <member name="P:Awesomium.Core.SurfaceFactory.Surfaces">
            <summary>
            Gets a dictionary of <see cref="T:Awesomium.Core.ISurface"/> wrappers
            maintained by this factory.
            </summary>
        </member>
        <member name="T:Awesomium.Core.TerminationStatus">
            <summary>
            Indicates the termination status of an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
            <seealso cref="T:Awesomium.Core.CrashedEventArgs"/>
            <seealso cref="P:Awesomium.Core.IWebView.TerminationStatus"/>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Normal">
            <summary>
            Zero Exit Status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Abnormal">
            <summary>
            Non-Zero exit status.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Killed">
            <summary>
            SIGKILL or Task Manager kill.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.Crashed">
            <summary>
            Segmentation Fault.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.StillRunning">
            <summary>
            Process hasn't exited yet.
            </summary>
        </member>
        <member name="F:Awesomium.Core.TerminationStatus.None">
            <summary>
            The view has not been instantiated.
            </summary>
        </member>
        <member name="T:Awesomium.Core.ViewInput">
            <summary>
            Indicates the types of input processed by a technology specific
            <see cref="T:Awesomium.Core.IWebView"/> wrapper.
            </summary>
            <remarks>
            <see cref="F:Awesomium.Core.ViewInput.Stylus"/> and <see cref="F:Awesomium.Core.ViewInput.Touch"/>
            are only processed by <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            instances.
            </remarks>
        </member>
        <member name="F:Awesomium.Core.ViewInput.None">
            <summary>
            No user input will be processed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ViewInput.Mouse">
            <summary>
            Mouse input is processed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ViewInput.Keyboard">
            <summary>
            Keyboard input is processed.
            </summary>
        </member>
        <member name="F:Awesomium.Core.ViewInput.Stylus">
            <summary>
            Stylus input is processed. (WPF 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> only)
            </summary>
        </member>
        <member name="F:Awesomium.Core.ViewInput.Touch">
            <summary>
            Touch input is processed. (WPF 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> only)
            </summary>
        </member>
        <member name="F:Awesomium.Core.ViewInput.All">
            <summary>
            All user input is normally processed. (Default value)
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebConfig">
            <summary>
            Indicates configuration settings for the <see cref="T:Awesomium.Core.WebCore"/>,
            during initialization.
            </summary>
            <remarks>
            This structure is used with <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>, to specify
            configuration settings for the <see cref="T:Awesomium.Core.WebCore"/>.
            <p/>
            The <see cref="T:Awesomium.Core.WebCore"/> is not necessarily started immediately after you call
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>.
            Actual initialization occurs when the first <see cref="T:Awesomium.Core.WebSession"/> 
            (see <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>) or <see cref="T:Awesomium.Core.IWebView"/> instance is created. 
            You have a last chance to edit the configuration settings when the <see cref="E:Awesomium.Core.WebCore.Starting"/> 
            event is fired.
            <p/>
            You can force the <see cref="T:Awesomium.Core.WebCore"/> to start immediately by using the
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig,System.Boolean)"/> overload
            specifying <c>true</c> for the <c>start</c> parameter. In several scenarios, 
            this may seriously affect the auto-update feature's availability. For more
            information see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig,System.Boolean)"/>.
            <note type="caution">
            These settings cannot be changed after the <see cref="T:Awesomium.Core.WebCore"/> has started.
            </note>
            <note>
            You can access (but not change) the configuration settings used to initialize the core
            after initialization, through <see cref="P:Awesomium.Core.WebCore.Configuration"/>.
            </note>
            </remarks>
            <example>.
            <code lang="C#">
            WebCore.Initialize( new WebConfig() { LogLevel = LogLevel.Verbose } );
            </code>
            <code lang="VB">
            WebCore.Initialize( New WebConfig() With { .LogLevel = LogLevel.Verbose } )
            </code>
            </example>
        </member>
        <member name="F:Awesomium.Core.WebConfig.CHILD_PROCESS_DEFAULT">
            <summary>
            Used with <see cref="P:Awesomium.Core.WebConfig.ChildProcessPath"/> to indicate that the default executable 
            should be used as a rendering process.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebConfig.DEBUGGING_HOST_DEFAULT">
            <summary>
            Used with <see cref="P:Awesomium.Core.WebConfig.RemoteDebuggingHost"/> to indicate that the default
            host address should be used for remote debugging.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebConfig.ASSET_PROTOCOL_DEFAULT">
            <summary>
            Used with <see cref="P:Awesomium.Core.WebConfig.AssetProtocol"/> to indicate that the default
            protocol should be used for loading resources with <c>DataSources</c>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebConfig.Default">
            <summary>
            Represents a <see cref="T:Awesomium.Core.WebConfig"/> with default configuration settings.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebConfig.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebConfig.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebConfig.op_Equality(Awesomium.Core.WebConfig,Awesomium.Core.WebConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebConfig"/> instances are equivalent.
            </summary>
            <param name="wc1">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the left of the equality operator.
            </param>
            <param name="wc2">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wc1"/> and <paramref name="wc2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebConfig.op_Inequality(Awesomium.Core.WebConfig,Awesomium.Core.WebConfig)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebConfig"/> instances are not equal.
            </summary>
            <param name="wc1">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wc2">
            The <see cref="T:Awesomium.Core.WebConfig"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wc1"/> and <paramref name="wc2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebConfig.LogLevel">
            <summary>
            Gets or sets the level of verbosity for the logger.
            The default is <see cref="F:Awesomium.Core.LogLevel.Normal"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.LogPath">
            <summary>
            Gets or sets the file path to the log file (should include filename, for example:
            <c>C:\\my_path\\out.log</c>). This is <c>.\\awesomium.log</c> by default.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.PluginsPath">
            <summary>
            Gets or sets the directory path to search for additional plugins. This is useful for
            bundling plugins with your application.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.ChildProcessPath">
            <summary>
            Gets or sets the file path to the child rendering process. This is <c>awesomium_process</c>
            by default.
            </summary>
            <remarks>
            <note type="caution">
            The path specified, should be relative to the native Awesomium library (<i><c>awesomium.dll</c></i>),
            (see: <see cref="P:Awesomium.Core.WebCore.PackagePath"/>). When Awesomium.NET is deployed to the system's GAC,
            the path to the child process should normally be absolute.
            </note>
            If the specified file is not found, the <see cref="T:Awesomium.Core.WebCore"/> will silently
            fall back to using <see cref="F:Awesomium.Core.WebConfig.CHILD_PROCESS_DEFAULT"/>.
            </remarks>
            <seealso cref="F:Awesomium.Core.WebConfig.CHILD_PROCESS_DEFAULT"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.UserAgent">
            <summary>
            Gets or sets the user-agent string to use instead of the default. You should only
            specify this if you want to spoof the user-agent.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebConfig.RemoteDebuggingPort">
            <summary>
            Gets or sets the port that the Awesomium Inspector's HTTP server should listen on.
            </summary>
            <remarks>
            To enable the inspector, set this value to any non-zero port (ex, <c>1337</c>)
            and then go to <c>http://127.0.0.1:1337</c> (or whatever port you specified)
            in some other browser.
            <note>
            Please note you must have <b>inspector.pak</b> in your working directory
            for the Inspector to load correctly.
            </note>
            Specify <c>0</c> to disable the inspector (the default).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebConfig.RemoteDebuggingHost">
            <summary>
            The host that the Awesomium Inspector's HTTP server should bind to.
            The default is <c>127.0.0.1</c>.
            </summary>
            <remarks>
            The default is <c>127.0.0.1</c> but it is sometimes useful to specify
            a different IP to bind to (especially if you are behind a router).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebConfig.ReduceMemoryUsageOnNavigation">
            <summary>
            Gets or sets if we should automatically attempt to reduce process memory 
            on each page navigation.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.ReduceMemoryUsage"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.UserScript">
            <summary>
            User-defined JavaScript to run at the beginning of every page load. This
            code is run immediately after global JavaScript objects are set up and
            before the DOM or any inline scripts are loaded.
            </summary>
            <remarks>
            This is <b>not</b> a file-path, you should pass a raw JavaScript string.
            <p/>
            This value is global to <b>all</b> <see cref="T:Awesomium.Core.IWebView"/> instances.
            You can specify additional script on a per-session basis via <see cref="P:Awesomium.Core.WebPreferences.UserScript"/>.
            <note type="caution">
            <b>Use this property with extreme caution. No check for errors is performed before this code
            is injected to pages loading. Errors in the code defined in this property, can affect
            the operation of our internal JavaScript Interoperation Framework (JIF), used to keep 
            a seamless cooperation between Awesomium.NET and the loaded page.</b><br/>
            Among other things, JIF handles <c>window.open</c>, <c>window.alert</c> and user
            selections in the page.
            </note>
            <p/>
            Before using this property, please note that:
            <list type="bullet">
            <item>
            <description>
            The page's full DOM is not yet created at the time this code is executed. This code is executed
            <b>before</b> <c>DOMContentLoaded</c> and <see cref="E:Awesomium.Core.IWebView.DocumentReady"/>.
            </description>
            </item>
            <item>
            <description>
            Any global JavaScript objects (and their members) that you create with 
            <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/> after the creation of an
            <see cref="T:Awesomium.Core.IWebView"/> instance, may not be available yet, the first time a view
            loads a page.
            </description>
            </item>
            <item>
            Attempts to handle crucial members of the <c>window</c> object itself (such as <c>window.open</c>),
            may be overridden/prevented by JIF.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebConfig.CustomCSS">
            <summary>
            User-defined CSS to be applied to all web-pages. This is useful for
            overriding default styles. (Default: <see cref="F:System.String.Empty"/>)
            </summary>
            <remarks>
            This is <b>not</b> a file-path, you should pass a raw CSS string.
            <p/>
            This value is global to <b>all</b> <see cref="T:Awesomium.Core.IWebView"/> instances.
            You can specify additional CSS on a per-session basis via <see cref="P:Awesomium.Core.WebPreferences.CustomCSS"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebConfig.AssetProtocol">
            <summary>
            The protocol used for loading local resources through <see cref="T:Awesomium.Core.Data.DataSource"/> instances.
            The default is: <c>asset</c>.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.WebSession.AddDataSource&quot;]/remarks/."/>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
            <seealso cref="T:Awesomium.Core.Data.DataSource"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.AdditionalOptions">
            <summary>
            Gets or sets additional command-line options for Chromium.
            </summary>
            <remarks>
            <note type="caution">
            This is for advanced users only, use this at your own risk.
            </note>
            Each option should be formatted as <c>--switch=value</c> or just <c>--switch</c>.
            </remarks>
            <example>
            <code lang="C#">
            // Force native WebGL rendering.
            WebCore.Initialize( new WebConfig() { AdditionalOptions = new string[] { "--use-gl=desktop" } } );
            </code>
            <code lang="VB.NET">
            ' Force native WebGL rendering.
            WebCore.Initialize( New WebConfig() With { .AdditionalOptions = New String() { "--use-gl=desktop" } } )
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Core.WebConfig.HomeURL">
            <summary>
            Gets or sets the default Home URL.
            This is used with <see cref="M:Awesomium.Core.IWebView.GoToHome"/>.
            The default is: <c>about:blank</c>.
            </summary>
            <seealso cref="P:Awesomium.Core.Utilities.BlankUri"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.AutoUpdatePeriod">
            <summary>
            Gets or sets the auto-updating frequency of the <see cref="T:Awesomium.Core.WebCore"/>.
            The default is <c>10</c> milliseconds.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Update"/>
            <seealso cref="P:Awesomium.Core.WebCore.UpdateState"/>
            <seealso cref="T:Awesomium.Core.WebCoreUpdateState"/>
        </member>
        <member name="P:Awesomium.Core.WebConfig.ManagedConsole">
            <summary>
            [This type/member supports the Awesomium.NET infrastructure and is not intended to be used directly from your code.]
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebCore">
            <summary>
            Represents the <i>core</i> of Awesomium. It manages the creation and lifetime of all 
            <see cref="T:Awesomium.Core.IWebView"/> and <see cref="T:Awesomium.Core.WebSession"/> instances and maintains useful services.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Core.WebCore"/> manages the creation and lifetime of all <see cref="T:Awesomium.Core.IWebView"/>
            and <see cref="T:Awesomium.Core.WebSession"/> instances and maintains useful services like: 
            <list type="bullet">
            <item>
            <description>
            Auto-Update
            </description>
            </item>
            <item>
            <description>
            Network stack
            </description>
            </item>
            <item>
            <description>
            Inter-process messaging
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Awesomium.Core.Surface"/> creation
            </description>
            </item>
            <item>
            <description>
            Download operations
            </description>
            </item>
            </list>
            Generally, you should initialize the <see cref="T:Awesomium.Core.WebCore"/> (see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) providing
            your custom configuration settings, before creating any views and shut it down (see <see cref="M:Awesomium.Core.WebCore.Shutdown"/>)
            at the end of your program.
            <p/>
            <note type="caution">
            Note that <b>Awesomium</b> and <b>Awesomium.NET</b> are not thread-safe. All API members should be called 
            from the thread that initialized the <see cref="T:Awesomium.Core.WebCore"/> (see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or created
            the first <see cref="T:Awesomium.Core.WebView"/>, <see cref="T:Awesomium.Core.WebSession"/> or technology specific <c>WebControl</c> if
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/> is not explicitly called. For UI applications (such as those using
            a technology specific <c>WebControl</c>) this is usually the UI thread.
            <p/>
            <i>Certain exceptions to this rule, such as <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)"/>, are documented.</i>
            </note>
            <note>
            If you do not initialize the <see cref="T:Awesomium.Core.WebCore"/>, it will automatically start, 
            using default configuration settings, when you create the first view by either calling
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/> or by instantiating a <c>WebControl</c>, or when you
            create the first <see cref="T:Awesomium.Core.WebSession"/>.
            </note>
            <p/>
            <note type="caution">
            Do not call any of the members of this class other than: 
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebCore.Run"/>
            </description>
            </item>
            </list>
            before starting the core.
            </note>
            </remarks>
            <threadsafety static="false" instance="false"/>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            <seealso cref="M:Awesomium.Core.WebCore.Run"/>
        </member>
        <member name="F:Awesomium.Core.WebCore.DLLName">
            <summary>
            Gets the name of the native Awesomium library, wrapped by Awesomium.NET.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnStart(Awesomium.Core.CoreStartingEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.Starting"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnInitialized(Awesomium.Core.CoreStartEventArgs)">
            <summary>
            Triggers the Initialized event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnStarted(Awesomium.Core.CoreStartEventArgs)">
            <summary>
            Triggers the Started event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnShutdown(Awesomium.Core.CoreShutdownEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnCreateView(Awesomium.Core.CreatedViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.CreatedView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnDownload(Awesomium.Core.DownloadEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.Download"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.OnDownloadBegin(Awesomium.Core.DownloadBeginEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.CheckAccess">
            <summary>
            Checks thread affinity.
            </summary>
            <returns>
            True if called on the correct thread. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebCore.ChildProcessMain">
            <summary>
            Invokes the <c>main</c> method for an Awesomium Child Process.
            </summary>
            <returns>
            The exit code of the process's <c>main</c> method.
            </returns>
            <seealso cref="P:Awesomium.Core.WebConfig.ChildProcessPath"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)">
            <summary>
            Initializes the <see cref="T:Awesomium.Core.WebCore"/> with certain configuration settings.
            </summary>
            <param name="config">
            An instance of <see cref="T:Awesomium.Core.WebConfig"/> specifying configuration settings.
            </param>
            <remarks>
            <para>
            This method performs lazy instantiation. The <see cref="T:Awesomium.Core.WebCore"/> will start when 
            the first <see cref="T:Awesomium.Core.IWebView"/> or <see cref="T:Awesomium.Core.WebSession"/> is created.
            </para>
            <para>
            If you do not call this method, the <see cref="T:Awesomium.Core.WebCore"/> will be automatically initialized
            using default configuration settings, when you first create a view through <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
            or by instantiating a <c>WebControl</c>, or when you create the first <see cref="T:Awesomium.Core.WebSession"/>.
            </para>
            <note>
            If you are not sure if the <see cref="T:Awesomium.Core.WebCore"/> has been initialized, check <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>
            before calling this method. If <see cref="T:Awesomium.Core.WebCore"/> is already initialized, you will have
            to shut it down (see <see cref="M:Awesomium.Core.WebCore.Shutdown"/>) and <b>restart the hosting application</b> before 
            initializing the <see cref="T:Awesomium.Core.WebCore"/> again.
            <p/>
            <b>Only a single initialization/instantiation of the <see cref="T:Awesomium.Core.WebCore"/> is possible per 
            application session (process).</b>
            </note>
            <note type="caution">
            Note that <b>Awesomium</b> and <b>Awesomium.NET</b> are not thread-safe. All API members should be called 
            from the thread that initialized the <see cref="T:Awesomium.Core.WebCore"/> or created the first <see cref="T:Awesomium.Core.WebView"/>, 
            <see cref="T:Awesomium.Core.WebSession"/> or technology-specific <c>WebControl</c> if <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/> 
            is not explicitly called.
            <list type="bullet">
            <item>
            <description>
            For UI applications (such as those using a technology specific <c>WebControl</c>) 
            this is always the UI thread.
            </description>
            </item>
            <item>
            <description>
            If you have started the <see cref="T:Awesomium.Core.WebCore"/> on a non-UI thread using <see cref="M:Awesomium.Core.WebCore.Run"/>,
            you must use any of the available synchronization methods as described <see cref="M:Awesomium.Core.WebCore.Run">here</see>.
            </description>
            </item>
            </list>
            <i>Certain exceptions to these rules, such as <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)"/>, are documented.</i>
            </note>
            </remarks>
            <example>
            This example from a simple WPF application, explicitly initializes the <see cref="T:Awesomium.Core.WebCore"/> providing
            some configuration settings.
            <p/>
            If the <c>Window</c> contains a <c>WebControl</c>, creation of the control in <c>InitializeComponent</c>
            will automatically initialize the <see cref="T:Awesomium.Core.WebCore"/> with default configuration settings. Therefore,
            initialization must be performed before <c>InitializeComponent</c>.
            <code lang="C#">
            using System;
            using System.Linq;
            using Awesomium.Core;
            using System.Windows;
            using System.Collections.Generic;
            
            namespace WpfApplication1
            {
                /// <summary>
                /// Interaction logic for MainWindow.xaml
                /// </summary>
                public partial class MainWindow : Window
                {
                    public MainWindow()
                    {
                        // This may not be the only window in our application,
                        // but the WebCore can only be initialized once per process.
                        // Prevent attempting to re-initialize which would throw
                        // an exception, by checking for WebCore.IsInitialized.
                        if ( !WebCore.IsInitialized )
                            WebCore.Initialize( new WebConfig()
                            {
                                HomeURL = new Uri( "http://www.awesomium.com" ),
                                RemoteDebuggingPort = 2229,
                                LogLevel = LogLevel.Verbose
                            } );
            
                        InitializeComponent();
                    }
                }
            }
            </code>
            <code lang="VB.NET">
            Imports System.Linq
            Imports Awesomium.Core
            Imports System.Windows
            Imports System.Collections.Generic
            
            Namespace WpfApplication1
            	''' <summary>
            	''' Interaction logic for MainWindow.xaml
            	''' </summary>
            	Public Partial Class MainWindow
            		Inherits Window
            		
            		Public Sub New()
            			' This may not be the only window in our application,
            			' but the WebCore can only be initialized once per process.
            			' Prevent attempting to re-initialize which would throw
            			' an exception, by checking for WebCore.IsInitialized.
            			If Not WebCore.IsInitialized Then
            				WebCore.Initialize(New WebConfig() With { _
            					.HomeURL = New Uri("https://www.awesomium.com"), _
            					.RemoteDebuggingPort = 2229, _
            					.LogLevel = LogLevel.Verbose _
            				})
            			End If
            
            			InitializeComponent()
            		End Sub
            	End Class
            End Namespace
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The member is called while <see cref="T:Awesomium.Core.WebCore"/> is already initialized.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="P:Awesomium.Core.WebCore.IsInitialized"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig,System.Boolean)">
            <summary>
            Initializes the <see cref="T:Awesomium.Core.WebCore"/> with certain configuration settings.
            </summary>
            <param name="config">
            An instance of <see cref="T:Awesomium.Core.WebConfig"/> specifying configuration settings.
            </param>
            <param name="start">
            <c>true</c> if the <see cref="T:Awesomium.Core.WebCore"/> should start immediately. <c>false</c> to perform lazy instantiation:
            The <see cref="T:Awesomium.Core.WebCore"/> will start when the first <see cref="T:Awesomium.Core.IWebView"/> or <see cref="T:Awesomium.Core.WebSession"/> is created.
            </param>
            <remarks>
            <para>
            This method performs lazy instantiation. The <see cref="T:Awesomium.Core.WebCore"/> will start when 
            the first <see cref="T:Awesomium.Core.IWebView"/> or <see cref="T:Awesomium.Core.WebSession"/> is created.
            </para>
            <para>
            If you do not call this method, the <see cref="T:Awesomium.Core.WebCore"/> will be automatically initialized
            using default configuration settings, when you first create a view through <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
            or by instantiating a <c>WebControl</c>, or when you create the first <see cref="T:Awesomium.Core.WebSession"/>.
            </para>
            <note>
            If you are not sure if the <see cref="T:Awesomium.Core.WebCore"/> has been initialized, check <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>
            before calling this method. If <see cref="T:Awesomium.Core.WebCore"/> is already initialized, you will have
            to shut it down (see <see cref="M:Awesomium.Core.WebCore.Shutdown"/>) and <b>restart the hosting application</b> before 
            initializing the <see cref="T:Awesomium.Core.WebCore"/> again.
            <p/>
            <b>Only a single initialization/instantiation of the <see cref="T:Awesomium.Core.WebCore"/> is possible per 
            application session (process).</b>
            </note>
            <note type="caution">
            Note that <b>Awesomium</b> and <b>Awesomium.NET</b> are not thread-safe. All API members should be called 
            from the thread that initialized the <see cref="T:Awesomium.Core.WebCore"/> or created the first <see cref="T:Awesomium.Core.WebView"/>, 
            <see cref="T:Awesomium.Core.WebSession"/> or technology-specific <c>WebControl</c> if <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/> 
            is not explicitly called.
            <list type="bullet">
            <item>
            <description>
            For UI applications (such as those using a technology specific <c>WebControl</c>) 
            this is always the UI thread.
            </description>
            </item>
            <item>
            <description>
            If you have started the <see cref="T:Awesomium.Core.WebCore"/> on a non-UI thread using <see cref="M:Awesomium.Core.WebCore.Run"/>,
            you must use any of the available synchronization methods as described <see cref="M:Awesomium.Core.WebCore.Run">here</see>.
            </description>
            </item>
            </list>
            <i>Certain exceptions to these rules, such as <see cref="M:Awesomium.Core.Data.DataSource.SendResponse(Awesomium.Core.Data.DataSourceRequest,Awesomium.Core.Data.DataSourceResponse)"/>, are documented.</i>
            </note>
            </remarks>
            <example>
            This example from a simple WPF application, explicitly initializes the <see cref="T:Awesomium.Core.WebCore"/> providing
            some configuration settings.
            <p/>
            If the <c>Window</c> contains a <c>WebControl</c>, creation of the control in <c>InitializeComponent</c>
            will automatically initialize the <see cref="T:Awesomium.Core.WebCore"/> with default configuration settings. Therefore,
            initialization must be performed before <c>InitializeComponent</c>.
            <code lang="C#">
            using System;
            using System.Linq;
            using Awesomium.Core;
            using System.Windows;
            using System.Collections.Generic;
            
            namespace WpfApplication1
            {
                /// <summary>
                /// Interaction logic for MainWindow.xaml
                /// </summary>
                public partial class MainWindow : Window
                {
                    public MainWindow()
                    {
                        // This may not be the only window in our application,
                        // but the WebCore can only be initialized once per process.
                        // Prevent attempting to re-initialize which would throw
                        // an exception, by checking for WebCore.IsInitialized.
                        if ( !WebCore.IsInitialized )
                            WebCore.Initialize( new WebConfig()
                            {
                                HomeURL = new Uri( "http://www.awesomium.com" ),
                                RemoteDebuggingPort = 2229,
                                LogLevel = LogLevel.Verbose
                            } );
            
                        InitializeComponent();
                    }
                }
            }
            </code>
            <code lang="VB.NET">
            Imports System.Linq
            Imports Awesomium.Core
            Imports System.Windows
            Imports System.Collections.Generic
            
            Namespace WpfApplication1
            	''' <summary>
            	''' Interaction logic for MainWindow.xaml
            	''' </summary>
            	Public Partial Class MainWindow
            		Inherits Window
            		
            		Public Sub New()
            			' This may not be the only window in our application,
            			' but the WebCore can only be initialized once per process.
            			' Prevent attempting to re-initialize which would throw
            			' an exception, by checking for WebCore.IsInitialized.
            			If Not WebCore.IsInitialized Then
            				WebCore.Initialize(New WebConfig() With { _
            					.HomeURL = New Uri("https://www.awesomium.com"), _
            					.RemoteDebuggingPort = 2229, _
            					.LogLevel = LogLevel.Verbose _
            				})
            			End If
            
            			InitializeComponent()
            		End Sub
            	End Class
            End Namespace
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The member is called while <see cref="T:Awesomium.Core.WebCore"/> is already initialized.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="P:Awesomium.Core.WebCore.IsInitialized"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.Start">
            <summary>
            Performs the actual initialization.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebCore.Run">
            <summary>
            Installs an Awesomium-specific synchronization context and starts an update loop
            on this thread, that will block the thread until the <see cref="T:Awesomium.Core.WebCore"/> is
            shut down (see: <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </summary>
            <remarks>
            This method should only be used when Awesomium is run on a dedicated, background
            or non-UI thread or in any environment without a valid synchronization context
            and without a message loop (such as a Console application).
            <p/>
            The method will install an Awesomium-specific synchronization context and start an
            update loop on the thread, that will block the thread until the <see cref="T:Awesomium.Core.WebCore"/>
            is shut down (see: <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            <h2>Interacting with Awesomium Cross-Thread</h2>
            After calling <see cref="M:Awesomium.Core.WebCore.Run"/>, applications can interact with Awesomium using any
            of the following methods:
            <list type="bullet">
            <item>
            <description>
            By assigning <b>event handlers</b> to the various available events of the
            <see cref="T:Awesomium.Core.WebCore"/>, <see cref="T:Awesomium.Core.IWebView"/> or other components of <b>Awesomium.NET</b>.
            <p/>
            Event handlers can be assigned either before you call <see cref="M:Awesomium.Core.WebCore.Run"/> or
            by using any of the rest of the methods in this list, that allow you to execute
            code synchronously or asynchronously on Awesomium's dedicated thread.
            <note type="caution">
            Event handlers will be called from Awesomium's dedicated thread. It is safe to access
            Awesomium API from inside those handlers but you should not attempt to access anything
            outside Awesomium's thread from there, unless by using similar existing synchronization
            methods to access those threads.
            </note>
            </description>
            </item>
            <item>
            <description>
            By using <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> to <b>asynchronously</b>
            execute code on Awesomium's thread.
            <p/>
            For details, read the <b>Accessing Awesomium's Synchronization-Context</b> section
            below.
            </description>
            </item>
            <item>
            <description>
            By using <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"/> to <b>synchronously</b> 
            execute code on Awesomium's thread.
            <p/>
            For details, read the <b>Accessing Awesomium's Synchronization-Context</b> section
            below.
            </description>
            </item>
            <item>
            <description>
            By using any of the <see cref="O:Awesomium.Core.WebCore.QueueWork"/> methods to queue work 
            to be executed on Awesomium's thread, in the next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            </description>
            </item>
            <item>
            <description>
            Through the <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> interface that is implemented by
            all <see cref="T:Awesomium.Core.IWebView"/> instances.
            <p/>
            For details, read the <b><see cref="T:Awesomium.Core.IWebView">Thread Safety</see></b> section of 
            <see cref="T:Awesomium.Core.IWebView"/>.
            </description>
            </item>
            </list>
            <h2>Accessing Awesomium's Synchronization-Context</h2>
            You can only access Awesomium's synchronization context while your code
            executes on Awesomium's thread. The most practical way of doing this, is
            by handling an event such as <see cref="E:Awesomium.Core.WebCore.Started"/>. Events are 
            fired from Awesomium's thread and from your event handler you can access
            Awesomium's synchronization context through:
            <list type="bullet">
            <item>
            <description>
            <see cref="P:System.Threading.SynchronizationContext.Current"/>
            </description>
            </item>
            </list>
            <p/>
            <note>
            You can pass a reference to the acquired <see cref="T:System.Threading.SynchronizationContext"/>
            object to another thread, as long as you obtained that reference on Awesomium's
            main thread.
            </note>
            <p/>
            If Awesomium is running on a UI thread on MS Windows, the returned 
            <see cref="T:System.Threading.SynchronizationContext"/> is either of type 
            <see cref="T:System.Windows.Forms.WindowsFormsSynchronizationContext"/>
            for Windows Forms or <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext"/>
            for WPF.
            <p/>
            If Awesomium is running on a dedicated thread and has started using <see cref="M:Awesomium.Core.WebCore.Run"/>,
            the returned <see cref="T:System.Threading.SynchronizationContext"/> is of type <c>AwesomiumSynchronizationContext</c>.
            <p/>
            The simplest way to check whether you have acquired a valid synchronization
            context that can be used to safely execute code on Awesomium's thread, is
            by executing the following code <b>on Awesomium's thread:</b>
            <code language="C#">
            SynchronizationContext syncCtx = SynchronizationContext.Current;
            bool isValidSynchronizationContext = ( syncCtx != null ) &amp;&amp; ( syncCtx.GetType() != typeof( SynchronizationContext ) );
            </code>
            <code language="VB">
            Dim m_SyncCtx As SynchronizationContext = SynchronizationContext.Current
            Dim m_IsValidSynchronizationContext As Boolean = ( syncCtx InNot Nothing ) AndAlso ( syncCtx.GetType() &lt;&gt; GetType( SynchronizationContext ) )
            </code>
            <code language="C++">
            SynchronizationContext *syncCtx = SynchronizationContext-&gt;Current;
            bool isValidSynchronizationContext = (syncCtx != nullptr) &amp;&amp; (syncCtx-&gt;GetType() != SynchronizationContext::typeid);
            </code>
            <i><c>isValidSynchronizationContext</c></i> will be <c>true</c> if a valid
            synchronization object has been acquired. You can now pass this reference
            to other threads and use it to execute code safely on Awesomium's thread.
            <h3>When can the acquired SynchronizationContext not be valid?</h3>
            When Awesomium is running on a UI thread or when started on a dedicated thread
            using <see cref="M:Awesomium.Core.WebCore.Run"/>, <see cref="P:Awesomium.Core.WebCore.UpdateState"/> returns either <see cref="F:Awesomium.Core.WebCoreUpdateState.InTechnologyContext"/>
            or <see cref="F:Awesomium.Core.WebCoreUpdateState.InSelfContext"/> and a valid <see cref="T:System.Threading.SynchronizationContext"/>
            is always available.
            <p/>
            However, if Awesomium is running on Mono or on an operating system other than 
            MS Windows and <see cref="P:Awesomium.Core.WebCore.UpdateState"/> returns <see cref="F:Awesomium.Core.WebCoreUpdateState.InAutoUpdate"/>,
            this most possibly indicates that a technology-specific synchronization model
            is used by the <see cref="T:Awesomium.Core.WebCore"/> for auto-updating and a valid 
            <see cref="T:System.Threading.SynchronizationContext"/> is not available.
            <p/>
            In this case, you can still safely execute code on Awesomium's thread, by using 
            any of the rest of the available methods described in <b>Interacting with Awesomium Cross-Thread</b>
            above.
            <h2>Shutting Down Awesomium</h2>
            When your application exits, you must shut down Awesomium by calling 
            <see cref="M:Awesomium.Core.WebCore.Shutdown"/>.
            <p/>
            <note>
            <see cref="M:Awesomium.Core.WebCore.Shutdown"/> is thread-safe and can be called from any thread.
            </note>
            <p/>
            Calling <see cref="M:Awesomium.Core.WebCore.Shutdown"/> when Awesomium is running on a dedicated
            thread and has started with <see cref="M:Awesomium.Core.WebCore.Run"/>, will immediately exit
            Awesomium's update loop and uninstall Awesomium's synchronization context.
            <p/>
            <note type="caution">
            If Awesomium is running on a dedicated thread and you call <see cref="M:Awesomium.Core.WebCore.Shutdown"/>
            from inside an event handler of any of Awesomium's events, any code
            in that event handler that is supposed to execute after <see cref="M:Awesomium.Core.WebCore.Shutdown"/>
            may not be reached and executed since <see cref="M:Awesomium.Core.WebCore.Shutdown"/> immediately
            exits and kills Awesomium's dedicated thread.
            </note>
            </remarks>
            <example>
            The following samples available with the <b>Awesomium</b> and <b>Awesomium .NET SDK</b>,
            demonstrate starting the <see cref="T:Awesomium.Core.WebCore"/> in a non-UI thread and interacting with it
            cross-thread:
            <list type="bullet">
            <item>
            <description>
            <i><b>BasicSample</b></i>
            <p/>
            Simple sample that demonstrates using Awesomium in a Console application and 
            interacting with it by monitoring events.
            </description>
            </item>
            <item>
            <description>
            <i><b>BasicAsyncSample</b></i>
            <p/>
            Like the above, only it starts Awesomium on a dedicated thread to allow the
            application keep running in its own thread accepting user input. It then
            interacts with Awesomium using methods of the new synchronization model.
            </description>
            </item>
            </list>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Awesomium.Core.WebCore"/> has already been initialized on another thread.
            <see cref="M:Awesomium.Core.WebCore.Run"/> must be called on the same thread that initialized the
            <see cref="T:Awesomium.Core.WebCore"/> (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>), usually right after
            initialization.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Awesomium.Core.WebCore"/> is already auto-updating, using an available
            synchronization context or a technology-specific synchronization model
            (see: <see cref="P:Awesomium.Core.WebCore.UpdateState"/>).
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <b>Awesomium.NET</b> failed to install an Awesomium-specific synchronization
            context on this thread. Please report this error.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.Run(Awesomium.Core.CoreStartEventHandler)">
            <summary>
            Installs an Awesomium-specific synchronization context and starts an update loop
            on this thread, that will block the thread until the <see cref="T:Awesomium.Core.WebCore"/> is
            shut down (see: <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </summary>
            <param name="callback">
            A <see cref="T:Awesomium.Core.CoreStartEventHandler"/> method to be called when the core starts
            auto-updating.
            </param>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.WebCore.Run()&quot;]/remarks/node()"/>
            <!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.WebCore.Run()&quot;]/example/node()"/>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Awesomium.Core.WebCore"/> has already been initialized on another thread.
            <see cref="M:Awesomium.Core.WebCore.Run"/> must be called on the same thread that initialized the
            <see cref="T:Awesomium.Core.WebCore"/> (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>), usually right after
            initialization.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:Awesomium.Core.WebCore"/> is already auto-updating, using an available
            synchronization context or a technology-specific synchronization model
            (see: <see cref="P:Awesomium.Core.WebCore.UpdateState"/>).
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <b>Awesomium.NET</b> failed to install an Awesomium-specific synchronization
            context on this thread. Please report this error.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.QueueWork(System.Action)">
            <summary>
            Queues an action to be executed on Awesomium's main thread.
            </summary>
            <param name="action">
            The delegate encapsulating the method to be executed on Awesomium's
            main thread.
            </param>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions queued using <see cref="M:Awesomium.Core.WebCore.QueueWork(System.Action)"/>, are guaranteed to be executed
            on Awesomium's main thread. This allows cross-thread access to Awesomium's API.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebCore.QueueWork``1(System.Action{``0},``0)">
            <summary>
            Queues an action to be executed on Awesomium's main thread.
            </summary>
            <typeparam name="T">
            The type of the value passed at <paramref name="state"/>.
            </typeparam>
            <param name="action">
            The delegate encapsulating the method to be executed on Awesomium's
            main thread.
            </param>
            <param name="state">
            An object of type <typeparamref name="T"/> that will passed to <paramref name="action"/>.
            </param>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions queued using <see cref="M:Awesomium.Core.WebCore.QueueWork``1(System.Action{``0},``0)"/>, are guaranteed to be executed on 
            Awesomium's main thread. This allows cross-thread access to Awesomium's API.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebCore.QueueWork(Awesomium.Core.IWebView,System.Action)">
            <summary>
            Queues an action associated with an <see cref="T:Awesomium.Core.IWebView"/> instance,
            to be executed on Awesomium's main thread.
            </summary>
            <param name="view">
            The <see cref="T:Awesomium.Core.IWebView"/> instance associated with the work to be executed.
            </param>
            <param name="action">
            The delegate encapsulating the method to be executed on Awesomium's
            main thread.
            </param>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions queued using <see cref="M:Awesomium.Core.WebCore.QueueWork(Awesomium.Core.IWebView,System.Action)"/>, are guaranteed to be executed
            on Awesomium's main thread. This allows cross-thread access to Awesomium's API.
            <note>
            The <paramref name="action"/> will only be executed if the specified
            <paramref name="view"/>, is <i>alive</i> (see: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            in the next update pass.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="view"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.QueueWork``1(Awesomium.Core.IWebView,System.Action{``0},``0)">
            <summary>
            Queues an action associated with an <see cref="T:Awesomium.Core.IWebView"/> instance,
            to be executed on Awesomium's main thread.
            </summary>
            <typeparam name="T">
            The type of the value passed at <paramref name="state"/>.
            </typeparam>
            <param name="view">
            The <see cref="T:Awesomium.Core.IWebView"/> instance associated with the work to be executed.
            </param>
            <param name="action">
            The delegate encapsulating the method to be executed on Awesomium's
            main thread.
            </param>
            <param name="state">
            An object of type <typeparamref name="T"/> that will passed to <paramref name="action"/>.
            </param>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions queued using <see cref="M:Awesomium.Core.WebCore.QueueWork``1(Awesomium.Core.IWebView,System.Action{``0},``0)"/>, are guaranteed 
            to be executed on Awesomium's main thread. This allows cross-thread access to Awesomium's API.
            <note>
            The <paramref name="action"/> will only be executed if the specified
            <paramref name="view"/>, is <i>alive</i> (see: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            in the next update pass.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="view"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.DoWork``1(System.Func{``0})">
            <summary>
            Executes an action synchronously on Awesomium's main thread, returning a value of the 
            type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates. This type 
            parameter is covariant. That is, you can use either the type you specified or any 
            type that is more derived.
            </typeparam>
            <param name="action">
            The delegate encapsulating a method that has no parameters and returns a value 
            of the type specified by the <typeparamref name="TResult"/> parameter, to be executed 
            on Awesomium's main thread.
            </param>
            <returns>
            The return value of the method that <paramref name="action"/> encapsulates.
            </returns>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions executed using <see cref="M:Awesomium.Core.WebCore.DoWork``1(System.Func{``0})"/>, 
            are guaranteed to be executed on Awesomium's main thread. This allows cross-thread access 
            to Awesomium's API.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebCore.DoWork``2(System.Func{``0,``1},``0)">
            <summary>
            Executes an action synchronously on Awesomium's main thread, returning a value of the 
            type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates. This type 
            parameter is covariant. That is, you can use either the type you specified or any 
            type that is more derived.
            </typeparam>
            <typeparam name="T">
            The type of the value passed at <paramref name="state"/>.
            </typeparam>
            <param name="action">
            The delegate encapsulating a method that has one parameter and returns a value 
            of the type specified by the <typeparamref name="TResult"/> parameter, to be executed 
            on Awesomium's main thread.
            </param>
            <param name="state">
            An object of type <typeparamref name="T"/> that will passed to <paramref name="action"/>.
            </param>
            <returns>
            The return value of the method that <paramref name="action"/> encapsulates.
            </returns>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions executed using <see cref="M:Awesomium.Core.WebCore.DoWork``2(System.Func{``0,``1},``0)"/>, 
            are guaranteed to be executed on Awesomium's main thread. This allows cross-thread access 
            to Awesomium's API.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebCore.DoWork``1(Awesomium.Core.IWebView,System.Func{``0})">
            <summary>
            Executes an action associated with an <see cref="T:Awesomium.Core.IWebView"/> synchronously on Awesomium's 
            main thread, returning a value of the type specified by the <typeparamref name="TResult"/> 
            parameter.
            </summary>
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates. This type 
            parameter is covariant. That is, you can use either the type you specified or any 
            type that is more derived.
            </typeparam>
            <param name="view">
            The <see cref="T:Awesomium.Core.IWebView"/> instance associated with the work to be executed.
            </param>
            <param name="action">
            The delegate encapsulating a method that has no parameters and returns a value 
            of the type specified by the <typeparamref name="TResult"/> parameter, to be executed 
            on Awesomium's main thread.
            </param>
            <returns>
            The return value of the method that <paramref name="action"/> encapsulates.
            </returns>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions executed using <see cref="M:Awesomium.Core.WebCore.DoWork``1(Awesomium.Core.IWebView,System.Func{``0})"/>, 
            are guaranteed to be executed on Awesomium's main thread. This allows cross-thread access 
            to Awesomium's API.
            <note>
            The <paramref name="action"/> will only be executed if the specified
            <paramref name="view"/>, is <i>alive</i> (see: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            in the next update pass.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="view"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.DoWork``2(Awesomium.Core.IWebView,System.Func{``0,``1},``0)">
            <summary>
            Executes an action associated with an <see cref="T:Awesomium.Core.IWebView"/> synchronously on Awesomium's 
            main thread, returning a value of the type specified by the <typeparamref name="TResult"/> 
            parameter.
            </summary>
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates. This type 
            parameter is covariant. That is, you can use either the type you specified or any 
            type that is more derived.
            </typeparam>
            <typeparam name="T">
            The type of the value passed at <paramref name="state"/>.
            </typeparam>
            <param name="view">
            The <see cref="T:Awesomium.Core.IWebView"/> instance associated with the work to be executed.
            </param>
            <param name="action">
            The delegate encapsulating a method that has one parameter and returns a value 
            of the type specified by the <typeparamref name="TResult"/> parameter, to be executed 
            on Awesomium's main thread.
            </param>
            <param name="state">
            An object of type <typeparamref name="T"/> that will passed to <paramref name="action"/>.
            </param>
            <returns>
            The return value of the method that <paramref name="action"/> encapsulates.
            </returns>
            <remarks>
            The <paramref name="action"/> will be executed in <see cref="T:Awesomium.Core.WebCore"/>'s
            next <see cref="M:Awesomium.Core.WebCore.Update"/> pass.
            <p/>
            Actions executed using <see cref="M:Awesomium.Core.WebCore.DoWork``2(Awesomium.Core.IWebView,System.Func{``0,``1},``0)"/>, 
            are guaranteed to be executed on Awesomium's main thread. This allows cross-thread access 
            to Awesomium's API.
            <note>
            The <paramref name="action"/> will only be executed if the specified
            <paramref name="view"/>, is <i>alive</i> (see: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            in the next update pass.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="view"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.Shutdown">
            <summary>
            Destroys the <see cref="T:Awesomium.Core.WebCore"/> and any lingering <see cref="T:Awesomium.Core.IWebView"/> instances.
            </summary>
            <remarks>
            Make sure that this is not called while the hosting UI of any views
            created by this <see cref="T:Awesomium.Core.WebCore"/>, is still live and visible. 
            This method will destroy all views created by this <see cref="T:Awesomium.Core.WebCore"/>.
            Any attempt to access them or any member of this class after calling this method,
            will fail.
            <p/>
            When Awesomium is running on a dedicated non-UI thread using <see cref="M:Awesomium.Core.WebCore.Run"/>,
            calling <see cref="M:Awesomium.Core.WebCore.Shutdown"/> will immediately exit the auto-update loop, uninstall
            Awesomium's synchronization context and exit the thread.
            <note>
            This method is thread-safe and can be called from any thread.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.WebCore.IsInitialized"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)">
            <summary>
            Creates an <b>in-memory</b> <see cref="T:Awesomium.Core.WebSession"/> which will be used to store all user-data (such as
            cookies, cache, certificates, local databases, etc).
            </summary>
            <param name="prefs">
            A <see cref="T:Awesomium.Core.WebPreferences"/> instance specifying session specific preferences.
            </param>
            <remarks>
            The returned <see cref="T:Awesomium.Core.WebSession"/> instance can be used when you create a 
            <see cref="T:Awesomium.Core.IWebView"/>, by either specifying it as the <c>session</c> parameter in 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>,
            or by assigning it to the <c>WebSession</c> property of technology specific <c>WebControls</c>, 
            when you instantiate them.
            <p/>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            <p/>
            <see cref="T:Awesomium.Core.WebSession"/> is a disposable object. You can dispose <see cref="T:Awesomium.Core.WebSession"/> instances that are no longer associated with a view. 
            If you forget to do this, all <see cref="T:Awesomium.Core.WebSession"/> instances maintained by the <see cref="T:Awesomium.Core.WebCore"/>, are disposed at <see cref="M:Awesomium.Core.WebCore.Shutdown"/>. 
            <note>
            A session cannot not be destroyed until all <see cref="T:Awesomium.Core.IWebView"/> instances associated with it have been destroyed, and all download
            operations controlled by it are either complete or canceled. Attempting to dispose a <see cref="T:Awesomium.Core.WebSession"/> instance that is still associated with views
            or active download operations, will throw an exception in Awesomium.NET.
            </note>
            For details on how to use a <see cref="T:Awesomium.Core.WebSession"/>, read the documentation of <see cref="T:Awesomium.Core.WebSession"/>, or the following article:
            <b><a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </remarks>
            <returns>
            Returns a new <see cref="T:Awesomium.Core.WebSession"/> instance that you can use with
            any number of <see cref="T:Awesomium.Core.IWebView"/> instances.
            </returns>
            <example>
            <code lang="C#">
            using ( WebSession session = WebCore.CreateWebSession( new WebPreferences() { CustomCSS = "::-webkit-scrollbar { visibility: hidden; }" } ) )
            {
            	using ( WebView view = WebCore.CreateWebView( 1280, 960, session ) )
            	{
            		bool finishedLoading = false;
            
            		view.LoadURL( new Uri( "http://www.awesomium.com" ) );
            		view.LoadingFrameComplete += ( s, e ) =&gt;
            		{
            			if ( e.IsMainFrame )
            				finishedLoading = true;
            		};
            
            		while ( !finishedLoading )
            		{
            			Thread.Sleep( 100 );
            			WebCore.Update();
            		}
            
            		BitmapSurface surface = (BitmapSurface)view.Surface;
            		surface.SaveToPNG( "result.png", true );
            	}
            }
            </code>
            <code lang="VB">
            Using session As WebSession = WebCore.CreateWebSession(New WebPreferences() With {.CustomCSS = "::-webkit-scrollbar { visibility: hidden; }"})
            	Using view As WebView = WebCore.CreateWebView(1280, 960, session)
            		Dim finishedLoading As Boolean = False
            
            		view.LoadURL(New Uri("http://www.awesomium.com"))
            		AddHandler view.LoadingFrameComplete, Sub(s, e)
            													If e.IsMainFrame Then
            														finishedLoading = True
            													End If
            											  End Sub	
            
            		Do While Not finishedLoading
            			Thread.Sleep(100)
            			WebCore.Update()
            		Loop
            
            		Dim surface As BitmapSurface = CType(view.Surface, BitmapSurface)
            		surface.SaveToPNG("result.png", True)
            	End Using
            End Using
            </code>
            </example>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebSession(System.String,Awesomium.Core.WebPreferences)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.WebSession"/> which will be used to store all user-data (such as
            cookies, cache, certificates, local databases, etc).
            </summary>
            <param name="dataPath">
            The directory path to store the data. This can contain environment variables.
            </param>
            <param name="prefs">
            A <see cref="T:Awesomium.Core.WebPreferences"/> instance specifying session specific preferences.
            </param>
            <remarks>
            The returned <see cref="T:Awesomium.Core.WebSession"/> instance can be used when you create a 
            <see cref="T:Awesomium.Core.IWebView"/>, by either specifying it as the <c>session</c> parameter in 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>,
            or by assigning it to the <c>WebSession</c> property of technology specific <c>WebControls</c>, 
            when you instantiate them.
            <p/>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            <note type="caution">
            Before you attempt to create an <i>on-disk</i> <see cref="T:Awesomium.Core.WebSession"/>, you should always be sure that
            another session is not using the same <paramref name="dataPath"/>. Only a single <see cref="T:Awesomium.Core.WebSession"/>
            can use the same <paramref name="dataPath"/> at a time. To check if another <see cref="T:Awesomium.Core.WebSession"/>
            is currently using the specified <paramref name="dataPath"/>, use:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.WebSessionCollection.Contains(System.String)"/> (accessed through <see cref="P:Awesomium.Core.WebCore.Sessions"/>).
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.WebSessionCollection.Item(System.String)"/> (accessed through <see cref="P:Awesomium.Core.WebCore.Sessions"/>).
            </description>
            </item>
            </list>
            A fast and secure way to create a new, or acquire an existing <see cref="T:Awesomium.Core.WebSession"/>, is:
            <code lang="C#">
            string dataPath = @"C:\SomePath";
            WebSession session = WebCore.Sessions[ dataPath ] ?? WebCore.CreateWebSession( dataPath, WebPreferences.Default );
            </code>
            Technology specific <c>WebSessionProviders</c> provide existing sessions by default.
            </note>
            <see cref="T:Awesomium.Core.WebSession"/> is a disposable object. You can dispose <see cref="T:Awesomium.Core.WebSession"/> instances that are no longer associated with a view. 
            If you forget to do this, all <see cref="T:Awesomium.Core.WebSession"/> instances maintained by the <see cref="T:Awesomium.Core.WebCore"/>, are disposed at <see cref="M:Awesomium.Core.WebCore.Shutdown"/>. 
            This ensures that the <see cref="T:Awesomium.Core.WebSession"/> will be saved to disk upon application exit.
            <note>
            A session cannot not be destroyed until all <see cref="T:Awesomium.Core.IWebView"/> instances associated with it have been destroyed, and all download
            operations controlled by it are either complete or canceled. Attempting to dispose a <see cref="T:Awesomium.Core.WebSession"/> instance that is still associated with views
            or active download operations, will throw an exception in Awesomium.NET.
            </note>
            For details on how to use a <see cref="T:Awesomium.Core.WebSession"/>, read the documentation of <see cref="T:Awesomium.Core.WebSession"/>, or the following article:
            <b><a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </remarks>
            <returns>
            Returns a new <see cref="T:Awesomium.Core.WebSession"/> instance that you can use with
            any number of <see cref="T:Awesomium.Core.IWebView"/> instances.
            </returns>
            <example>
            This example demonstrates creating and using a <see cref="T:Awesomium.Core.WebSession"/> with the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>,
            in a non-UI application.
            <code lang="C#">
            using ( WebSession session = WebCore.CreateWebSession( "C:\\MyCache", new WebPreferences() { CustomCSS = "::-webkit-scrollbar { visibility: hidden; }" } ) )
            {
            	using ( WebView view = WebCore.CreateWebView( 1280, 960, session ) )
            	{
            		bool finishedLoading = false;
            
            		view.LoadURL( new Uri( "http://www.awesomium.com" ) );
            		view.LoadingFrameComplete += ( s, e ) =&gt;
            		{
            			if ( e.IsMainFrame )
            				finishedLoading = true;
            				
            		    BitmapSurface surface = (BitmapSurface)view.Surface;
            		    surface.SaveToPNG( "result.png", true );
            		};
            		
                    if ( WebCore.UpdateState == WebCoreUpdateState.NotUpdating )
                        WebCore.Run();
            	}
            }
            </code>
            <code lang="VB">
            Using session As WebSession = WebCore.CreateWebSession("C:\MyCache", New WebPreferences() With {.CustomCSS = "::-webkit-scrollbar { visibility: hidden; }"})
            	Using view As WebView = WebCore.CreateWebView(1280, 960, session)
            		Dim finishedLoading As Boolean = False
            
            		view.LoadURL(New Uri("http://www.awesomium.com"))
            		AddHandler view.LoadingFrameComplete, Sub(s, e)
            													If e.IsMainFrame Then
            														finishedLoading = True
            													End If
            													
            													Dim surface As BitmapSurface = CType(view.Surface, BitmapSurface)
            		                                            surface.SaveToPNG("result.png", True)
            											  End Sub	
            
            		If WebCore.UpdateState = WebCoreUpdateState.NotUpdating Then
                        WebCore.Run()
                    End If
            	End Using
            End Using
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:Awesomium.Core.WebSession"/> using the same cache (<paramref name="dataPath"/>), 
            has already been initialized on this system.
            </exception>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="dataPath"/> is read-only.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataPath"/> is a zero-length string, contains only white space, or contains one
            or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/> -or- 
            <paramref name="dataPath"/> is prefixed with, or contains only a colon character (:).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dataPath"/> is null.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="dataPath"/> exceeds the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than
            248 characters and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="dataPath"/> is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="dataPath"/> contains a colon character (:) that is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="session">
            The <see cref="T:Awesomium.Core.WebSession"/> to use for this <see cref="T:Awesomium.Core.WebView"/>.
            </param>
            <param name="type">
            The type of WebView to create. See <see cref="T:Awesomium.Core.WebViewType"/> for more information.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="session"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="session"/> instance, is disposed.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="session">
            The <see cref="T:Awesomium.Core.WebSession"/> to use for this <see cref="T:Awesomium.Core.WebView"/>.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A null reference has been specified for <paramref name="session"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="session"/> instance, is disposed.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebViewType)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> (think of it like a tab in Chrome, you can load web-pages
            into it, interact with it, and render it to a buffer).
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="type">
            The type of WebView to create. See <see cref="T:Awesomium.Core.WebViewType"/> for more information.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateSourceWebView(System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> that displays the source code of loaded pages.
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="P:Awesomium.Core.IWebView.IsSourceView"/>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.CreateSourceWebView(System.Int32,System.Int32,Awesomium.Core.WebViewType)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> that displays the source code of loaded pages.
            </summary>
            <param name="width">The initial width of the view in pixels.</param>
            <param name="height">The initial height of the view in pixels.</param>
            <param name="type">
            The type of WebView to create. See <see cref="T:Awesomium.Core.WebViewType"/> for more information.
            </param>
            <returns>
            A new <see cref="T:Awesomium.Core.WebView"/> instance.
            </returns>
            <remarks>
            If you call this method before initializing the <see cref="T:Awesomium.Core.WebCore"/>, Awesomium
            will automatically start with default configuration settings.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has previously been shut down.
            </exception>
            <seealso cref="P:Awesomium.Core.IWebView.IsSourceView"/>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.DestroyUnwrappedViews">
            <summary>
            Destroys all native views created by Awesomium during a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
            event that was not canceled, but were never properly wrapped.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has not been initialized, or has been shut down.
            (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
            <seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.Update">
            <summary>
            [This method is deprecated and it will be removed in the next release. Please read the 
            <b>Remarks</b> section, to see how to modify your code using new features.]
            </summary>
            <remarks>
            Starting with version <b>1.7.4</b>, Awesomium.NET supports auto-updating on non-UI threads as well.
            <h4>Details</h4>
            <list type="bullet">
            <item>
            <description>
            In a non-UI environment (or even in a UI application), you can now create a dedicated 
            <see cref="T:System.Threading.Thread"/> for Awesomium and from that thread, use <see cref="M:Awesomium.Core.WebCore.Run"/> to start auto-updating.
            <p/>
            You can then interact with Awesomium from another thread using the methods described in the 
            <b>Interacting with Awesomium Cross-Thread</b> section in the documentation of: <see cref="M:Awesomium.Core.WebCore.Run"/>.
            </description>
            </item>
            <item>
            <description>
            In future versions, this method will be replaced by a synonymous event, fired on each update pass
            of the <see cref="T:Awesomium.Core.WebCore"/> (similar to a Window Procedure).
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has not been initialized, or has been shut down.
            (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
            <exception cref="T:System.AccessViolationException">
            You attempted to access the member from a thread other than
            thread where <see cref="T:Awesomium.Core.WebCore"/> was created.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebCore.Log(System.String,Awesomium.Core.LogSeverity,System.String,System.Int32)">
            <summary>
            Logs a message to the log (print to the console and log file).
            </summary>
            <param name="message">The message to print.</param>
            <param name="severity">The severity of the message.</param>
            <param name="file">The code file where logging occurs.</param>
            <param name="line">The code file's line where logging occurs.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has not been initialized, or has been shut down.
            (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="F:Awesomium.Core.LogLevel.None"/> was specified for <see cref="P:Awesomium.Core.WebConfig.LogLevel"/>
            during <see cref="T:Awesomium.Core.WebCore"/> initialization.
            </exception>
            <seealso cref="P:Awesomium.Core.WebConfig.LogPath"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.Log(System.String,Awesomium.Core.LogSeverity)">
            <summary>
            Logs a message to the log (print to the console and log file).
            </summary>
            <param name="message">The message to print.</param>
            <param name="severity">The severity of the message.</param>
            <remarks>
            <note type="note">
            Frequent use of this method may affect your application's performance as this method
            attempts to build a full stack trace to fill in the <c>file</c> and <c>line</c> fields.
            If this fields are not important for you or if this information is already available
            to you, you should prefer the faster <see cref="M:Awesomium.Core.WebCore.Log(System.String,Awesomium.Core.LogSeverity,System.String,System.Int32)"/>
            overload.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on a <see cref="T:Awesomium.Core.WebCore"/> that has not been initialized, or has been shut down.
            (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="F:Awesomium.Core.LogLevel.None"/> was specified for <see cref="P:Awesomium.Core.WebConfig.LogLevel"/>
            during <see cref="T:Awesomium.Core.WebCore"/> initialization.
            </exception>
            <seealso cref="P:Awesomium.Core.WebConfig.LogPath"/>
        </member>
        <member name="M:Awesomium.Core.WebCore.ReleaseMemory">
            <summary>
            Force TCMalloc to release as much unused memory as possible.
            </summary>
            <remarks>
            <note type="note">
            Reducing the size of the memory pool may cause a small performance hit.
            </note>
            <note type="note">
            Only implemented on MS Windows.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebCore.UpdateTimer">
            <summary>
            Should be called by technology-specific wrappers that implement
            their own synchronous auto-update timer.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebCore.Starting">
            <summary>
            Occurs when the <see cref="T:Awesomium.Core.WebCore"/> is starting.
            </summary>
            <remarks>
            <note type="caution">
            Setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>,
            will prevent the <see cref="T:Awesomium.Core.WebCore"/> from starting. 
            Use with caution.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="E:Awesomium.Core.WebCore.Initialized">
            <summary>
            Occurs when the <see cref="T:Awesomium.Core.WebCore"/> has been initialized.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
            <seealso cref="P:Awesomium.Core.WebCore.IsInitialized"/>
        </member>
        <member name="E:Awesomium.Core.WebCore.Started">
            <summary>
            Occurs right after the <see cref="T:Awesomium.Core.WebCore"/> has successfully started
            auto-updating.
            </summary>
            <seealso cref="P:Awesomium.Core.WebCore.IsRunning"/>
        </member>
        <member name="E:Awesomium.Core.WebCore.ShuttingDown">
            <summary>
            Occurs when the <see cref="T:Awesomium.Core.WebCore"/> is shutting down.
            </summary>
            <remarks>
            The <see cref="T:Awesomium.Core.WebCore"/> can shut down when an exception during the core's update
            cycle, was unhandled by user code. This will subsequently fire <see cref="E:Awesomium.Core.WebCore.ShuttingDown"/>,
            before the core destroys all resources (active views and sessions) and shuts down.
            When this is the reason for a shut down, <see cref="P:Awesomium.Core.CoreShutdownEventArgs.Exception"/>
            exposes the exception that causes the core to shut down.
            <note type="caution">
            Do not cancel the shutdown before you carefully investigate the exception and any inner exceptions.
            Report the details of the exception to: <a href="http://answers.awesomium.com">http://answers.awesomium.com</a>.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebCore.CreatedView">
            <summary>
            Occurs when a new view has been created by the <see cref="T:Awesomium.Core.WebCore"/>.
            The view can be a <see cref="T:Awesomium.Core.WebView"/> instance or any technology specific
            <c>WebControl</c>, all implementing the <see cref="T:Awesomium.Core.IWebView"/> interface.
            </summary>
            <remarks>
            This event is not called when <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired.
            It will only be called when/if the new view (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>),
            is wrapped.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebCore.Download">
            <summary>
            Occurs when a page loaded in any of the views maintained by the <see cref="T:Awesomium.Core.WebCore"/>, requests to begin downloading a certain file.
            </summary>
            <remarks>
            Starting with version <b>1.7</b>, <b>Awesomium.NET</b> implements an internal download manager that
            takes care of downloading operations for you.
            <note>
            Awesomium.NET's download manager, handles with download operations at global (<see cref="T:Awesomium.Core.WebCore"/>) level, 
            thus allowing download operations to complete even if the view that initially requested the download, is destroyed.
            </note>
            The <see cref="E:Awesomium.Core.WebCore.Download"/> event is fired for all download requests, regardless of the
            scenario that may be followed to handle the event.
            <p/>
            
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.WebCore.Download"/> event is handled, 
            when <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> is set to <c>false</c> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> 
            is set to <c>false</c> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> is set to <c>false</c> (default), controls will display their 
            predefined dialog that allows the user to select the file path to save the file to.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can modally handle the <see cref="E:Awesomium.Core.WebCore.Download"/> by providing a response through the <see cref="P:Awesomium.Core.DownloadEventArgs.SelectedFile"/> property, 
            before the event handler exits.
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            
            </remarks>
            <example>
            The following walkthrough, better describes the two major ways of responding to, and monitoring
            download requests.
            <h4>Default &amp; Modal Handling</h4>
            <list type="number">
            <item>
            <description>
            The loaded page initiates a download operation. This will immediately fire the <see cref="E:Awesomium.Core.WebCore.Download"/>
            event. The actual purpose of this event is to allow you to choose a destination path for the downloaded file.
            <p/>
            Technology specific <c>WebControls</c> show a <i>Save File</i> dialog. If the user cancels the dialog, the download
            operation is canceled. <b>You do not need to handle this event if you are using <c>WebControls</c> in a UI environment 
            and you want to let Awesomium.NET take care of the download procedure</b>. However, if your application wants 
            to provide a <i>silent</i> behavior with no dialogs or wants to provide its own dialog, you should handle this event 
            and set <see cref="P:Awesomium.Core.DownloadEventArgs.Handled"/> to <c>true</c>. You should then provide your own <b>modal</b> dialog or 
            silently specify a destination path by setting the <seealso cref="P:Awesomium.Core.DownloadEventArgs.SelectedFile"/> 
            property, <b>before the event handler returns</b>.
            <note>
            The <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/> is not related to any UI technology and is not supposed to automatically display UI
            of any kind. Therefore, it does not provide a default handling for the <see cref="E:Awesomium.Core.WebCore.Download"/> event. If you're using
            a <see cref="T:Awesomium.Core.WebView"/>, you should always handle this event to specify a destination path for the downloaded file. If you fail to
            do this, the event will be canceled.
            </note>
            If you have modally handled the <see cref="E:Awesomium.Core.WebCore.Download"/> event or you allowed the default dialog to be displayed
            and the event has not been canceled, Awesomium.NET's internal download manager goes through the following steps:
            </description>
            </item>
            <item>
            <description>
            A new <see cref="T:Awesomium.Core.DownloadItem"/> instance is created or, if the download operation is being repeated (see: <see cref="T:Awesomium.Core.DownloadItem"/>),
            the previous <see cref="T:Awesomium.Core.DownloadItem"/> is retrieved.
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> is fired. This allows you to access the <see cref="T:Awesomium.Core.DownloadItem"/> representing the download
            operation, in order to monitor the operation's status. <see cref="T:Awesomium.Core.DownloadItem"/> is a <see cref="T:Awesomium.Core.ViewModel"/> instance (therefore
            it implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>). If your application uses <see cref="P:Awesomium.Core.WebCore.Downloads"/> and its items as a 
            source to visual bindings, you do not need to handle the <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event.
            </description>
            </item>
            <item>
            <description>
            If the <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event has not been canceled, and the <see cref="T:Awesomium.Core.DownloadItem"/> instance represents
            a new download operation and not a restarted one, the <see cref="T:Awesomium.Core.DownloadItem"/> instance is now added to the 
            <see cref="P:Awesomium.Core.WebCore.Downloads"/> collection. <see cref="T:Awesomium.Core.DownloadCollection"/> implements 
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>. If your application uses <see cref="P:Awesomium.Core.WebCore.Downloads"/>
            as a source to visual bindings, you do not need to handle the <see cref="E:Awesomium.Core.WebCore.DownloadBegin"/> event.
            </description>
            </item>
            The operation starts (or restarts). You can monitor its status through the events of <see cref="T:Awesomium.Core.DownloadItem"/>, or, in a UI
            application just bind settings of your visual elements to properties of the <see cref="T:Awesomium.Core.DownloadItem"/> type.
            </list>
            </example>
            <seealso cref="T:Awesomium.Core.DownloadItem"/>
            <seealso cref="P:Awesomium.Core.WebCore.Downloads"/>
        </member>
        <member name="E:Awesomium.Core.WebCore.DownloadBegin">
            <summary>
            Occurs when a download operation is about to start.
            </summary>
            <remarks>
            This event occurs right after a <see cref="E:Awesomium.Core.WebCore.Download"/> that has not been canceled,
            and allows you to easily get the <see cref="T:Awesomium.Core.DownloadItem"/> instance representing the download
            operation, just before it's added to <see cref="P:Awesomium.Core.WebCore.Downloads"/>.
            <p/>
            For details, see: <see cref="E:Awesomium.Core.WebCore.Download"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsChildProcess">
            <summary>
            Gets if the calling process is an Awesomium Child Process.
            </summary>
            <seealso cref="P:Awesomium.Core.WebConfig.ChildProcessPath"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.Configuration">
            <summary>
            Gets a <see cref="T:Awesomium.Core.WebConfig"/> representing the configuration
            settings used to initialize the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.PackagePath">
            <summary>
            Gets the path to the loaded native Awesomium library.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsInitialized">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.WebCore"/> has been initialized.
            </summary>
            <remarks>
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> can only be initialized once per process
            (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) and should be shut down (see: <see cref="M:Awesomium.Core.WebCore.Shutdown"/>)
            only when your application exits.
            <p/>
            Once you have initialized the <see cref="T:Awesomium.Core.WebCore"/>, this property will keep 
            returning <c>true</c> even after you call <see cref="M:Awesomium.Core.WebCore.Shutdown"/> and it
            helps you avoid re-initializing the <see cref="T:Awesomium.Core.WebCore"/>, that is not allowed.
            </remarks>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsRunning">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.WebCore"/> has started automatic updating.
            </summary>
            <remarks>
            This property returns <c>true</c> when the <see cref="T:Awesomium.Core.WebCore"/>
            has started auto-updating, either using an available synchronization context
            (in UI threads), a technology or platform-specific synchronization model (in
            operating systems other than MS Windows), or using Awesomium's own synchronization
            context (when started on a non-UI thread using <see cref="M:Awesomium.Core.WebCore.Run"/>).
            <p/>
            For details, see <see cref="P:Awesomium.Core.WebCore.UpdateState"/>.
            <p/>
            This property will return <c>false</c> in any of the following situations:
            <list type="bullet">
            <item>
            <description>
            The <see cref="T:Awesomium.Core.WebCore"/> is not initialized yet.
            (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>)
            </description>
            </item>
            <item>
            <description>
            On a UI thread, lazy or no explicit initialization has been performed and no 
            <see cref="T:Awesomium.Core.IWebView"/> instance or <see cref="T:Awesomium.Core.WebSession"/> have been created yet, 
            that would force initialization and start auto-updating.
            </description>
            </item>
            <item>
            <description>
            On a non-UI thread, the <see cref="T:Awesomium.Core.WebCore"/> may be initialized and <see cref="T:Awesomium.Core.IWebView"/>
            or <see cref="T:Awesomium.Core.WebSession"/> instances created, but auto-updating has not started yet
            by calling <see cref="M:Awesomium.Core.WebCore.Run"/>.
            </description>
            </item>
            <item>
            <description>
            The <see cref="T:Awesomium.Core.WebCore"/> has been shut down.
            (see: <see cref="M:Awesomium.Core.WebCore.Shutdown"/>)
            </description>
            </item>
            </list>
            <note type="caution">
            This property does not indicate if the <see cref="T:Awesomium.Core.WebCore"/> has been initialized,
            but only if auto-updating has started. To check if the <see cref="T:Awesomium.Core.WebCore"/>
            is already initialized and avoid re-initializing it (that is not allowed and would
            throw an exception), use <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>.
            </note>
            <see cref="P:Awesomium.Core.WebCore.IsRunning"/> will always be <c>false</c> when <see cref="P:Awesomium.Core.WebCore.UpdateState"/>
            is <see cref="F:Awesomium.Core.WebCoreUpdateState.NotUpdating"/>, and <c>true</c> when <see cref="P:Awesomium.Core.WebCore.UpdateState"/>
            is any other value than <see cref="F:Awesomium.Core.WebCoreUpdateState.NotUpdating"/>. Therefore it is
            now only provided for simplicity and its value is equal to:
            <code lang="C#">
            bool isRunning = WebCore.UpdateState != WebCoreUpdateState.NotUpdating;
            </code>
            <code lang="VB">
            Dim isRunning As Boolean = WebCore.UpdateState &lt;&gt; WebCoreUpdateState.NotUpdating
            </code>
            </remarks>
            <seealso cref="P:Awesomium.Core.WebCore.IsInitialized"/>
            <seealso cref="M:Awesomium.Core.WebCore.Run"/>
            <seealso cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.IsShuttingDown">
            <summary>
            Gets if the <see cref="T:Awesomium.Core.WebCore"/> is currently shutting down.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.UpdateState">
            <summary>
            Gets the current auto-updating state of the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
            <remarks>
            Can be any of the following:
            <p/>
            
            <list type="table">
            <listheader>
            <term>State</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.NotUpdating"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is currently not updating. Either because it has not
            been started yet, or it has been shut down.
            
            <p/>
            <!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.WebCoreUpdateState.NotUpdating&quot;]/remarks/node()"/>
            </description>
            </item>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.InAutoUpdate"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is auto-updating using an internal background loop and an
            available <see cref="T:System.Threading.SynchronizationContext"/>.
            
            <p/>
            
            This state indicates that Awesomium is running in a UI context, where a message loop exists 
            on the thread and a valid <see cref="T:System.Threading.SynchronizationContext"/> is provided by the runtime.
            <p/>
            This state is usually temporary and the <see cref="T:Awesomium.Core.WebCore"/> is switched to
            <see cref="F:Awesomium.Core.WebCoreUpdateState.InTechnologyContext"/> when a technology-specific <c>WebControl</c>
            is created. However, if an application only creates <see cref="T:Awesomium.Core.WebView"/> components
            though it is a UI application, the <see cref="T:Awesomium.Core.WebCore"/> will remain at this state.
            
            </description>
            </item>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.InTechnologyContext"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is running in a .NET/Mono UI technology's context and is using 
            a technology-specific timer or synchronization model for updating.
            
            <p/>
            
            .NET UI technologies such as WPF and Windows Forms, provide their own <see cref="T:System.Threading.SynchronizationContext"/>,
            synchronization model and timers. Also, when used with Mono, certain technologies do not provide a standard
            .NET <see cref="T:System.Threading.SynchronizationContext"/> (such as Unity, Cocoa or Gtk), but they provide their own 
            synchronization model and timers.
            <p/>
            Whenever possible, Awesomium takes advantage of such available models and uses them for updating 
            the <see cref="T:Awesomium.Core.WebCore"/>, improving performance. For example, in WPF a special 
            <see cref="T:System.Windows.Threading.DispatcherTimer"/> is used for updating the <see cref="T:Awesomium.Core.WebCore"/>
            in intervals specified at initialization (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or through
            <see cref="P:Awesomium.Core.WebCore.AutoUpdatePeriod"/>.
            
            </description>
            </item>
            <item>
            <term><see cref="F:Awesomium.Core.WebCoreUpdateState.InSelfContext"/></term>
            <description>
            
            The <see cref="T:Awesomium.Core.WebCore"/> is running on a background (non-UI) thread and is
            executing its own update loop.
            
            <p/>
            
            This state is used when Awesomium has been started from a non-UI, dedicated thread
            that has no message loop, using <see cref="M:Awesomium.Core.WebCore.Run"/>.
            <p/>
            In this state, the <see cref="T:Awesomium.Core.WebCore"/> creates and installs an Awesomium-specific synchronization
            context and starts its own updating loop that updates the core in intervals specified at initialization
            (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or through <see cref="P:Awesomium.Core.WebCore.AutoUpdatePeriod"/>.
            <p/>
            When in this state, the users can execute code against the Awesomium API, using any of the methods
            described in the <b>Interacting with Awesomium Cross-Thread</b> section in the documentation
            of: <see cref="M:Awesomium.Core.WebCore.Run"/>.
            
            </description>
            </item>
            </list>
            
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebCore.AutoUpdatePeriod">
            <summary>
            Gets or sets the time interval between invocations of <see cref="M:Awesomium.Core.WebCore.Update"/>, in milliseconds.
            The default is 20.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been initialized, or has been shut down.
            (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebCore.HomeURL">
            <summary>
            Gets or sets the Home URL used with <see cref="M:Awesomium.Core.IWebView.GoToHome"/>.
            </summary>
            <remarks>
            This setting is used with <see cref="M:Awesomium.Core.IWebView.GoToHome"/>.
            It is also used by <see cref="T:Awesomium.Windows.Controls.WebControl"/>s to automatically
            handle the <see cref="P:System.Windows.Input.NavigationCommands.BrowseHome"/> command.
            The default is: "about:blank".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            A null reference or an empty string defined.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been initialized, or has been shut down.
            (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
            <seealso cref="M:Awesomium.Core.IWebView.GoToHome"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.Views">
            <summary>
            Gets a read-only collection of views maintained by this <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.Sessions">
            <summary>
            Gets a read-only collection of sessions maintained by this <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.Version">
            <summary>
            Gets the version for this build of Awesomium.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attempted to access this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been
            initialized yet. (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebCore.ResourceInterceptor">
            <summary>
            Gets or sets an <see cref="T:Awesomium.Core.IResourceInterceptor"/> implementation that is used to
            intercept resource requests for all the views maintained by this <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attempted to set this on a <see cref="T:Awesomium.Core.WebCore"/> that has not been initialized, 
            or has been shut down. (see: <see cref="P:Awesomium.Core.WebCore.IsInitialized"/>)
            </exception>
            <seealso cref="T:Awesomium.Core.IResourceInterceptor"/>
            <seealso cref="M:Awesomium.Core.IResourceInterceptor.OnRequest(Awesomium.Core.ResourceRequest)"/>
        </member>
        <member name="P:Awesomium.Core.WebCore.Downloads">
            <summary>
            Gets a list of <see cref="T:Awesomium.Core.DownloadItem"/> instances representing
            current and previous download operations, triggered by all views.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebCore.UsedMemory">
            <summary>
            Get the number of bytes actually used by our allocator (TCMalloc).
            </summary>
            <remarks>
            <note type="note">
            Only implemented on MS Windows.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebCore.AllocatedMemory">
            <summary>
            Get the number of bytes cached by our allocator (TCMalloc).
            </summary>
            <remarks>
            <note type="note">
            Only implemented on MS Windows.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebCore.SyncRoot">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="M:Awesomium.Core.ChildWebView.MarshalToWrapper(Awesomium.Core.IWebViewListener)">
            <summary>
            Performs necessary internal operations when a child view is being wrapped.
            </summary>
            <param name="listener">
            The final wrapper.
            </param>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.OnUpdate(System.Object,Awesomium.Core.IMEUpdateEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebViewIMEComposition.Updated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.OnRangeChanged(System.Object,Awesomium.Core.IMERangeChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebViewIMEComposition.RangeChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.OnCancel(System.Object,System.EventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebViewIMEComposition.Cancel"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.ActivateIME(System.Boolean)">
            <summary>
            Lets the <see cref="T:Awesomium.Core.IWebView"/> know you will be passing
            text input via IME and will need to be notified of any
            IME-related events (caret position, user unfocusing textbox, etc.)
            </summary><param name="activate">
            Specifies if IME should be activated.
            </param>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the current IME text composition.
            </summary><param name="inputString">The string generated by your IME.</param><param name="cursorPos">The current cursor position in your IME composition.</param><param name="targetStart">The position of the beginning of the selection.</param><param name="targetEnd">The position of the end of the selection.</param>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.ConfirmIMEComposition(System.String)">
            <summary>
            Confirms a current IME text composition.
            </summary><param name="inputString">The string generated by your IME.</param>
        </member>
        <member name="M:Awesomium.Core.WebViewIMEComposition.CancelIMEComposition">
            <summary>
            Cancels a current IME text composition.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebViewIMEComposition.Updated">
            <summary>
            Occurs whenever the user does something that may change
            the position, visibility, or type of the IME Widget. This event is only
            active when IME is active (see <see cref="M:Awesomium.Core.IWebViewIMEComposition.ActivateIME(System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebViewIMEComposition.RangeChanged">
            <summary>
            Occurs when the page changes the displayed range
            of the IME composition.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebViewIMEComposition.Cancel">
            <summary>
            Occurs when the page cancels the IME composition.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebViewIMEComposition.Range">
            <summary>
            Gets the displayed range of the IME composition.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebView">
            <summary>
            The <see cref="T:Awesomium.Core.WebView"/> is similar to a tab in a browser: you can load web-pages into it, 
            interact with it, and display it however you want.
            </summary>
            <remarks>
            By default, a <see cref="T:Awesomium.Core.WebView"/> is <i>windowless</i>. It is your responsibility
            to render it on a UI or bitmap by either using any of the provided <see cref="T:Awesomium.Core.ISurface"/>
            implementations, or creating your own (also see: <see cref="T:Awesomium.Core.Surface"/>).
            <p/>
            You can create a <see cref="T:Awesomium.Core.WebView"/> using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. If you have not initialized
            the <see cref="T:Awesomium.Core.WebCore"/> (see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) before creating a <see cref="T:Awesomium.Core.WebView"/>,
            the core will be initialized using default configuration settings and automatically be started
            before creating the view.
            <note>
            Unless otherwise specified, all methods are asynchronous. Each <see cref="T:Awesomium.Core.WebView"/> is rendered 
            in its own child-process and most API calls are proxied through IPC messages.
            </note>
            <note type="caution">
            Note that <b>Awesomium</b> and <b>Awesomium.NET</b> are not thread-safe. All API members should be called 
            from the thread that initialized the <see cref="T:Awesomium.Core.WebCore"/> (see <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) or created
            the first <see cref="T:Awesomium.Core.WebView"/>, <see cref="T:Awesomium.Core.WebSession"/> or technology specific <c>WebControl</c> if
            <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/> is not explicitly called. For UI applications (such as those using
            a technology specific <c>WebControl</c>) this is usually the UI thread.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Awesomium.Core.WebView.VerifyValid">
            <summary>
            Verifies the view is live. Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.VerifyValidParent">
            <summary>
            Verifies a windowed IWebView has specified a valid parent window.
            Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.AddSettingHandler(System.String,System.Action)">
            <summary>
            Adds an action to be performed at <see cref="M:Awesomium.Core.WebView.ApplyDesignTimeSettings"/>.
            </summary>
            <param name="property">The property the action is supposed to set.</param>
            <param name="handler">Delegate of the action.</param>
        </member>
        <member name="M:Awesomium.Core.WebView.ApplyDesignTimeSettings">
            <summary>
            Should be called by <see cref="T:Awesomium.Core.IWebView"/> components,
            right after the underlying view has been created.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.InitializeStandard">
            <summary>
            Standard initialization of views.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.ClearStandard">
            <summary>
            Performs standard actions when a view closes. 
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.LoginRespond(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Login response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.CertificateErrorRespond(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            CertificateError response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.ChooseFilesRespond(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Select local files helper.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            Specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <remarks>
            Several <see cref="T:Awesomium.Core.IWebView"/> features can be accessed through services. This
            is because the availability of these features depends on the current state or
            the type (see <see cref="T:Awesomium.Core.WebViewType"/>) of the <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            Here is a list of services currently available:
            <list type="table">
            <listheader>
            <term>Service Type</term>
            <description>Availability</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Core.IWebViewIMEComposition"/></term>
            <description>
            Only available when <see cref="P:Awesomium.Core.IWebView.ViewType"/> is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary><param name="html">
            The HTML string (ASCII) to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary><param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Stop">
            <summary>
            Stops the current navigation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary><param name="ignoreCache">
            Indicates if cached resources should be ignored when reloading.
            When this is <c>true</c>, all resources will be reloaded from the server.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary><returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary><returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebView.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary><returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns><seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/><seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Core.WebView.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><param name="name">
            The name of the object as it will appear in JavaScript.
            </param><returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns><remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="O:Awesomium.Core.JSObject.Bind"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note>
            You can create global Javascript objects on a view, as soon as it goes <i>live</i>. (<see cref="P:Awesomium.Core.IWebView.IsLive"/> is
            <c>true</c>). On technology specific <c>WebControls</c>, you should wait for the <see cref="E:Awesomium.Core.IWebView.NativeViewInitialized"/>
            event. <see cref="T:Awesomium.Core.WebView"/> components go live immediately after creation.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>.
            </exception><exception cref="T:System.ArgumentException">
            The specified <paramref name="name"/> is reserved. It either represents an HTML DOM object, 
            or an object variable already available in the page. Use <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/> 
            after <see cref="E:Awesomium.Core.IWebView.DocumentReady"/>, to obtain this object.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous <a href="http://wiki.awesomium.net/javascript/jec.html">Javascript Execution Context</a>
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">The x-coordinate.</param><param name="y">The y-coordinate.</param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.SaveImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to download an image at the specified coordinates in the page.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">
            An x-coordinate within an image in the page.
            </param><param name="y">
            A y-coordinate within an image in the page.
            </param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            <p/>
            This method will attempt to download the image at the specified coordinates,
            directly from the server. In technology-specific WebControls, a <b><i>Save As</i></b>
            dialog will be shown in response to the download request.
            <p/>
            If you are using the <i>headless</i> <see cref="T:Awesomium.Core.WebView"/> component, you will have to 
            handle <see cref="E:Awesomium.Core.WebCore.Download"/> to either display a dialog or silently save
            the resource. More appropriately in this case, you should assign your implementation
            of <see cref="T:Awesomium.Core.IWebViewPresenter"/> to <see cref="P:Awesomium.Core.WebView.Presenter"/>, to handle 
            UI related events including <see cref="M:Awesomium.Core.IWebViewPresenter.ShowDownloadDialog(Awesomium.Core.DownloadEventArgs)"/>.
            </remarks><returns>
            <c>true</c> if a download operation for an image at the specified coordinates,
            was successfully triggered; <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.WebCore.Download"/><seealso cref="M:Awesomium.Core.IWebViewPresenter.ShowDownloadDialog(Awesomium.Core.DownloadEventArgs)"/><seealso cref="M:Awesomium.Core.IWebView.CopyImageAt(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Awesomium.Core.WebView.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary><param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param><param name="config">
            The configuration settings to use.
            </param><returns>
            Returns a unique request identifier that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.IO.DirectoryNotFoundException">
            The specified output directory <paramref name="outputDirectory"/>, does not exist.
            </exception><exception cref="T:System.ArgumentException">
            <paramref name="outputDirectory"/> is a zero-length string, contains only white space, or contains one
            or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. -OR- 
            The system could not retrieve the absolute path.
            </exception><exception cref="T:System.Security.SecurityException">
            The caller does not have the required permissions.
            </exception><exception cref="T:System.ArgumentNullException">
            <paramref name="outputDirectory"/> is <c>null</c> (<c>Nothing</c> in Visual Basic).
            </exception><exception cref="T:System.NotSupportedException">
            <paramref name="outputDirectory"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\").
            </exception><exception cref="T:System.IO.PathTooLongException">
            The acquired full path to the specified <paramref name="outputDirectory"/>, exceeds the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters.
            </exception><seealso cref="T:Awesomium.Core.PrintConfig"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
        </member>
        <member name="M:Awesomium.Core.WebView.ZoomIn">
            <summary>
            Zooms into the page by <c>20%</c>.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Core.WebView.ZoomOut">
            <summary>
            Zooms out the page by <c>20%</c>.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Core.WebView.ResetZoom">
            <summary>
            Resets the zoom level for the currently loaded host.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/>
        </member>
        <member name="M:Awesomium.Core.WebView.RequestPageInfo">
            <summary>
            Issues a request for the currently loaded page's security
            info. Information will be retrieved through the 
            <see cref="E:Awesomium.Core.IWebView.ShowPageInfo"/> event.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            The operation is not supported on a Developer Tools Inspector view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.ReduceMemoryUsage">
            <summary>
            Forces V8 to release as much memory as possible (collects garbage, dumps
            cached structures, etc) and also clears WebKit cache. This helps to
            reduce memory accumulated within the process associated with this view.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="P:Awesomium.Core.WebConfig.ReduceMemoryUsageOnNavigation"/>
        </member>
        <member name="M:Awesomium.Core.WebView.CreateJavascriptExecutionContext``1(Awesomium.Core.JavascriptExecutionContextMethod{``0},``0)">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext{T}&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Core.WebView.CreateJavascriptExecutionContext(Awesomium.Core.JavascriptExecutionContextMethod)">
            <!-- No matching elements were found for the following include tag --><include file="../Awesomium.Core/Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;M:Awesomium.Core.IWebView.CreateJavascriptExecutionContext&quot;]/*"/>
        </member>
        <member name="M:Awesomium.Core.WebView.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Asynchronously executes the delegate on the thread that created this <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            </summary>
            <param name="method">
            A delegate to a method to call in the context of Awesomium's thread, that takes 
            parameters of the same number and type that are contained in the <paramref name="args"/>
            parameter.
            </param>
            <param name="args">
            An array of objects to pass as arguments to the specified <paramref name="method"/>. 
            This parameter can be <c>null</c> (<c>Nothing</c> in Visual Basic) if the method 
            takes no arguments.
            </param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation
            started by calling this method.
            </returns>
            <remarks>
            The <paramref name="method"/> delegate is executed on Awesomium's thread during
            the next <see cref="T:Awesomium.Core.WebCore"/> update pass. The delegate is called asynchronously,
            and this method returns immediately. <b>You can call this method from any thread</b>.
            <p/>
            If you need the return value from a process started with this method, call <see cref="M:Awesomium.Core.WebView.EndInvoke(System.IAsyncResult)"/>.
            If you need to call the delegate synchronously, use the <see cref="M:Awesomium.Core.WebView.Invoke(System.Delegate,System.Object[])"/> method instead.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebView.EndInvoke(System.IAsyncResult)">
            <summary>
            Waits until the process started by calling <see cref="M:Awesomium.Core.WebView.BeginInvoke(System.Delegate,System.Object[])"/> completes, 
            and then returns the value generated by the process.
            </summary>
            <param name="result">
            An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous 
            operation started by calling <see cref="M:Awesomium.Core.WebView.BeginInvoke(System.Delegate,System.Object[])"/>
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the return value generated by the 
            asynchronous operation.
            </returns>
            <remarks>
            This method gets the return value of the asynchronous operation represented by the
            <see cref="T:System.IAsyncResult"/> returned from a previous call to <see cref="M:Awesomium.Core.WebView.BeginInvoke(System.Delegate,System.Object[])"/>.
            If the asynchronous operation has not completed, this method will wait until the 
            result is available.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebView.Invoke(System.Delegate,System.Object[])">
            <summary>
            Synchronously executes the specified delegate on the thread that owns this
            <see cref="T:Awesomium.Core.IWebView"/> instance, with the specified list of arguments.
            </summary>
            <param name="method">
            A delegate to a method to call in the context of Awesomium's thread, that takes 
            parameters of the same number and type that are contained in the <paramref name="args"/>
            parameter.
            </param>
            <param name="args">
            An array of objects to pass as arguments to the specified <paramref name="method"/>. 
            This parameter can be <c>null</c> (<c>Nothing</c> in Visual Basic) if the method 
            takes no arguments.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the return value from the delegate being invoked, 
            or <c>null</c> (<c>Nothing</c> in Visual Basic) if the delegate has no return value.
            </returns>
            <remarks>
            Unlike <see cref="M:Awesomium.Core.WebView.BeginInvoke(System.Delegate,System.Object[])"/>, this method operates synchronously, that is,
            it waits until the process completes before returning. Exceptions raised during 
            the call are propagated back to the caller.
            <p/>
            Use this method when you want to access <see cref="T:Awesomium.Core.IWebView"/> members from a different 
            thread than the thread that created the view, to marshal the call to Awesomium's thread.
            </remarks>
        </member>
        <member name="M:Awesomium.Core.WebView.#ctor(System.IntPtr)">
            <summary>
            Create a <see cref="T:Awesomium.Core.WebView"/> instance that is wrapping an internally 
            created web-view instance.
            </summary>
            <param name="handle">
            The handle to an internally created web-view.
            </param>
            <remarks>
            This constructor can be used to create a wrapper for a web-view that has been internally created by Awesomium.
            Views are created internally by Awesomium for external links that should be opened in a new view, or popup windows
            (eg, Javascript: <c>window.open</c> and <see cref="E:Awesomium.Core.WebView.ShowCreatedWebView"/>).
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to wrap a web-view instance that has already been wrapped. You can access the wrapper
            through: <see cref="P:Awesomium.Core.WebCore.Views"/> and <see cref="M:Awesomium.Core.WebViewCollection.GetByHandle(System.IntPtr)"/>.
            </exception>
            <seealso cref="E:Awesomium.Core.WebView.ShowCreatedWebView"/>
        </member>
        <member name="M:Awesomium.Core.WebView.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebView.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the view to certain pixel dimensions.
            </summary><param name="width">
            The new width in pixels.
            </param><param name="height">
            The new height in pixels.
            </param><remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="P:Awesomium.Core.IWebView.Width"/><seealso cref="P:Awesomium.Core.IWebView.Height"/><seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="M:Awesomium.Core.WebView.FocusView">
            <summary>
            Gives the view the appearance of input focus.
            </summary><remarks>
            You should call this whenever the view gains focus.
            <note>
            If you fail to see a blinking caret when you select a text-box,
            it's usually because you forgot to call this method.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.WebView.UnfocusView">
            <summary>
            Remove the appearance of input focus. 
            </summary><remarks>
            You should call this whenever the view loses focus.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-move event to the view.
            </summary><param name="x">
            The x-coordinate of the current mouse position.
            </param><param name="y">
            The y-coordinate of the current mouse position.
            </param><remarks>
            Coordinates should be localized to the view 
            and should be defined in pixels.
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-down event to the view, using the last mouse-move coordinates.
            </summary><param name="button">
            Specifies the button that was pressed.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Passes a mouse-up event to the view, using the last mouse-move coordinates.
            </summary><param name="button">
            Specifies the button that was pressed.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Passes a mouse-wheel event to the view.
            </summary><param name="scrollVert">
            The amount of pixels to scroll vertically by.
            </param><param name="scrollHorz">
            The amount of pixels to scroll horizontally by.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Passes a keyboard event to the view.
            </summary><param name="keyEvent">
            An <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance representing the keyboard event to pass.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.InjectTouchEvent(Awesomium.Core.WebTouchEvent)">
            <summary>
            Passes a multi-touch event to the view.
            </summary><param name="touchEvent">
            A <see cref="T:Awesomium.Core.WebTouchEvent"/> instance representing the multi-touch event to pass.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebView.OnCreateSurface(Awesomium.Core.CreateSurfaceEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.CreateSurface"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnSelectionChanged(Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnSelectionComplete(Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.SelectionComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnProcessCreated(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ProcessCreated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnInitializeView(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.InitializeView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnNativeViewInitialized(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.NativeViewInitialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnWindowClose(Awesomium.Core.WindowCloseEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.WindowClose"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowJavascriptDialog(Awesomium.Core.JavascriptDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowJavascriptDialog"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnPrinting(Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.Printing"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnJavascriptRequest(Awesomium.Core.JavascriptRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.JavascriptRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnJavascriptMessage(Awesomium.Core.JavascriptMessageEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.JavascriptMessage"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnTitleChanged(Awesomium.Core.TitleChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.TitleChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnAddressChanged(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.AddressChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnToolTipChanged(Awesomium.Core.ToolTipChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnTargetURLChanged(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.TargetURLChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnCursorChanged(Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnFocusChanged(Awesomium.Core.FocusChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.FocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnConsoleMessage(Awesomium.Core.ConsoleMessageEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ConsoleMessage"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowCreatedWebView(Awesomium.Core.ShowCreatedWebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnDocumentReady(Awesomium.Core.DocumentReadyEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.DocumentReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoadingFrame(Awesomium.Core.LoadingFrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoadingFrame"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoadingFrameFailed(Awesomium.Core.LoadingFrameFailedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoadingFrameFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoadingFrameComplete(Awesomium.Core.FrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoadingFrameComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnSelectLocalFiles(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnLoginRequest(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnCertificateError(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.CertificateError"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnPrintRequest(Awesomium.Core.PrintRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.PrintRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnPrintFailed(Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.PrintFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnPrintComplete(Awesomium.Core.PrintCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.PrintComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowPopupMenu(Awesomium.Core.PopupMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowPopupMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowContextMenu(Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnShowPageInfo(Awesomium.Core.PageInfoEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ShowPageInfo"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnResponsiveChanged(Awesomium.Core.ResponsiveChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebView.OnCrashed(Awesomium.Core.CrashedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Core.WebView.Crashed"/> event.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> associated with the <see cref="T:System.ComponentModel.IComponent"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsProcessCreated">
            <summary>
            Indicates if the child rendering process for this view, has been spawned.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Core.WebView.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary><remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.IWebView.NavigationInfo"/>.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/><seealso cref="P:Awesomium.Core.IWebView.HasTitle"/>
        </member>
        <member name="P:Awesomium.Core.WebView.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Title"/><seealso cref="E:Awesomium.Core.IWebView.TitleChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.IsLoading">
            <summary>
            Gets if any page resources are currently being loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsNavigating">
            <summary>
            Gets if the view is currently navigating to a Url.
            </summary><remarks>
            Unlike <see cref="P:Awesomium.Core.IWebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsDocumentReady">
            <summary>
            Gets if the DOM (Document Object Model) for the page being loaded, is ready.
            </summary><remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsResponsive">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, is currently responsive.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.HasTargetURL">
            <summary>
            Gets if the view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.TargetURLChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary><seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.FocusedElementType">
            <summary>
            Gets the type of the element currently focused in the loaded page.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.ToolTipText">
            <summary>
            Gets the tool-tip text currently indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ToolTipChanged"/>
        </member>
        <member name="P:Awesomium.Core.WebView.ParentView">
            <summary>
            Gets the parent view (if any) of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            A <see cref="T:Awesomium.Core.IWebView"/> can only have a parent if it is a popup view that
            was created by Awesomium in response to a Javascript <c>window.open</c>.
            <p/>
            For more details, see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            Be careful when you access members of the parent <see cref="T:Awesomium.Core.IWebView"/> instance.
            The parent may have been destroyed while the this (child) view, is still alive.
            Always check <see cref="P:Awesomium.Core.IWebView.IsLive"/> before accessing members on the parent view,
            to avoid exceptions.
            </note>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Core.WebView.LatestContextData">
            <summary>
            Gets the latest web-view context data, usually updated by a right-click in page.
            </summary><returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web-view context data.
            </returns><seealso cref="T:Awesomium.Core.WebContextMenuInfo"/><seealso cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Core.WebView.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Core.WebView.ProcessId">
            <summary>
            Gets the identifier for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no rendering process currently associated (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            <note>
            This is not a unique identifier for the <see cref="T:Awesomium.Core.IWebView"/> instance.
            A child, rendering process can host more than one views
            (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            </note>
            <note>
            This does not correspond to the system-wide id of the associated
            <see cref="P:Awesomium.Core.IWebView.RenderProcess"/> (PID). It's an Awesomium-specific identifier.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.Identifier">
            <summary>
            Gets a unique global identifier for this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            When this <see cref="T:Awesomium.Core.IWebView"/> instance is <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>),
            this identifier is guaranteed to be unique among all <see cref="T:Awesomium.Core.IWebView"/>
            instances maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            <note>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no rendering process currently associated (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.ProcessHandle">
            <summary>
            Gets the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.RenderProcess">
            <summary>
            Gets the rendering process associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This represents the executing <i><c>awesomium_process</c></i> or the one specified through 
            <see cref="P:Awesomium.Core.WebConfig.ChildProcessPath"/> at <see cref="T:Awesomium.Core.WebCore"/> initialization.
            </summary><remarks>
            This may not be initialized until some time after the view is actually created 
            (when we receive the first IPC message from the child-process). It may also return
            <c>null</c> (<c>Nothing</c> in Visual Basic), is there is no rendering process
            associated yet (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>) or the process has crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <p/>
            The associated <see cref="P:Awesomium.Core.IWebView.RenderProcess"/> will be terminated when this <see cref="T:Awesomium.Core.IWebView"/>
            instance is disposed and destroyed.
            <p/>
            The default priority of the <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>, is <see cref="F:System.Diagnostics.ProcessPriorityClass.Normal"/>.
            This may be automatically lowered to <see cref="F:System.Diagnostics.ProcessPriorityClass.BelowNormal"/> when
            <see cref="P:Awesomium.Core.IWebView.IsRendering"/> is <c>false</c>.
            <note>
            In a technology-specific <c>WebControl</c>, <see cref="P:Awesomium.Core.IWebView.IsRendering"/> and the priority of
            the <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>, are associated to the control's <i>enabled</i> status.
            </note>
            <note type="caution">
            Actions that may corrupt the execution state of the rendering process, will directly affect
            view's web content rendering. Manually killing this process, will mark the view as crashed 
            (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            </note>
            </remarks><seealso cref="P:Awesomium.Core.IWebView.ProcessHandle"/><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Core.WebView.IsJavascriptEnabled">
            <summary>
            Gets is Javascript is enabled on this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            Javascript status is defined by setting the <see cref="P:Awesomium.Core.WebPreferences.Javascript"/> property when
            defining the preferences of the <see cref="T:Awesomium.Core.WebSession"/> this view will be member of.
            <p/>
            Javascript is enabled by default when using the default <see cref="T:Awesomium.Core.WebSession"/>,
            or if no preferences or the default preferences have been specified to a custom <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            Several features depend on Javascript. The following lists, present <b>features that are not available when Javascript is disabled</b>:
            <h4>Methods</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            Attempting to call any of these methods when Javascript is disabled, will throw a <see cref="T:System.InvalidOperationException"/>.
            </note>
            <h4>Events</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.WindowClose"/>
            </description>
            </item>
            </list>
            <note>
            These events will not be fired when Javascript is disabled.
            </note>
            <h4>Properties</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.HasSelection"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Selection"/> will always return <see cref="F:Awesomium.Core.Selection.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.SynchronousMessageTimeout"/> is ignored.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> will always return <see cref="F:Awesomium.Core.JSWindowOpenSpecs.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will always return <c>false</c>.
            </description>
            </item>
            </list>
            </remarks><seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/><seealso cref="P:Awesomium.Core.WebPreferences.Javascript"/>
        </member>
        <member name="P:Awesomium.Core.WebView.IsPrinting">
            <summary>
            Gets if a printing operation is currently in progress.
            </summary><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="P:Awesomium.Core.WebView.CurrentCertificateError">
            <summary>
            Gets the SSL certificate error (if any) reported for the
            page currently loaded. The default is <see cref="F:Awesomium.Core.CertError.None"/>.
            </summary><seealso cref="P:Awesomium.Core.IWebView.HasCertificateError"/><seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Core.WebView.HasCertificateError">
            <summary>
            Gets if the page currently loaded has an SSL
            certificate error.
            </summary><seealso cref="P:Awesomium.Core.IWebView.CurrentCertificateError"/><seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Core.WebView.HTML">
            <summary>
            Gets the HTML code of the currently loaded document.
            </summary><remarks>
            This property is updated after the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event is fired.
            <note type="caution">
            This property returns <c>null</c> (<c>Nothing</c> in Visual Basic), if JavaScript
            is disabled in this view (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </note>
            </remarks><seealso cref="P:Awesomium.Core.IWebView.Source"/><seealso cref="M:Awesomium.Core.IWebView.LoadHTML(System.String)"/><seealso cref="E:Awesomium.Core.IWebView.DocumentReady"/><seealso cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>
        </member>
        <member name="P:Awesomium.Core.WebView.CreationTime">
            <summary>
            Indicates the date and time this <see cref="T:Awesomium.Core.IWebView"/> instance was created.
            If the view has not been successfully initialized, this is <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance currently
            assigned to the view.
            </summary><remarks>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should use this property to assign it to the view.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="P:Awesomium.Core.WebView.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with <c>style="background-color: transparent;"</c>)
            </summary><remarks>
            When set to <c>true</c>, the alpha channel is premultiplied. When set to <c>false</c>
            (default), the view will have an opaque, white background.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.Source">
            <summary>
            Gets or sets the URL currently presented by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><returns>
            An absolute <see cref="T:System.Uri"/> representing the URL currently loaded 
            by this <see cref="T:Awesomium.Core.IWebView"/> instance, or <c>null</c> (<c>Nothing</c>
            in Visual Basic) if not set or updated.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebView.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary><returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.IWebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns><remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.SynchronousMessageTimeout">
            <summary>
            Gets or sets the maximum amount of time (in milliseconds) to wait for a response
            from a synchronous IPC message dispatched to the view's renderer process.
            Default is <c>800</c> (ms). Set this to <c>0</c> to use no timeout.
            </summary><remarks>
            You should increase this if you find that a lot of your synchronous
            method calls keep getting <see cref="F:Awesomium.Core.Error.TimedOut"/> (see <see cref="M:Awesomium.Core.IWebView.GetLastError"/>.
            (Your machine just may be slow at handling IPC calls).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.Zoom">
            <summary>
            Gets or sets the Zoom percentage for the host currently loaded.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname. The value of this property is automatically updated
            when the host currently loaded, changes (see: <see cref="E:Awesomium.Core.IWebView.AddressChanged"/> and <see cref="P:Awesomium.Core.IWebView.Source"/>).
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you set this property.
            </note>
            </remarks><exception cref="T:System.ArgumentOutOfRangeException">
            The minimum accepted value, is <c>1</c>.
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="P:Awesomium.Core.WebView.IsCrashed">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.WebSession">
            <summary>
            Gets the session associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            You can create a <see cref="P:Awesomium.Core.IWebView.WebSession"/> with your own preferences (see <see cref="P:Awesomium.Core.WebSession.Preferences"/>),
            using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>. You can then use this when you create a <see cref="T:Awesomium.Core.WebView"/> instance, 
            by using the <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>
            function.
            <note>
            This property is implemented as a read-write property on technology specific <c>WebControls</c>.
            You can use the setter to specify your <see cref="T:Awesomium.Core.WebSession"/>, right after instantiating
            the <c>WebControl</c> or at design time. You cannot change this setting after the control
            has been fully loaded and its underlying web-view, has been created.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsSourceView">
            <summary>
            Gets if this is a source view that displays the source of
            loaded pages.
            </summary><remarks>
            The following table presents how to create managed web-view components
            that display the source code of loaded pages:
            <list type="table">
            <listheader>
            <term>
            Component
            </term>
            <description>
            Method
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            Use <see cref="M:Awesomium.Core.WebCore.CreateSourceWebView(System.Int32,System.Int32)"/>.
            </description>
            </item>
            <item>
            <term>
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> (WPF)<br/>
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> (Windows Forms)<br/>
            <see cref="T:Awesomium.Windows.Unity.WebUIComponent"/> (Unity)
            </term>
            <description>
            The <see cref="P:Awesomium.Core.IWebView.IsSourceView"/> property is implemented as read-write
            property on these controls. You have to set the property before
            the control goes <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            <p/>
            Either:
            <list type="bullet">
            <item>
            <description>
            Set the property at design-time.
            </description>
            </item>
            </list>
            - OR -
            <list type="bullet">
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.InitializeView"/> event, the last fired
            before the control goes <i>live</i>, to set the property.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            <note>
            You cannot change this property on technology specific web-view controls,
            once they go <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.ParentWindow">
            <summary>
            Gets or sets the parent window for this <see cref="T:Awesomium.Core.IWebView"/> instance. This is only valid
            for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>),
            on the Windows platform.
            </summary><remarks>
            <note type="caution">
            When you use a <see cref="T:Awesomium.Core.WebView"/>, you should call this method immediately after calling 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. The window for this <see cref="T:Awesomium.Core.IWebView"/> instance
            will not be created until you set <see cref="P:Awesomium.Core.IWebView.ParentWindow"/>, on the Windows platform.
            </note>
            <note>
            Technology specific <c>WebControls</c>, take care of this internally. Once set and the underlying
            window for this <see cref="T:Awesomium.Core.IWebView"/> instance has been created, this property cannot be changed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebView.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary><remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            You should set this to <c>false</c> when your surface is not rendering
            the view's pixel buffer (e.g., when a technology specific <c>WebControl</c>
            is not visible) to save some CPU cycles.
            <note>
            Technology specific <c>WebControls</c> usually monitor the control's visibility
            or enabled status and update this property automatically. They may require
            additional steps before you are able to set this property manually. For more
            details, refer to the documentation of each <c>WebControl</c>.
            </note>
            <note>
            When this is <c>false</c>, the associated process's (see <see cref="P:Awesomium.Core.IWebView.RenderProcess"/>)
            priority, is also automatically lowered.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.ViewType">
            <summary>
            Gets the type of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            For details about the various types of a <see cref="T:Awesomium.Core.IWebView"/> instance,
            read the documentation of <see cref="T:Awesomium.Core.WebViewType"/> and its members,
            or the following article: http://wiki.awesomium.net/general-use/introduction-to-web-views.html
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.Presenter">
            <summary>
            Gets or sets an <see cref="T:Awesomium.Core.IWebView"/> presentation control that will receive
            requests for UI related events.
            </summary><remarks>
            Members of the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface are used by views to propagate
            UI related requests that they cannot handle by themselves. For example, the <i>windowless</i> 
            <see cref="T:Awesomium.Core.WebView"/> does not handle any UI related events itself. If an <see cref="T:Awesomium.Core.IWebViewPresenter"/>
            has been assigned to the <see cref="P:Awesomium.Core.IWebView.Presenter"/> property, those requests will be propagated to
            the presentation control, unless previously handled by a relative event handler.
            <note>
            When used with an <i>offscreen</i> <see cref="T:Awesomium.Core.WebView"/>, an instance of <see cref="T:Awesomium.Core.IWebViewPresenter"/> that also
            implements <see cref="T:Awesomium.Core.ISurface"/>, will be used as the view's default surface, as long as it has
            been assigned to <see cref="P:Awesomium.Core.WebView.Presenter"/> immediately after the creation of the <see cref="T:Awesomium.Core.WebView"/>.
            </note>
            <h4>Usage in WPF</h4>
            The <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface is extensively used in WPF. <see cref="T:Awesomium.Core.IWebView"/> 
            presentation controls are used in the visual tree when styling a WPF 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>. These can be custom WPF surfaces
            implementing <see cref="T:Awesomium.Core.ISurface"/> (for offscreen views) or any other control providing custom 
            presentation of a <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            When the custom control is added to the visual tree and loaded for presentation, 
            the <see cref="T:Awesomium.Core.IWebView"/> instance (typically, a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>)
            uses the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface to communicate with the 
            presentation control.
            <p/>
            <c>Awesomium.Windows.Controls</c> already provides 2 such presenters:
            <list type="table">
            <listheader>
            <term>Presentation Control</term>
            <description>Usage (by the default style)</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></term>
            <description>
            Used when <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to 
            <see cref="F:Awesomium.Core.WebViewType.Offscreen"/> (default). This is an <see cref="T:Awesomium.Core.ISurface"/> component that 
            uses 100% WPF logic to copy the view's pixel buffer to a bitmap that it then renders for presentation.
            </description>
            </item>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewHost"/></term>
            <description>
            This is an <see cref="T:System.Windows.Interop.HwndHost"/> that is used when 
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to <see cref="F:Awesomium.Core.WebViewType.Window"/>.
            For more details, read the documentation of <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.InvokeRequired">
            <summary>
            Gets a value indicating whether the caller must call an invoke method when making method calls to the view
            because the caller is on a different thread than the one the view was created on.
            </summary>
            <remarks>
            Awesomium is not thread-safe. This property determines whether you must call <see cref="M:Awesomium.Core.WebView.Invoke(System.Delegate,System.Object[])"/> or
            <see cref="M:Awesomium.Core.WebView.BeginInvoke(System.Delegate,System.Object[])"/> when making method calls to members of an <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is the case if Awesomium is running on a dedicated thread (see: <see cref="M:Awesomium.Core.WebCore.Run"/>), or
            if Awesomium is running on a UI thread and you are trying to access members of an <see cref="T:Awesomium.Core.IWebView"/> 
            instance for a different thread.
            <note>
            When using Awesomium with Mono in an operating system other than MS Windows, the provided
            <see cref="T:System.Threading.SynchronizationContext"/> may not be safe for cross-thread calls to Awesomium.
            <p/>
            Awesomium's implementation of <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>, does not rely on the current thread's
            <see cref="T:System.Threading.SynchronizationContext"/> and can be used to make cross-thread calls to Awesomium API,
            in any operating system and technology.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.IsLive">
            <summary>
            Gets if the native web-view, is alive.
            </summary><returns>
            A <see cref="T:System.Boolean"/> value indicating if the native web-view, 
            is alive. <c>False</c> indicates that the native web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <note>
            When crashed, technology specific <c>WebControls</c> will attempt 
            to recreate the underlying view.
            For details, see: <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (eg, using <see cref="M:Awesomium.Windows.Controls.WebControl.Dispose"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first view created) or of the native web-view.
            </description>
            </item>
            </list>
            </returns><remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members. Trying to access the native web-view when it is not alive, 
            can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of view members.
            <p/>
            <note>
            This property also returns <c>false</c> when technology specific <c>WebControls</c>
            are shown in a designer. The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the native web-view, 
            are only instantiated during runtime.
            </note>
            </remarks><example>
            <code lang="C#">
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Core.WebView.Width">
            <summary>
            Gets or sets the current width of the view.
            </summary><remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebView.Height">
            <summary>
            Gets or sets the current height of the view.
            </summary><remarks>
            Resizing the view will trigger the creation of a new
            surface, by calling <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary><remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.SelectionComplete">
            <summary>
            Occurs when selecting content in the current page, completes.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.InitializeView">
            <summary>
            Occurs when the underlying web-view of a <c>WebControl</c>is about to be instantiated and wrapped or, 
            for child views created in response to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, the native view assigned to 
            the <c>NativeView</c> property of a <c>WebControl</c>, is about to be wrapped.
            </summary><remarks>
            This is the last moment for setting any of the following properties, on a <c>WebControl</c>:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Properties
            </description>
            </listheader>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            These properties are implemented as read-write properties on <c>WebControls</c> and
            can only be set before the underlying web-view of a <c>WebControl</c> is created,
            or a previously created native view is wrapped (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            <p/>
            Right after this event is fired, the <c>WebControl</c> goes live (<see cref="P:Awesomium.Core.IWebView.IsLive"/>
            is set to <c>true</c>) and these properties can no longer be changed.
            <note type="caution">
            Attempting to set some of the above properties after a <c>WebControl</c> is live,
            is usually silently ignored but may also throw an exception. For details, refer to the
            documentation of the properties.
            </note>
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately at creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.NativeViewInitialized">
            <summary>
            Occurs when the native underlying web-view of a <c>WebControl</c>, has been initialized.
            </summary><remarks>
            This event occurs right after <see cref="P:Awesomium.Core.IWebView.IsLive"/> is set to <c>true</c> and 
            also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately after creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.WindowClose">
            <summary>
            Occurs when Javascript in the page calls <c>window.close</c>.
            </summary><remarks>
            You can ignore this event, or respond depending on the current context.
            For example, if the page is open in the main window of an application
            or a tab, browsers display a confirmation dialog asking the user if he
            wants to acknowledge the page's request.
            <p/>
            If the page is open in a popup window, browsers usually respect the
            request and close the popup window, without any confirmation from the user.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowJavascriptDialog">
            <summary>
            Occurs when a JavaScript call that requires the creation of a modal dialog, is called.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.Printing">
            <summary>
            Occurs when a printing operation has started.
            </summary><remarks>
            This event occurs:
            <list type="bullet">
            <item>
            <description>
            On any <see cref="T:Awesomium.Core.IWebView"/> instance, right after a call to <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>.
            </description>
            </item>
            <item>
            <description>
            On technology specific <c>WebControls</c>, right after a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> 
            event that has not been handled, or canceled (either programmatically or by canceling the 
            <i>Select Folder</i> dialog).
            </description>
            </item>
            </list>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Core.WebView.JavascriptRequest">
            <summary>
            Occurs when a JavaScript client sends a management request through
            <see cref="T:global.OSMJIF"/> (such as <see cref="M:global.OSMJIF.minimize(global.Multiple)"/>, 
            <see cref="M:global.OSMJIF.maximize(global.Multiple)"/> etc.).
            </summary><remarks>
            The request sent is identified by <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.Request"/>.
            <p/>
            A request token can be passed by JavaScript clients to the native application and
            it's received through <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs.RequestToken&quot;]/remarks/node()"/>
            <p/>
            <!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><!-- No matching elements were found for the following include tag --><include file="Awesomium.Core_S.XML" path="doc/members/member[@name=&quot;F:Awesomium.Core.JavascriptRequestEventArgs&quot;]/remarks/node()"/>
            <p/>
            Unless the request originates from a page that has been created by the application
            (such as pages provided though a <see cref="T:Awesomium.Core.Data.DataSource"/>), applications should be careful
            when handling management requests. For example, a <see cref="M:global.OSMJIF.exit(global.Multiple)"/>
            command asks from the native application to exit immediately. The <see cref="P:Awesomium.Core.JavascriptRequestEventArgs.RequestToken"/>
            is provided so that native applications can validate such requests.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.JavascriptMessage">
            <summary>
            Occurs when a JavaScript client sends a message through <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            or <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>.
            </summary><remarks>
            <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> and the asynchronous
            <see cref="M:global.OSMJIF.sendMessageAsync(global.String,global.Function,global.Any[])"/>, 
            can be used instead of creating and binding to custom methods of a global JavaScript object
            created with <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>.
            <p/>
            Unlike regular <b>synchronous</b> custom JavaScript methods created by the managed application
            through <see cref="O:Awesomium.Core.JSObject.Bind"/> or using the Dynamic Language Runtime (DLR),
            <b><see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/> allows callers to pass 
            JavaScript objects to the <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> array, even though the method 
            is called synchronously</b> (see <a href="http://wiki.awesomium.net/javascript/sync_async_js_api.html">Synchronous &amp; Asynchronous API</a>).
            <p/>
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/> are being serialized,
            any function members (methods) are stripped out and they are deserialized to the hosting
            application as local JSObjects. Nevertheless, the objects are still passed by reference.
            <b>Any changes applied to passed objects in the handler of a <see cref="E:Awesomium.Core.IWebView.JavascriptMessage"/>
            event, will be reflected back to the original remote instances when <see cref="M:global.OSMJIF.sendMessage(global.String,global.Any[])"/>
            returns</b>.
            <p/>
            <note type="note">
            Function members (methods) of objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>,
            are being stripped out when the object is passed to the hosting application (calling them from the hosting
            application would cause a deadlock). However this does not affect the original client-side instances.
            </note>
            <note type="caution">
            JavaScript objects passed to <see cref="P:Awesomium.Core.JavascriptMessageEventArgs.Arguments"/>, are serialized
            and deserialized using JSON. Objects whose structure includes a circular reference, cannot be passed.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.AddressChanged">
            <summary>
            Occurs when the page URL has changed, usually after navigation to a new
            URL has started.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Core.WebView.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed.
            </summary><remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            <note>
            When setting <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>
            to handle tooltips yourself, you should expect an empty string passed
            to <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> and in response to it,
            hide your tooltip (if any).
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary><remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Core.WebView.ConsoleMessage">
            <summary>
            Occurs when a message is added to the console on the page.
            This is usually the result of a JavaScript error being encountered
            on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link).
            </summary><remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance creates a new child view 
            (usually the result of <c>window.open</c>, clicking on a link with <c>target="_blank"</c> or submitting a <c>form</c>
            with <c>target="_blank"</c>). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <p/>
            <note>
            The <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event must always be handled in your application to wrap views created by
            Awesomium in response to users clicking a link or JavaScript <c>window.open</c> calls.
            <p/>
            If you don't handle this event, the unused web-view instance will be immediately destroyed.
            </note>
            There are a number of facts you need to take into consideration, before taking the appropriate actions in response 
            to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. The following list presents these facts and some general suggestions:
            <list type="bullet">
            <item>
            <description>
            The created child view, has the same type (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>) and is assigned to the same session
            (see <see cref="P:Awesomium.Core.IWebView.WebSession"/>) as its parent (opener) view. Therefore, you should not attempt to set these 
            properties if you are wrapping the new child view with a technology specific <c>WebControl</c>.
            </description>
            </item>
            <item>
            <description>
            In order to maintain the relationship with their parent view, child views execute and render under 
            the same process (<c>awesomium_process</c>) as their parent view. If for any reason the child process crashes,
            all views related to it will be affected.
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of a Javascript <c>window.open</c>,
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b> the created child view instance
            (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to maintain the parent-child window relationship (the child page can access
            the parent through the <c>window.opener</c> property; the parent can manipulate the child through the
            <c>window</c> object returned from the <c>window.open</c> call, which is why <c>window.open</c> was most
            probably used in the first place).
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of an HTML form with <c>target="_blank"</c> and
            <c>method="post"</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b>
            the created child view instance (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to allow <c>POST</c> data be properly passed.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>, it most possibly indicates that the event is the result of
            a user clicking on a link with <c>target="_blank"</c>. Since maintaining a parent-child relationship is not important
            in this scenario, <b>you should cancel the event</b> by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> (this tells the core 
            to destroy the unused web-view instance), then create a new <see cref="T:Awesomium.Core.WebView"/> (using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>)
            or <c>WebControl</c> and navigate to the provided <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any. This allows you to take advantage
            of the isolated process architecture of Awesomium and let each view be rendered in a separate process.
            <note type="caution">
            Failing to cancel the event when you are not wrapping the new child view instance, will keep the native instance alive until 
            the <see cref="T:Awesomium.Core.WebCore"/> is shut down. This can result in numerous unused views being spawned, but never actually used.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, 
            is already queued on the created child view. Therefore you should not attempt to set the <see cref="P:Awesomium.Core.IWebView.Source"/> when you 
            are wrapping the child view, as this would again break the parent-child relationship (<c>window.opener</c> on the child page and the 
            <c>window</c> object returned from the <c>window.open</c> call on the parent page, will be rendered invalid) or prevent passing
            <c>POST</c> data to the server respectively.
            <note>
            Also note that since navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, has already started by the moment the child
            view is wrapped, <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> will not be fired for the main frame of the new <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            </note>
            </description>
            </item>
            <item>
            <description>
            Navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, is blocked on the created child view, when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> and 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>. As applications will generally choose to cancel the event and create a new <see cref="T:Awesomium.Core.IWebView"/> 
            instance to navigate to the target URL (or even choose to navigate to the target URL on the same <see cref="T:Awesomium.Core.IWebView"/> instance that 
            fired the event), Awesomium.NET does this to prevent <i>false hits</i> to the target URL, that would have occurred by the time the 
            event handler returns and the unused child view instance, is destroyed. What's more, users may also implement 
            <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel requests to new views that are the result of JavaScript <c>window.open</c>
            (see <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>). Therefore, if your application chooses to wrap the created 
            child view even though it is most possibly the result of a user clicking on a link with <c>target="_blank"</c> or navigation
            to the target URL has already been canceled by an <see cref="T:Awesomium.Core.IResourceInterceptor"/> (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>), 
            you should in this scenario only, after wrapping the child view, set the <see cref="P:Awesomium.Core.IWebView.Source"/> property to 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> to resume navigation to the target URL.
            <note>
            Applications can occasionally choose to wrap a child view even when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>false</c> or 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>, if they want to apply a <i>single process</i> architecture where all new 
            views created will be rendered by the same <c>awesomium_process</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> returns a valid, initialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
            instance. This may be initialized to default values if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>false</c>, or reflect the <i>specs</i> 
            specified to the <c>window.open</c> call, if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>.
            </description>
            </item>
            <item>
            <description>
            If <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, applications should generally wrap and present the native view in a new popup application
            window. This window should have the size and location specified in <see cref="P:Awesomium.Core.JSWindowOpenSpecs.InitialPosition"/>, <b>if this is not
            empty</b>. They should also respect the rest of the specs available through <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, when creating
            the new application window that will host the child view.
            <note>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is always also <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> will only be <c>true</c>, if <i>specs</i> were specified to the <c>window.open</c> call. These can be
            standard specs such as <c>width=400,height=400,menubar=no</c>, only user defined, non-standard specs such as <c>background=black</c>
            or a combination of both. These specs are available through the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> property.
            </description>
            </item>
            <item>
            <description>
            If only user defined, non-standard <i>specs</i> were specified to the <c>window.open</c> call, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will
            be <c>true</c>. In this scenario, if your application does not recognize user defined, non-standard specs, it can ignore the 
            value of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> all together and wrap the new child view in a regular new application window, tab or control.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData"/> returns an array of <see cref="T:Awesomium.Core.UploadElement"/>,
            representing the <i>upload</i> data passed to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> using <c>POST</c>.
            </description>
            </item>
            <item>
            <description>
            Finally note that only an empty <i>name</i> parameter or a <c>_blank</c> target attribute specified as the <i>name</i> parameter 
            in a <c>window.open</c> call or in a link or <c>form</c>, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. Other target 
            attributes (such as <c>_top</c>), passed to either a <c>window.open</c> call, a link or a <c>form</c>, are handled by Awesomium internally.
            </description>
            </item>
            </list>
            <note type="caution">
            Several members of <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>, may not return valid values if Javascript is disabled.
            For details, read the documentation of: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>.
            </note>
            Given the facts and suggestions presented before, if your application is about to wrap the created child view, the following 
            table shows the methods available, to wrap the created child view using any of the <b>Awesomium.NET</b> web-view components:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Method and Notes
            </description>
            </listheader>
            <item>
            <term>
            Core
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Pass <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>
            to wrap the new view with a <see cref="T:Awesomium.Core.WebView"/>.
            </description>
            </item>
            <item>
            <description>
            For <i>windowed</i> views (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>), you should now assign a <see cref="P:Awesomium.Core.WebView.ParentWindow"/>.
            <i>Offscreen</i> views have a <see cref="T:Awesomium.Core.BitmapSurface"/> assigned by default but depending on your application's design,
            you may have to assign a new <see cref="T:Awesomium.Core.ISurface"/> by either monitoring the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event, 
            or setting the <see cref="P:Awesomium.Core.IWebView.Surface"/> property.
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Core.WebView"/> to match its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Controls.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Controls.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Controls.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by binding the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property
            in XAML (see examples in the <b>Awesomium.NET Samples</b> solution available with the SDK), or by monitoring the 
            <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Controls.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Forms.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Forms.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Forms.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by assigning the <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property
            right after the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is created (see examples in the <b>Awesomium.NET Samples</b> solution available 
            with the SDK),or by monitoring the <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Forms.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks><example>
            The following example illustrates handling the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event in a WPF application that uses
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> controls. In this example, we create a <i>ChildWindow</i> window
            that hosts a <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This window and its hosted <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            will be used to wrap and present the child view passed to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, or navigate to the
            target URL, if <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of a link with <c>target="_blank"</c>.
            <p/>
            Below is the XAML of our <b>ChildWindow</b>.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WebControlSample.ChildWindow" 
                x:Name="childWindow"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                Title="{Binding Title, ElementName=webControl}" 
                Height="480" 
                Width="600">
                <Window.Resources>
                    <!-- We do not need to set any WebPreferences or DataSources 
                    on this provider. It uses the same DataPath as the provider in
                    MainWindow, therefore, this provider will provide the same session,
                    already created by the WebSessionProvider in MainWindow. -->
                    <awe:WebSessionProvider x:Key="mySession" DataPath=".\Cache" />
                </Window.Resources>
                <Grid>
                    <!-- Note that the WebSession assigned to this WebControl, will
                         be effectively ignored when this WebControl wraps a created
                         child view. Child views share the same session as their parent
                         (opener) view. -->
                    <awe:WebControl 
                        Name="webControl" 
                        WebSession="{Binding Source={StaticResource mySession}}"
                        Source="{Binding Source, ElementName=childWindow}"
                        NativeView="{Binding NativeView, ElementName=childWindow}" />
                </Grid>
            </Window>
            ]]>
            </code>
            This is the code-behind of the <b>ChildWindow</b>:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for ChildWindow.xaml
                /// </summary>
                public partial class ChildWindow : Window
                {
                    public ChildWindow()
                    {
                        InitializeComponent();
            
                        // In this example, ShowCreatedWebView of all WebControls, 
                        // is handled by a common handler.
                        webControl.ShowCreatedWebView += App.OnShowNewView;
                    }
            
                    protected override void OnClosed( EventArgs e )
                    {
                        base.OnClosed( e );
            
                        // Destroy the WebControl and its underlying view.
                        webControl.Dispose();
                    }
            
                    // This will be set to the target URL, when this ChildWindow does not
                    // host a created child view. The WebControl, is bound to this property.
                    public Uri Source
                    {
                        get { return this.GetValue( SourceProperty ) as Uri; }
                        set { SetValue( SourceProperty, value ); }
                    }
            
                    public static readonly DependencyProperty SourceProperty = 
                        DependencyProperty.Register( "Source",
                        typeof( Uri ), typeof( ChildWindow ),
                        new UIPropertyMetadata( null ) );
            
                    // This will be set to the created child view that the WebControl will wrap,
                    // when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    // is bound to this property.
                    public IntPtr NativeView
                    {
                        get { return (IntPtr)this.GetValue( ChildWindow.NativeViewProperty ); }
                        internal set { this.SetValue( ChildWindow.NativeViewPropertyKey, value ); }
                    }
            
                    private static readonly DependencyPropertyKey NativeViewPropertyKey = 
                        DependencyProperty.RegisterReadOnly( "NativeView",
                        typeof( IntPtr ), typeof( ChildWindow ),
                        new FrameworkPropertyMetadata( IntPtr.Zero ) );
            
                    public static readonly DependencyProperty NativeViewProperty =
                        NativeViewPropertyKey.DependencyProperty;
            
                }
            }
            ]]>
            </code>
            <code lang="VB.NET">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            
            Namespace WebControlSample
                ''' <summary>
                ''' Interaction logic for ChildWindow.xaml
                ''' </summary>
                Partial Public Class ChildWindow
                    Inherits Window
            
                    Public Sub New()
                        InitializeComponent()
            
                        ' In this example, ShowCreatedWebView of all WebControls, 
                        ' is handled by a common handler.
                        AddHandler webControl.ShowCreatedWebView, AddressOf App.OnShowNewView
                    End Sub
            
                    Protected Overrides Sub OnClosed(ByVal e As EventArgs)
                        MyBase.OnClosed(e)
            
                        ' Destroy the WebControl and its underlying view.
                        webControl.Dispose()
                    End Sub
            
                    ' This will be set to the target URL, when this ChildWindow does not
                    ' host a created child view. The WebControl, is bound to this property.
                    Public Property Source() As Uri
                        Get
                            Return TryCast(Me.GetValue(SourceProperty), Uri)
                        End Get
                        Set(ByVal value As Uri)
                            SetValue(SourceProperty, value)
                        End Set
                    End Property
            
                    Public Shared ReadOnly SourceProperty As DependencyProperty =
                        DependencyProperty.Register("Source", GetType(Uri),
                        GetType(ChildWindow), New UIPropertyMetadata(Nothing))
            
                    ' This will be set to the created child view that the WebControl will wrap,
                    ' when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    ' is bound to this property.
                    Public Property NativeView() As IntPtr
                        Get
                            Return CType(Me.GetValue(ChildWindow.NativeViewProperty), IntPtr)
                        End Get
                        Friend Set(ByVal value As IntPtr)
                            Me.SetValue(ChildWindow.NativeViewPropertyKey, value)
                        End Set
                    End Property
            
                    Private Shared ReadOnly NativeViewPropertyKey As DependencyPropertyKey =
                        DependencyProperty.RegisterReadOnly("NativeView", GetType(IntPtr),
                        GetType(ChildWindow), New FrameworkPropertyMetadata(IntPtr.Zero))
            
                    Public Shared ReadOnly NativeViewProperty As DependencyProperty =
                        NativeViewPropertyKey.DependencyProperty
                End Class
            End Namespace
            ]]>
            </code>
            Below is the common <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> handler, defined in our <see cref="T:System.Windows.Application"/> object
            code-behind:
            <code lang="C#">
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            using Awesomium.Windows.Controls;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for App.xaml
                /// </summary>
                public partial class App : Application
                {
                    private void Application_Exit( object sender, ExitEventArgs e )
                    {
                        // Shutdown the Core.
                        WebCore.Shutdown();
                    }
            
                    // This static handler, will handle the ShowCreatedWebView event for both the 
                    // WebControl of our main application window, as well as for any other windows
                    // hosting WebControls.
                    internal static void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
                    {
                        WebControl webControl = sender as WebControl;
            
                        if ( webControl == null )
                            return;
            
                        if ( !webControl.IsLive )
                            return;
            
                        // Create an instance of our application's child window, that will
                        // host the new view instance, either we wrap the created child view,
                        // or we let the WebControl create a new underlying web-view.
                        ChildWindow newWindow  = new ChildWindow();
            
                        // Treat popups differently. If IsPopup is true, the event is always
                        // the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
                        // Our application does not recognize user defined, non-standard specs. 
                        // Therefore child views opened with non-standard specs, will not be presented as 
                        // popups but as regular new windows (still wrapping the child view however -- se below).
                        if ( e.IsPopup && !e.IsUserSpecsOnly )
                        {
                            // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
                            Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();
            
                            // Set the created native view as the underlying view of the
                            // WebControl. This will maintain the relationship between
                            // the parent view and the child, usually required when the new view
                            // is the result of 'window.open' (JS can access the parent window through
                            // 'window.opener'; the parent window can manipulate the child through the 'window'
                            // object returned from the 'window.open' call).
                            newWindow.NativeView = e.NewViewInstance;
                            // Do not show in the taskbar.
                            newWindow.ShowInTaskbar = false;
                            // Set a border-style to indicate a popup.
                            newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow;
                            // Set resizing mode depending on the indicated specs.
                            newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;
            
                            // If the caller has not indicated a valid size for the new popup window,
                            // let it be opened with the default size specified at design time.
                            if ( ( screenRect.Width > 0 ) && ( screenRect.Height > 0 ) )
                            {
                                // Assign the indicated size.
                                newWindow.Width = screenRect.Width;
                                newWindow.Height = screenRect.Height;
                            }
            
                            // Show the window.
                            newWindow.Show();
            
                            // If the caller has not indicated a valid position for the new popup window,
                            // let it be opened in the default position specified at design time.
                            if ( ( screenRect.Y > 0 ) && ( screenRect.X > 0 ) )
                            {
                                // Move it to the indicated coordinates.
                                newWindow.Top = screenRect.Y;
                                newWindow.Left = screenRect.X;
                            }
                        }
                        else if ( e.IsWindowOpen || e.IsPost )
                        {
                            // No specs or only non-standard specs were specified, but the event is still 
                            // the result of 'window.open', or of an HTML form with tagret="_blank" and method="post". 
                            // We will open a normal window but we will still wrap the new native child view, 
                            // maintaining its relationship with the parent window.
                            newWindow.NativeView = e.NewViewInstance;
                            // Show the window.
                            newWindow.Show();
                        }
                        else
                        {
                            // The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
                            // and method="post"., therefore it's most probably the result of a link with target='_blank'.
                            // We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
                            // create its own underlying view. Setting Cancel to true tells the core to destroy the 
                            // created child view.
                            //
                            // Why don't we always wrap the native view passed to ShowCreatedWebView?
                            //
                            // - In order to maintain the relationship with their parent view,
                            // child views execute and render under the same process (awesomium_process)
                            // as their parent view. If for any reason this child process crashes,
                            // all views related to it will be affected. When maintaining a parent-child 
                            // relationship is not important, we prefer taking advantage of the isolated process 
                            // architecture of Awesomium and let each view be rendered in a separate process.
                            e.Cancel = true;
                            // Note that we only explicitly navigate to the target URL, when a new view is 
                            // about to be created, not when we wrap the created child view. This is because 
                            // navigation to the target URL (if any), is already queued on created child views. 
                            // We must not interrupt this navigation as we would still be breaking the parent-child
                            // relationship.
                            newWindow.Source = e.TargetURL;
                            // Show the window.
                            newWindow.Show();
                        }
                    }
                }
            }
            ]]>
            </code>
            <code lang="VB">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            Imports Awesomium.Windows.Controls
            
            Namespace WebControlSample
            	''' <summary>
            	''' Interaction logic for App.xaml
            	''' </summary>
            	Partial Public Class App
            		Inherits Application
            
            		Private Sub Application_Exit(ByVal sender As Object, ByVal e As ExitEventArgs)
            			' Shutdown the Core.
            			WebCore.Shutdown()
            		End Sub
            
            		' This static handler, will handle the ShowCreatedWebView event for both the 
            		' WebControl of our main application window, as well as for any other windows
            		' hosting WebControls.
            		Friend Shared Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            			Dim webControl As WebControl = TryCast(sender, WebControl)
            
            			If webControl Is Nothing Then Return
            
            			If Not webControl.IsLive Then Return
            
            			' Create an instance of our application's child window, that will
            			' host the new view instance, either we wrap the created child view,
            			' or we let the WebControl create a new underlying web-view.
            			Dim newWindow As New ChildWindow()
            
            			' Treat popups differently. If IsPopup is true, the event is always
            			' the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
            			' Our application does not recognize user defined, non-standard specs. 
            			' Therefore child views opened with non-standard specs, will not be presented as 
            			' popups but as regular new windows (still wrapping the child view however -- se below).
            			If e.IsPopup AndAlso (Not e.IsUserSpecsOnly) Then
            				' JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
            				Dim screenRect As Int32Rect = e.Specs.InitialPosition.GetInt32Rect()
            
            				' Set the created native view as the underlying view of the
            				' WebControl. This will maintain the relationship between
            				' the parent view and the child, usually required when the new view
            				' is the result of 'window.open' (JS can access the parent window through
            				' 'window.opener'; the parent window can manipulate the child through the 'window'
            				' object returned from the 'window.open' call).
            				newWindow.NativeView = e.NewViewInstance
            				' Do not show in the taskbar.
            				newWindow.ShowInTaskbar = False
            				' Set a border-style to indicate a popup.
            				newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow
            				' Set resizing mode depending on the indicated specs.
            				newWindow.ResizeMode = If(e.Specs.Resizable, ResizeMode.CanResizeWithGrip, ResizeMode.NoResize)
            
            				' If the caller has not indicated a valid size for the new popup window,
            				' let it be opened with the default size specified at design time.
            				If (screenRect.Width > 0) AndAlso (screenRect.Height > 0) Then
            					' Assign the indicated size.
            					newWindow.Width = screenRect.Width
            					newWindow.Height = screenRect.Height
            				End If
            
            				' Show the window.
            				newWindow.Show()
            
            				' If the caller has not indicated a valid position for the new popup window,
            				' let it be opened in the default position specified at design time.
            				If (screenRect.Y > 0) AndAlso (screenRect.X > 0) Then
            					' Move it to the indicated coordinates.
            					newWindow.Top = screenRect.Y
            					newWindow.Left = screenRect.X
            				End If
            			ElseIf (e.IsWindowOpen OrElse e.IsPost) Then
            				' No specs or only non-standard specs were specified, but the event is still 
            				' the result of 'window.open' or of an HTML form with tagret="_blank" and method="post".
            				' We will open a normal window but we will still wrap the new native child view, 
            				' maintaining its relationship with the parent window.
            				newWindow.NativeView = e.NewViewInstance
            				' Show the window.
            				newWindow.Show()
            			Else
            				' The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
            				' and method="post"., therefore it's most probably the result of a link with target='_blank'.
            				' We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
            				' create its own underlying view. Setting Cancel to true tells the core to destroy the 
            				' created child view.
            				'
            				' Why don't we always wrap the native view passed to ShowCreatedWebView?
            				'
            				' - In order to maintain the relationship with their parent view,
            				' child views execute and render under the same process (awesomium_process)
            				' as their parent view. If for any reason this child process crashes,
            				' all views related to it will be affected. When maintaining a parent-child 
            				' relationship is not important, we prefer taking advantage of the isolated process 
            				' architecture of Awesomium and let each view be rendered in a separate process.
            				e.Cancel = True
            				' Note that we only explicitly navigate to the target URL, when a new view is 
            				' about to be created, not when we wrap the created child view. This is because 
            				' navigation to the target URL (if any), is already queued on created child views. 
            				' We must not interrupt this navigation as we would still be breaking the parent-child
            				' relationship.
            				newWindow.Source = e.TargetURL
            				' Show the window.
            				newWindow.Show()
            			End If
            		End Sub
            	End Class
            End Namespace
            ]]>
            </code>
            For the complete sample, see the <b>C# WebControlSample</b> of the <b>Awesomium.NET Samples</b> solution, available with the SDK.
            </example><seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/><seealso cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
        </member>
        <member name="E:Awesomium.Core.WebView.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary><remarks>
            
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Core.WebView.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary><remarks>
            The main frame usually finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary><remarks>
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> 
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event either <b>modally</b> or <b>non-modally</b>. 
            <b>Only default or modal handling is officially supported by Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>.
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the above <see cref="T:Awesomium.Core.IWebView"/>
            member, is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            <note type="caution">
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
             No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Core.WebView.CertificateError">
            <summary>
            Occurs when an SSL certificate error is encountered while attempting to navigate
            to a new address.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event is handled, 
            when <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), navigation to the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/> will be canceled
            due to the SLL certificate error.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/> property, 
            <b>before</b> the event handler exits.
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the error and navigation to <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/>
            will be canceled, unless you call <see cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>.
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this method.
            </note>
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            </list>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>
        </member>
        <member name="E:Awesomium.Core.WebView.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Core.WebView.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="E:Awesomium.Core.WebView.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary><remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <p/>
            Optionally, you can easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.ShowPageInfo">
            <summary>
            Occurs in response to a <see cref="M:Awesomium.Core.IWebView.RequestPageInfo"/>
            call, requesting for the page's security related information.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Core.WebView.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebViewType">
            <summary>
            Specifies the different <see cref="T:Awesomium.Core.IWebView"/> types.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewType.Offscreen">
            <summary>
            This type will render continuously to a pixel-buffer.
            You must implement a surface (see <see cref="T:Awesomium.Core.ISurface"/>)
            to render the buffer and inject all input (mouse/keyboard events) yourself.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebViewType.Window">
            <summary>
            This type will create a native Window to display
            the <see cref="T:Awesomium.Core.IWebView"/> and will capture all input itself.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebContextMenuInfo">
            <summary>
            Provides information and utilities for creating and displaying a 
            context menu. Used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebContextMenuInfo.Empty">
            <summary>
            An empty, uninitialized <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebContextMenuInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebContextMenuInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebContextMenuInfo.op_Equality(Awesomium.Core.WebContextMenuInfo,Awesomium.Core.WebContextMenuInfo)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instances are equivalent.
            </summary>
            <param name="cm1">
            The <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instance that is to the left of the equality operator.
            </param>
            <param name="cm2">
            The <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="cm1"/> and <paramref name="cm2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebContextMenuInfo.op_Inequality(Awesomium.Core.WebContextMenuInfo,Awesomium.Core.WebContextMenuInfo)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instances are not equal.
            </summary>
            <param name="cm1">
            The <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instance that is to the left of the inequality operator.
            </param>
            <param name="cm2">
            The <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="cm1"/> and <paramref name="cm2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MouseX">
            <summary>
            Gets the x-coordinate of mouse when the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MouseY">
            <summary>
            Gets the y-coordinate of mouse when the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MediaType">
            <summary>
            Gets the media type where the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.MediaState">
            <summary>
            Gets the state of the media where the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.LinkURL">
            <summary>
            The URL of the link (if any).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.HasLinkURL">
            <summary>
            Gets if the user has right-clicked on a link.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.SourceURL">
            <summary>
            The URL of the media (if any).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.PageURL">
            <summary>
            The URL of the web-page where the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.FrameURL">
            <summary>
            The URL of the frame where the right-click occurred.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.FrameId">
            <summary>
            The ID of the frame.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.SelectionText">
            <summary>
            Gets the selected text the user has right-clicked on, if any.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.HasSelection">
            <summary>
            Gets if the user has right-clicked selected content.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.IsEditable">
            <summary>
            Gets if the element right-clicked, is editable.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.EditFlags">
            <summary>
            Gets the supported edit actions for the element right-clicked.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebContextMenuInfo.IsEmpty">
            <summary>
            Gets if this is an empty, uninitialized <see cref="T:Awesomium.Core.WebContextMenuInfo"/>.
            </summary>
            <seealso cref="F:Awesomium.Core.WebContextMenuInfo.Empty"/>
        </member>
        <member name="T:Awesomium.Core.WebFileChooserMode">
            <summary>
            Indicates the kind of dialog that should be presented, in response to a 
            <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.Open">
            <summary>
            Select a file (file should exist).
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.OpenMultiple">
            <summary>
            Select multiple files.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.OpenFolder">
            <summary>
            Select a folder (folder should exist).
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebFileChooserMode.Save">
            <summary>
            Select a file to save to.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebKeyboardEventType">
            <summary>
            An enumeration of the different <see cref="T:Awesomium.Core.WebKeyboardEvent"/> types.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebKeyboardEventType.KeyDown">
            <summary>
            Key-Down type.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebKeyboardEventType.KeyUp">
            <summary>
            Key-Up type.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebKeyboardEventType.Char">
            <summary>
            Character input type.
            </summary>
        </member>
        <member name="T:Awesomium.Core.Modifiers">
            <summary>
            An enumeration of the different keyboard modifiers.
            </summary>
            <seealso cref="M:Awesomium.Windows.Controls.Utilities.GetModifiers(System.Windows.Input.ModifierKeys)"/>
            <seealso cref="M:Awesomium.Windows.Forms.Utilities.GetCurrentModifiers"/>
        </member>
        <member name="F:Awesomium.Core.Modifiers.ShiftKey">
            <summary>
            Shift key is down.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Modifiers.ControlKey">
            <summary>
            Control key is down.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Modifiers.AltKey">
            <summary>
            ALT key is down.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Modifiers.MetaKey">
            <summary>
            A meta key (Command-key on Mac, Windows-key on Win) is down.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Modifiers.IsKeypad">
            <summary>
            The key pressed is on the keypad.
            </summary>
        </member>
        <member name="F:Awesomium.Core.Modifiers.IsAutorepeat">
            <summary>
            The character input is the result of an auto-repeat timer.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebKeyboardEvent">
            <summary>
            Represents a generic keyboard event that can be created from a
            platform-specific event or synthesized from a virtual event.
            </summary>
            <seealso cref="M:Awesomium.Core.IWebView.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)"/>
            <seealso cref="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)"/>
            <seealso cref="M:Awesomium.Windows.Controls.Utilities.GetModifiers(System.Windows.Input.ModifierKeys)"/>
            <seealso cref="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)"/>
            <seealso cref="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyPressEventArgs)"/>
            <seealso cref="M:Awesomium.Windows.Forms.Utilities.GetCurrentModifiers"/>
            <seealso cref="M:Awesomium.Core.Utilities.GetKeyIdentifierFromVirtualKeyCode(Awesomium.Core.VirtualKey)"/>
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.#ctor(System.UInt32,System.IntPtr,System.IntPtr,Awesomium.Core.Modifiers)">
            <summary>
            Creates a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> directly from a Windows keyboard event message.
            </summary>
            <param name="msg">
            The Windows message. Valid messages include:
            <list type="bullet">
            <item>
            <description>
            <c>WM_KEYDOWN</c>
            </description>
            </item>
            <item>
            <description>
            <c>WM_KEYUP</c>
            </description>
            </item>
            <item>
            <description>
            <c>WM_SYSKEYDOWN</c>
            </description>
            </item>
            <item>
            <description>
            <c>WM_SYSKEYUP</c>
            </description>
            </item>
            <item>
            <description>
            <c>WM_CHAR</c>
            </description>
            </item>
            <item>
            <description>
            <c>WM_IMECHAR</c>
            </description>
            </item>
            <item>
            <description>
            <c>WM_SYSCHAR</c>
            </description>
            </item>
            </list>
            </param>
            <param name="wparam">
            The <c>WParam</c> field of the message.
            </param>
            <param name="lparam">
            The <c>LParam</c> field of the message.
            </param>
            <param name="modifiers">
            Modifiers to pass with the message. There are extensions available to get these,
            for every UI technology.
            </param>
            <seealso cref="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)"/>
            <seealso cref="M:Awesomium.Windows.Controls.Utilities.GetModifiers(System.Windows.Input.ModifierKeys)"/>
            <seealso cref="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)"/>
            <seealso cref="M:Awesomium.Windows.Forms.Utilities.GetKeyboardEvent(System.Windows.Forms.KeyPressEventArgs)"/>
            <seealso cref="M:Awesomium.Windows.Forms.Utilities.GetCurrentModifiers"/>
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.op_Equality(Awesomium.Core.WebKeyboardEvent,Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instances are equivalent.
            </summary>
            <param name="ke1">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the left of the equality operator.
            </param>
            <param name="ke2">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="ke1"/> and <paramref name="ke2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebKeyboardEvent.op_Inequality(Awesomium.Core.WebKeyboardEvent,Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instances are not equal.
            </summary>
            <param name="ke1">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the left of the inequality operator.
            </param>
            <param name="ke2">
            The <see cref="T:Awesomium.Core.WebKeyboardEvent"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="ke1"/> and <paramref name="ke2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.Type">
            <summary>
            Gets or sets the type of this <see cref="T:Awesomium.Core.WebKeyboardEvent"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.Modifiers">
            <summary>
            Gets or sets the current state of the keyboard.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.VirtualKeyCode">
            <summary>
            Gets or sets the virtual key-code associated with this keyboard event. This is either
            directly from the event (ie, <c>WPARAM</c> on Windows) or via a mapping function.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.NativeKeyCode">
            <summary>
            Gets or sets the actual key-code generated by the platform.
            </summary>
            <remarks>
            The DOM spec primarily uses Windows-equivalent codes (hence <see cref="P:Awesomium.Core.WebKeyboardEvent.VirtualKeyCode"/> above)
            but it helps to also specify the platform-specific key-code as well.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.KeyIdentifier">
            <summary>
            Gets or sets a string identifying the key that was pressed.
            </summary>
            <remarks>
            This can be generated from the <see cref="P:Awesomium.Core.WebKeyboardEvent.VirtualKeyCode"/> via the 
            <see cref="M:Awesomium.Core.Utilities.GetKeyIdentifierFromVirtualKeyCode(Awesomium.Core.VirtualKey)"/>
            utility function. You can find the full list of key identifiers at:
            http://www.w3.org/TR/DOM-Level-3-Events/keyset.html
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.Text">
            <summary>
            Gets or sets the actual text generated by this keyboard event. This is usually only a
            single character but we're generous and cap it at a max of 4 characters.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.UnmodifiedText">
            <summary>
            Gets or sets the text generated by this keyboard event before all modifiers except
            shift are applied.
            </summary>
            <remarks>
            This is used internally for working out shortcut keys.
            This is usually only a single character but we're generous and cap it at a
            max of 4 characters.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebKeyboardEvent.IsSystemKey">
            <summary>
            Gets or sets if the pressed key is a "system key".
            </summary>
            <remarks>
            This is a Windows-only concept and should be <c>false</c> for all non-Windows platforms. 
            For more information, see the following link:
            http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx
            </remarks>
        </member>
        <member name="T:Awesomium.Core.WebMenuItem">
            <summary>
            Represents an item in a menu. This is used for Popup Menus.
            </summary>
            <seealso cref="T:Awesomium.Core.WebPopupMenuInfo"/>
            <seealso cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
        </member>
        <member name="F:Awesomium.Core.WebMenuItem.Empty">
            <summary>
            An empty <see cref="T:Awesomium.Core.WebMenuItem"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebMenuItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebMenuItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebMenuItem.ToString">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebMenuItem.op_Equality(Awesomium.Core.WebMenuItem,Awesomium.Core.WebMenuItem)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebMenuItem"/> instances are equivalent.
            </summary>
            <param name="wmi1">
            The <see cref="T:Awesomium.Core.WebMenuItem"/> instance that is to the left of the equality operator.
            </param>
            <param name="wmi2">
            The <see cref="T:Awesomium.Core.WebMenuItem"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wmi1"/> and <paramref name="wmi2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebMenuItem.op_Inequality(Awesomium.Core.WebMenuItem,Awesomium.Core.WebMenuItem)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebMenuItem"/> instances are not equal.
            </summary>
            <param name="wmi1">
            The <see cref="T:Awesomium.Core.WebMenuItem"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wmi2">
            The <see cref="T:Awesomium.Core.WebMenuItem"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wmi1"/> and <paramref name="wmi2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.IsInitialSelection">
            <summary>
            Gets if this item should be the one initially selected 
            in a drop-down (popup) menu.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.OptionGroup">
            <summary>
            Gets the label of the group this item is estimated to be
            member of.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.ItemIndex">
            <summary>
            Gets the original index of this item in a <see cref="T:Awesomium.Core.WebPopupMenuInfo"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.Type">
            <summary>
            Gets the type of this menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.Label">
            <summary>
            Gets the label to display to users.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.ToolTip">
            <summary>
            Gets the text to display when users hover over this menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.Action">
            <summary>
            Action ID (used only for ContextMenu).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.RTL">
            <summary>
            Gets if text should be displayed right-to-left.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.HasDirectionalOverride">
            <summary>
            Gets if text direction has been overridden.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.IsEnabled">
            <summary>
            Gets if this menu item is enabled.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.IsChecked">
            <summary>
            Gets if this menu item is checked (only used with
            <see cref="F:Awesomium.Core.WebMenuItemType.CheckableOption"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebMenuItem.IsEmpty">
            <summary>
            Gets if this an invalid, empty <see cref="T:Awesomium.Core.WebMenuItem"/>.
            </summary>
            <seealso cref="F:Awesomium.Core.WebMenuItem.Empty"/>
        </member>
        <member name="M:Awesomium.Core.WebMenuItemCollection.#ctor(System.Collections.Generic.IList{Awesomium.Core.WebMenuItem})">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.WebMenuItemType">
            <summary>
            Enumeration of the different menu item types.
            For drop-down (popup) menus, you will usually only
            need to handle <see cref="F:Awesomium.Core.WebMenuItemType.Option"/> and
            <see cref="F:Awesomium.Core.WebMenuItemType.Group"/>.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.Option">
            <summary>
            Generic Option.
            Example: <code lang="HTML">&lt;option&gt;</code>
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.CheckableOption">
            <summary>
            Option with a checkbox.
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.Group">
            <summary>
            Group Label. 
            Example: <code lang="HTML">&lt;optgroup label="xxx"&gt;</code>
            </summary>
        </member>
        <member name="F:Awesomium.Core.WebMenuItemType.Separator">
            <summary>
            Separator.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebPopupMenuInfo">
            <summary>
            Provides information and utilities for creating and displaying a
            drop-down (popup) menu.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>
            <seealso cref="T:Awesomium.Core.PopupMenuEventArgs"/>
        </member>
        <member name="M:Awesomium.Core.WebPopupMenuInfo.Cancel">
            <summary>
            Cancels the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event
            that requested the creation of this menu.
            </summary>
            <remarks>
            When you select an item or cancel the event, you should
            hide and destroy the visual drop-down (popup) menu, if any.
            <note>
            If <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> was <c>false</c> (default),
            technology specific <c>WebControl</c> instances, handle this internally.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event, has already been canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An item has already been selected and the response has been provided to the view.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)">
            <summary>
            Responds to the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event
            by indicating the selected item.
            </summary>
            <param name="itemIndex">
            The selected item's index.
            </param>
            <remarks>
            When you select an item or cancel the event, you should
            hide and destroy the visual drop-down (popup) menu, if any.
            <note>
            If <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> was <c>false</c> (default),
            technology specific <c>WebControl</c> instances, handle this internally.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event, has already been canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An item has already been selected and a response has been provided to the view.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified index is out of range.
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.IsValid">
            <summary>
            Gets if this is a valid <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> instance
            that has not been completed or canceled.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.Bounds">
            <summary>
            Gets the location to display the menu.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.ItemHeight">
            <summary>
            Gets the suggested height of each menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.ItemFontSize">
            <summary>
            Gets the suggested font-size of each menu item.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.SelectedItem">
            <summary>
            Gets the index of the item that should initially be selected.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.IsRightAligned">
            <summary>
            Gets if the menu is right-aligned.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.Count">
            <summary>
            Gets the number of <see cref="T:Awesomium.Core.WebMenuItem"/> elements that should be displayed by the drop-down (popup) menu.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPopupMenuInfo.Item(System.UInt32)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.WebMenuItem"/> with the specified <paramref name="index"/>,
            in this <see cref="T:Awesomium.Core.WebPopupMenuInfo"/>.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:Awesomium.Core.WebMenuItem"/> element to get.
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.WebMenuItem"/> with the specified <paramref name="index"/>.
            </returns>
        </member>
        <member name="T:Awesomium.Core.WebPreferences">
            <summary>
            Represents the preferences for a <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
            <remarks>
            All <see cref="T:Awesomium.Core.IWebView"/> instances that belong to a specific <see cref="T:Awesomium.Core.WebSession"/>,
            share these preferences.
            </remarks>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
            <seealso cref="P:Awesomium.Core.IWebView.WebSession"/>
            <seealso cref="T:Awesomium.Core.WebSession"/>
        </member>
        <member name="F:Awesomium.Core.WebPreferences.Default">
            <summary>
            Represents a <see cref="T:Awesomium.Core.WebPreferences"/> instance initialized with default settings.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebPreferences.#ctor(System.Boolean)">
            <summary>
            [This type/member supports the Awesomium.NET infrastructure and is not intended to be used directly from your code.]
            </summary>
            <param name="initialize">
            The parameter is ignored. Either <c>true</c> or <c>false</c>, a <see cref="T:Awesomium.Core.WebPreferences"/> instance
            initialized to the default values, is created. <b>User code should use <see cref="F:Awesomium.Core.WebPreferences.Default"/></b>.
            </param>
        </member>
        <member name="M:Awesomium.Core.WebPreferences.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebPreferences.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebPreferences.op_Equality(Awesomium.Core.WebPreferences,Awesomium.Core.WebPreferences)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebPreferences"/> instances are equivalent.
            </summary>
            <param name="wp1">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the left of the equality operator.
            </param>
            <param name="wp2">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wp1"/> and <paramref name="wp2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebPreferences.op_Inequality(Awesomium.Core.WebPreferences,Awesomium.Core.WebPreferences)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebPreferences"/> instances are not equal.
            </summary>
            <param name="wp1">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wp2">
            The <see cref="T:Awesomium.Core.WebPreferences"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wp1"/> and <paramref name="wp2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.MaxHttpCacheStorage">
            <summary>
            The max amount of storage (in bytes) to use for caching HTTP responses. (Default: <c>0</c>)
            </summary>
            <remarks>
            Specify 0 to let Awesomium determine a good value based on a percentage
            of system resources. (In-memory cache will use a percentage of RAM,
            on-disk cache will use a percentage of free disk space).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Javascript">
            <summary>
            Gets or sets if JavaScript should be enabled. (Default: <c>true</c>)
            </summary>
            <seealso cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Dart">
            <summary>
            Gets or sets if Dart (experimental) should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Plugins">
            <summary>
            Gets or sets if plugins (Flash, Silverlight) should be enabled.
            (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.LocalStorage">
            <summary>
            Gets or sets if HTML5 Local Storage should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.Databases">
            <summary>
            Gets or sets if HTML5 Databases should be enabled. (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AppCache">
            <summary>
            Gets or sets if HTML5 App Cache should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.WebAudio">
            <summary>
            Gets or sets if HTML5 WebAudio should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.WebGL">
            <summary>
            Gets or sets if HTML5 WebGL (experimental) should be enabled.
            (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.WebSecurity">
            <summary>
            Gets or sets if web security should be enabled (prevents cross-domain
            requests, for example). (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.RemoteFonts">
            <summary>
            Gets or sets if remote fonts should be enabled. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.SmoothScrolling">
            <summary>
            Gets or sets if smooth scrolling should be enabled. (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.EnableGPUAcceleration">
            <summary>
            Gets or sets if GPU accelerated compositing (experimental) should be
            enabled. This is only compatible with windowed <see cref="T:Awesomium.Core.IWebView"/> 
            instances at this time (see <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>). 
            (Default: <c>false</c>)
            </summary>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CustomCSS">
            <summary>
            User-defined CSS to be applied to all web-pages. This is useful for
            overriding default styles. (Default: <see cref="F:System.String.Empty"/>)
            </summary>
            <remarks>
            This is <b>not</b> a file-path, you should pass a raw CSS string.
            <p/>
            This value is concatenated with the global <see cref="P:Awesomium.Core.WebConfig.CustomCSS"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.UserScript">
            <summary>
            User-defined JavaScript to run at the beginning of every page load. This
            code is run immediately after global JavaScript objects are set up and
            before the DOM or any inline scripts are loaded.
            </summary>
            <remarks>
            This is <b>not</b> a file-path, you should pass a raw JavaScript string.
            <p/>
            This value is concatenated with the global <see cref="P:Awesomium.Core.WebConfig.UserScript"/>.
            <note type="caution">
            <b>Use this property with extreme caution. No check for errors is performed before this code
            is injected to pages loading. Errors in the code defined in this property, can affect
            the operation of our internal JavaScript Interoperation Framework (JIF), used to keep 
            a seamless cooperation between Awesomium.NET and the loaded page.</b><br/>
            Among other things, JIF handles <c>window.open</c>, <c>window.alert</c> and user
            selections in the page.
            </note>
            <p/>
            Before using this property, please note that:
            <list type="bullet">
            <item>
            <description>
            The page's full DOM is not yet created at the time this code is executed. This code is executed
            <b>before</b> <c>DOMContentLoaded</c> and <see cref="E:Awesomium.Core.IWebView.DocumentReady"/>.
            </description>
            </item>
            <item>
            <description>
            Any global JavaScript objects (and their members) that you create with 
            <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/> after the creation of an
            <see cref="T:Awesomium.Core.IWebView"/> instance, may not be available yet, the first time a view
            loads a page.
            </description>
            </item>
            <item>
            Attempts to handle crucial members of the <c>window</c> object itself (such as <c>window.open</c>),
            may be overridden/prevented by JIF.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.ProxyConfig">
            <summary>
            Indicates the proxy settings for all network requests. 
            Specify "none" to disable all proxy use, specify "auto" to attempt to detect the proxy using system settings 
            (e.g., via the Internet Properties dialog on Windows or the Network panel of System Preferences on Mac OSX). 
            Specify anything else to set manual proxy settings.
            </summary>
            <example>
            Possible values can be:
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><c>"none"</c></term>
            <description>No proxy. (<b>Default</b>).</description>
            </item>
            <item>
            <term><c>"auto"</c></term>
            <description>Detect system proxy settings.</description>
            </item>
            <item>
            <term><c>"http=myproxy:80;ftp=myproxy2"</c></term>
            <description>
            Use HTTP proxy "myproxy:80" for http:// URLs, and HTTP proxy 
            "myproxy2:80" for ftp:// URLs.
            </description>
            </item>
            <item>
            <term><c>"myproxy:80"</c></term>
            <description>Use HTTP proxy "foopy:80" for all URLs.</description>
            </item>
            <item>
            <term><c>"socks4://myproxy"</c></term>
            <description>Use SOCKS v4 proxy "foopy:1080" for all URLs.</description>
            </item>
            </list>
            </example>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AcceptLanguage">
            <summary>
            Gets or sets the accept-language for the browser. (Default: <c>"en-us,en"</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AcceptCharset">
            <summary>
            Gets or sets the accept-charset for the browser. (Default: <c>"iso-8859-1,*,utf-8"</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.DefaultEncoding">
            <summary>
            Gets or sets the default encoding for the browser. (Default: <c>"iso-8859-1"</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.ShrinkStandaloneImagesToFit">
            <summary>
            Gets or sets if standalone images should be shrunk to fit the view.
            (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.LoadImagesAutomatically">
            <summary>
            Gets or sets if images should be loaded automatically on the page.
            (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CanScriptsOpenWindows">
            <summary>
            Gets or sets if scripts are allowed to open windows. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CanScriptsCloseWindows">
            <summary>
            Gets or sets if scripts are allowed to close windows. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.CanScriptsAccessClipboard">
            <summary>
            Gets or sets if scripts are allowed to access the clipboard.
            (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.UniversalAccessFromFileURL">
            <summary>
            Gets or sets if files can access local files, using <c>file://</c>. (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.FileAccessFromFileURL">
            <summary>
            Gets or sets if local files can access other local files, using <c>file://</c>. (Default: <c>false</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.AllowInsecureContent">
            <summary>
            Gets or sets if insecure content is displayed and/or run. (Default: <c>true</c>)
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.PdfJS">
            <summary>
            Gets or sets if PDF.js (experimental) should be enabled. (Default: <c>true</c>)
            </summary>
            <remarks>
            If this is set to <c>false</c>, navigations to a PDF file will automatically
            fire a download for the PDF file.
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.JavascriptViews">
            <summary>
            Gets or sets if JavaScript code can access information and management tools of created
            <see cref="T:Awesomium.Core.IWebView"/> instances through <see cref="T:global.OSMJIF"/>. (Default: <c>true</c>)
            </summary>
            <seealso cref="M:global.OSMJIF.getViews"/>
            <seealso cref="M:global.OSMJIF.getViewsAsync(global.GetViewsFunction)"/>
            <seealso cref="T:global.OSMView"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.JavascriptApplicationInfo">
            <summary>
            Gets or sets if JavaScript code can access information about the running
            Awesomium application through <see cref="T:global.OSMJIF"/>. (Default: <c>true</c>)
            </summary>
            <seealso cref="M:global.OSMJIF.getInfo"/>
            <seealso cref="M:global.OSMJIF.getInfoAsync(global.GetInfoFunction)"/>
            <seealso cref="T:global.OSMInfo"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.JavascriptViewEvents">
            <summary>
            Gets or sets if JavaScript code can add listeners for <see cref="T:Awesomium.Core.IWebView"/> events 
            through <see cref="T:global.OSMView"/>. (Default: <c>false</c>)
            </summary>
            <seealso cref="M:global.OSMView.addEventListener(global.String,global.EventListenerFunction)"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.JavascriptViewExecute">
            <summary>
            Gets or sets if JavaScript code can execute JavaScript on another page
            through <see cref="T:global.OSMView"/>. (Default: <c>false</c>)
            </summary>
            <seealso cref="M:global.OSMView.executeJavascript(global.String)"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.JavascriptViewChangeSource">
            <summary>
            Gets or sets if JavaScript code can change the <see cref="P:Awesomium.Core.IWebView.Source"/> of 
            another <see cref="T:Awesomium.Core.IWebView"/> through <see cref="T:global.OSMView"/>. (Default: <c>false</c>)
            </summary>
            <seealso cref="P:global.OSMView.source"/>
        </member>
        <member name="P:Awesomium.Core.WebPreferences.JavascriptGlobalEvents">
            <summary>
            Gets or sets if JavaScript code can add listeners for <see cref="T:Awesomium.Core.WebCore"/> events 
            through <see cref="T:global.OSMJIF"/>. (Default: <c>true</c>)
            </summary>
            <seealso cref="M:global.OSMJIF.addEventListener(global.String,global.EventListenerFunction)"/>
        </member>
        <member name="T:Awesomium.Core.WebSession">
            <summary>
            Represents a session responsible for storing all user-generated data (cookies,
            cache, authentication, etc.). It can either be purely in-memory or saved
            to disk.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            <p/>
            <note>
            Due to being responsible for maintaining authentication contexts, <see cref="T:Awesomium.Core.WebSession"/> instances
            are also responsible for controlling download operations that are then maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            This is why a <see cref="T:Awesomium.Core.WebSession"/> cannot be released while a download operation initiated by a view
            associated with it, is in progress.
            </note>
            <h2>Assigning a WebSession</h2>
            The following table presents the various ways of assigning a <see cref="T:Awesomium.Core.WebSession"/> to an <see cref="T:Awesomium.Core.IWebView"/>
            instance, depending on the technology:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Methods
            </description>
            </listheader>
            <item>
            <term>
            Core (<see cref="T:Awesomium.Core.WebView"/>)
            </term>
            <description>
            <list type="number">
            <item>
            <description>
            Create a <see cref="T:Awesomium.Core.WebSession"/> using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>.
            </description>
            </item>
            <item>
            <description>
            Assign the session to a new <see cref="T:Awesomium.Core.WebView"/> during instantiation (see <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>).
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            WPF (<see cref="T:Awesomium.Windows.Controls.WebControl"/>)
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Assign a <see cref="T:Awesomium.Core.WebSession"/> to the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/> by using a
            <see cref="T:Awesomium.Windows.Controls.WebSessionProvider"/> in XAML. For an example, see: 
            <b><a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </description>
            </item>
            <item>
            <description>
            Assign a <see cref="T:Awesomium.Core.WebSession"/> to the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            programmatically, by using the <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/> property.
            <note>
            The session must be assigned to the control before the control goes <i>live</i> (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>),
            usually in the container's constructor, right after <c>InitializeComponent</c> or by handling the
            <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event.
            </note>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms (<see cref="T:Awesomium.Windows.Forms.WebControl"/>)
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Assign a <see cref="T:Awesomium.Core.WebSession"/> to the Windows Forms <see cref="T:Awesomium.Windows.Forms.WebControl"/> by using a
            <see cref="T:Awesomium.Windows.Forms.WebSessionProvider"/> in XAML. For an example, see: 
            <b><a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </description>
            </item>
            <item>
            <description>
            Assign a <see cref="T:Awesomium.Core.WebSession"/> to the WPF <see cref="T:Awesomium.Windows.Forms.WebControl"/>
            programmatically, by using the <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/> property.
            <note>
            The session must be assigned to the control before the control goes <i>live</i> (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>),
            usually in the container's constructor, right after <c>InitializeComponent</c> or by handling the
            <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event.
            </note>
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            This example demonstrates creating and using a <see cref="T:Awesomium.Core.WebSession"/> with the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>,
            in a non-UI application.
            <code lang="C#">
            using ( WebSession session = WebCore.CreateWebSession( "C:\\MyCache", new WebPreferences() { CustomCSS = "::-webkit-scrollbar { visibility: hidden; }" } ) )
            {
            	using ( WebView view = WebCore.CreateWebView( 1280, 960, session ) )
            	{
            		bool finishedLoading = false;
            
            		view.LoadURL( new Uri( "http://www.awesomium.com" ) );
            		view.LoadingFrameComplete += ( s, e ) =&gt;
            		{
            			if ( e.IsMainFrame )
            				finishedLoading = true;
            				
            		    BitmapSurface surface = (BitmapSurface)view.Surface;
            		    surface.SaveToPNG( "result.png", true );
            		};
            		
                    if ( WebCore.UpdateState == WebCoreUpdateState.NotUpdating )
                        WebCore.Run();
            	}
            }
            </code>
            <code lang="VB">
            Using session As WebSession = WebCore.CreateWebSession("C:\MyCache", New WebPreferences() With {.CustomCSS = "::-webkit-scrollbar { visibility: hidden; }"})
            	Using view As WebView = WebCore.CreateWebView(1280, 960, session)
            		Dim finishedLoading As Boolean = False
            
            		view.LoadURL(New Uri("http://www.awesomium.com"))
            		AddHandler view.LoadingFrameComplete, Sub(s, e)
            													If e.IsMainFrame Then
            														finishedLoading = True
            													End If
            													
            													Dim surface As BitmapSurface = CType(view.Surface, BitmapSurface)
            		                                            surface.SaveToPNG("result.png", True)
            											  End Sub	
            
            		If WebCore.UpdateState = WebCoreUpdateState.NotUpdating Then
                        WebCore.Run()
                    End If
            	End Using
            End Using
            </code>
            </example>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>
            <seealso cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>
        </member>
        <member name="F:Awesomium.Core.WebSession.ReservedAssetHosts">
            <summary>
            A list of asset host names that are reserved by Awesomium.NET for internal use,
            and they cannot be used with <see cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebSession.Dispose">
            <summary>
            Releases this <see cref="T:Awesomium.Core.WebSession"/> instance.
            </summary>
            <remarks>
            You can dispose <see cref="T:Awesomium.Core.WebSession"/> instances that are no longer associated with a view. If you forget to do this, 
            all <see cref="T:Awesomium.Core.WebSession"/> instances maintained by the <see cref="T:Awesomium.Core.WebCore"/>, are disposed at <see cref="M:Awesomium.Core.WebCore.Shutdown"/>. 
            This ensures that the <see cref="T:Awesomium.Core.WebSession"/> will be saved to disk upon application exit.
            <note type="caution">
            A session cannot not be destroyed until all <see cref="T:Awesomium.Core.IWebView"/> instances associated with it have been destroyed
            and all download operations controlled by this session, are either complete or canceled.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot dispose a <see cref="T:Awesomium.Core.WebSession"/> that is assigned to active views or controls active download operations. 
            Make sure that no view and no download operation is using this session before disposing it.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebSession.OnDispose">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)">
            <summary>
            Adds a <see cref="T:Awesomium.Core.Data.DataSource"/> instance for a specified host.
            </summary>
            <param name="assetHost">
            The host to bind to the added <paramref name="source"/>. For example,
            if <i><c>myhost</c></i> is specified, a resource file named <i>myimage.png</i>
            must be requested using: <c>asset://myhost/myimage.png</c>.
            </param>
            <param name="source">
            The <see cref="T:Awesomium.Core.Data.DataSource"/> instance that will handle requests for local assets.
            </param>
            <remarks>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance is responsible for providing local assets
            when code (HTML or Javascript) from a page asks for them. The default protocol
            for requesting local assets is: <c>asset://</c>.
            <p/>
            To choose the name of the protocol yourself, explicitly initialize the <see cref="T:Awesomium.Core.WebCore"/>
            (see: <see cref="M:Awesomium.Core.WebCore.Initialize(Awesomium.Core.WebConfig)"/>) setting <see cref="P:Awesomium.Core.WebConfig.AssetProtocol"/>.
            <p/>
            This scenario allows you to override standard protocols (such as <c>http://</c>),
            or use DataSources to handle protocols that are not handled by default (such as
            <c>ftp://</c> and <c>mailto://</c>).
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            This <see cref="T:Awesomium.Core.WebSession"/> instance has either been disposed or never properly initialized.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            An empty string or <c>null</c> reference has been specified
            for <paramref name="assetHost"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A <c>null</c> reference has been specified
            for <paramref name="source"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The specified <paramref name="source"/>, has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified <paramref name="source"/>, is assigned to another <see cref="T:Awesomium.Core.WebSession"/>. 
            A <see cref="T:Awesomium.Core.Data.DataSource"/> can only be used by a single session.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="assetHost"/> specified is reserved by Awesomium.NET, for internal use.
            For a list of reserved asset host names, see <see cref="F:Awesomium.Core.WebSession.ReservedAssetHosts"/>.
            </exception>
            <seealso cref="T:Awesomium.Core.Data.DataSource"/>
            <seealso cref="P:Awesomium.Core.WebConfig.AssetProtocol"/>
        </member>
        <member name="M:Awesomium.Core.WebSession.GetDataSource(System.String)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.Data.DataSource"/> instance previously registered for this <paramref name="assetHost"/>.
            </summary>
            <param name="assetHost">
            The host bound to the <see cref="T:Awesomium.Core.Data.DataSource"/>.
            </param>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance that is bound to the specified <paramref name="assetHost"/>,
            or <c>null</c> (<c>Nothing</c> in Visual Basic) if no <see cref="T:Awesomium.Core.Data.DataSource"/> is
            bound to the specified <paramref name="assetHost"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            This <see cref="T:Awesomium.Core.WebSession"/> instance has either been disposed or never properly initialized.
            </exception>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
        </member>
        <member name="M:Awesomium.Core.WebSession.ContainsDataSource(System.String)">
            <summary>
            Gets if a <see cref="T:Awesomium.Core.Data.DataSource"/> is registered with this <see cref="T:Awesomium.Core.WebSession"/>
            for the specified <paramref name="assetHost"/>.
            </summary>
            <param name="assetHost">
            The host to seek a <see cref="T:Awesomium.Core.Data.DataSource"/> bound to.
            </param>
            <returns>
            <c>true</c> if a <see cref="T:Awesomium.Core.Data.DataSource"/> bound to the specified <paramref name="assetHost"/>,
            is registered with this <see cref="T:Awesomium.Core.WebSession"/>; <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            This <see cref="T:Awesomium.Core.WebSession"/> instance has either been disposed or never properly initialized.
            </exception>
            <seealso cref="M:Awesomium.Core.WebSession.GetDataSource(System.String)"/>
            <seealso cref="M:Awesomium.Core.WebSession.AddDataSource(System.String,Awesomium.Core.Data.DataSource)"/>
        </member>
        <member name="M:Awesomium.Core.WebSession.SetCookie(System.Uri,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets a cookie for a certain URL asynchronously.
            </summary>
            <param name="url">The URL to set the cookie on.</param>
            <param name="cookieString">
            The cookie string, for example:
            <c>"key1=value1; key2=value2"</c>
            </param>
            <param name="isHttpOnly">
            Specifies if this cookie is HTTP-only.
            </param>
            <param name="forceSessionCookie">
            Specifies if this is a session cookie. (Will not be saved to disk)
            </param>
            <remarks>
            <note type="note">
            Note that this method is asynchronous. What's more, on <i>on-disk</i> sessions
            (see: <see cref="P:Awesomium.Core.WebSession.IsOnDisk"/>), even if the page or server set a cookie, this is
            not guaranteed to be persisted on-disk immediately. Session data (including cookies)
            remain most of the time <i>in-memory</i> for performance reasons and are not persisted 
            to disk until the session is released (either at <see cref="M:Awesomium.Core.WebSession.Dispose"/> or 
            <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            This <see cref="T:Awesomium.Core.WebSession"/> instance has either been disposed or never properly initialized.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified <paramref name="url"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebSession.ClearCookies">
            <summary>
            Clears all cookies asynchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This <see cref="T:Awesomium.Core.WebSession"/> instance has either been disposed or never properly initialized.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebSession.ClearCache">
            <summary>
            Clears the cache asynchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This <see cref="T:Awesomium.Core.WebSession"/> instance has either been disposed or never properly initialized.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)">
            <summary>
            Gets the saved zoom setting for a certain URL host (in percent).
            Zoom is saved per hostname.
            </summary>
            <param name="url">
            The URL to look for a zoom setting for.
            </param>
            <returns>
            An integer representing the zoom percentage for the specified host.
            </returns>
            <remarks>
            <note>
            Zoom settings are saved per hostname.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            This <see cref="T:Awesomium.Core.WebSession"/> instance has either been disposed or never properly initialized.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified <paramref name="url"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebSession.IsOnDisk">
            <summary>
            Gets if this session is being synchronized to disk (else, it's <i>in-memory</i>
            only and all data will be lost at exit).
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSession.DataPath">
            <summary>
            Gets the disk data path of this session, if any.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSession.Preferences">
            <summary>
            Gets the preferences for this session.
            </summary>
            <remarks>
            <see cref="T:Awesomium.Core.IWebView"/> instances that share the same <see cref="T:Awesomium.Core.WebSession"/>, share the same cookies, cache, 
            certificates, local databases as well as the same preferences (see <see cref="T:Awesomium.Core.WebPreferences"/>).
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebSession.HasViews">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.WebSession"/> is currently assigned to <see cref="T:Awesomium.Core.IWebView"/>
            instances.
            </summary>
            <remarks>
            You can access the views this session is associated with, through the <see cref="P:Awesomium.Core.WebSession.Views"/> property.
            <note type="caution">
            A session cannot be destroyed until all <see cref="T:Awesomium.Core.IWebView"/> instances associated with it have been destroyed.
            You should always check this property before attempting to call <see cref="M:Awesomium.Core.WebSession.Dispose"/>. A session may still
            have associated views, even if <see cref="P:Awesomium.Core.WebSession.Views"/> returns an empty array. This is because disposed views
            are asynchronously destroyed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebSession.Views">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instances that share this <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
            <remarks>
            <note type="caution">
            A session cannot be destroyed until all <see cref="T:Awesomium.Core.IWebView"/> instances associated with it have been destroyed.
            You should always check <see cref="P:Awesomium.Core.WebSession.HasViews"/> before attempting to call <see cref="M:Awesomium.Core.WebSession.Dispose"/>. A session may still
            have associated views, even if this property returns an empty array. This is because disposed views
            are asynchronously destroyed.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Core.WebSession.HasViews"/>
        </member>
        <member name="P:Awesomium.Core.WebSession.HasDownloads">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.WebSession"/> is currently controlling active download operations.
            </summary>
            <remarks>
            You can access the download operations controlled by this session, through the <see cref="P:Awesomium.Core.WebSession.ActiveDownloads"/>
            property.
            <note type="caution">
            A session cannot be destroyed until all download operations controlled by this session, are either complete or canceled.
            You should always check this property before attempting to call <see cref="M:Awesomium.Core.WebSession.Dispose"/>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebSession.ActiveDownloads">
            <summary>
            Gets a list of active download operations controlled by this <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
            <remarks>
            <note type="caution">
            A session cannot be destroyed until all download operations controlled by this session, are either complete or canceled.
            You should always check <see cref="P:Awesomium.Core.WebSession.HasDownloads"/> before attempting to call <see cref="M:Awesomium.Core.WebSession.Dispose"/>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Core.WebSession.DataSources">
            <summary>
            Gets a list of <see cref="T:Awesomium.Core.Data.DataSource"/> instances that have been registered with this <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebSession.IsJavascriptEnabled">
            <summary>
            Gets if JavaScript is enabled on this <see cref="T:Awesomium.Core.WebSession"/>.
            </summary>
            <remarks>
            If this is <c>true</c> (default) all <see cref="T:Awesomium.Core.IWebView"/> instances associated
            with this session, will have JavaScript enabled.
            </remarks>
            <seealso cref="P:Awesomium.Core.WebPreferences.Javascript"/>
        </member>
        <member name="M:Awesomium.Core.WebURL.ToString">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebURL.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebURL.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebURL.op_Equality(Awesomium.Core.WebURL,Awesomium.Core.WebURL)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebURL"/> instances are equivalent.
            </summary>
            <param name="wu1">
            The <see cref="T:Awesomium.Core.WebURL"/> instance that is to the left of the equality operator.
            </param>
            <param name="wu2">
            The <see cref="T:Awesomium.Core.WebURL"/> instance that is to the right of the equality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wu1"/> and <paramref name="wu2"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebURL.op_Inequality(Awesomium.Core.WebURL,Awesomium.Core.WebURL)">
            <summary>
            Tests whether two specified <see cref="T:Awesomium.Core.WebURL"/> instances are not equal.
            </summary>
            <param name="wu1">
            The <see cref="T:Awesomium.Core.WebURL"/> instance that is to the left of the inequality operator.
            </param>
            <param name="wu2">
            The <see cref="T:Awesomium.Core.WebURL"/> instance that is to the right of the inequality operator.
            </param>
            <returns>
            <c>true</c> if <paramref name="wu1"/> and <paramref name="wu2"/> are unequal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Awesomium.Core.WebURL.OriginalString">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Core.WebViewCollection">
            <summary>
            Represents a collection of views maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.Contains(System.IntPtr)">
            <summary>
            Determines whether an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, exists in the collection.
            </summary>
            <param name="instanceHandle">
            The native instance handle of the <see cref="T:Awesomium.Core.IWebView"/> instance to seek for.
            </param>
            <returns>
            <c>true</c> if an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle exists in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.ContainsWithProcessId(System.Int32)">
            <summary>
            Determines whether one or more <see cref="T:Awesomium.Core.IWebView"/> instances with the specified process identifier, exist in the collection.
            </summary>
            <param name="processId">
            The identifier for the corresponding child-process hosting the <see cref="T:Awesomium.Core.IWebView"/> instance to seek for.
            </param>
            <returns>
            <c>true</c> if an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified process identifier exists in the collection; otherwise, <c>false</c>.
            </returns>        
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.Contains(System.Int32)">
            <summary>
            Determines a <see cref="T:Awesomium.Core.IWebView"/> instance with the specified unique identifier, exist in the collection.
            </summary>
            <param name="id">
            The unique identifier for the corresponding <see cref="T:Awesomium.Core.IWebView"/> instance to seek for
            (See <see cref="P:Awesomium.Core.IWebView.Identifier"/>).
            </param>
            <returns>
            <c>true</c> if an <see cref="T:Awesomium.Core.IWebView"/> instance with the specified unique identifier exists in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.GetById(System.Int32)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance with the specified unique identifier, if any.
            </summary>
            <param name="id">
            The unique identifier for the corresponding <see cref="T:Awesomium.Core.IWebView"/> instance to seek for
            (See <see cref="P:Awesomium.Core.IWebView.Identifier"/>).
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.IWebView"/> instance with the specified unique identifier, or <c>null</c> 
            (<c>Nothing</c> in Visual Basic), if a view with the specified identifier does not exist.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A valid identifier must be greater than <c>0</c>.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.GetByHandle(System.IntPtr)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, if any.
            </summary>
            <param name="instanceHandle">
            The native instance handle of an <see cref="T:Awesomium.Core.IWebView"/> instance. (See <see cref="P:Awesomium.Core.IWebView.Instance"/>)
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.IWebView"/> instance with the specified handle, or <c>null</c> (<c>Nothing</c> in Visual Basic), 
            if a view with the specified handle does not exist.
            </returns>
            <exception cref="T:System.ArgumentException">
            Invalid handle specified.
            </exception>
        </member>
        <member name="M:Awesomium.Core.WebViewCollection.GetByProcessId(System.UInt32)">
            <summary>
            Gets the <see cref="T:Awesomium.Core.IWebView"/> instance(s) with the specified child-process identifier, if any.
            </summary>
            <param name="processId">
            The identifier for the corresponding child-process hosting the
            <see cref="T:Awesomium.Core.IWebView"/> instance(s) to seek for (See <see cref="P:Awesomium.Core.IWebView.ProcessId"/>).
            </param>
            <returns>
            The <see cref="T:Awesomium.Core.IWebView"/> instance(s) with the process identifier, or <c>null</c> 
            (<c>Nothing</c> in Visual Basic), if a view with the specified child-process 
            identifier does not exist.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A valid identifier must be greater than <c>0</c>.
            </exception>
        </member>
        <member name="P:Awesomium.Core.WebViewCollection.SyncRoot">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="T:Awesomium.Core.WebLoginDialogInfo">
            <summary>
            Provides information for creating and displaying a dialog 
            so that users can input their username and password.
            </summary>
            <seealso cref="E:Awesomium.Core.IWebView.LoginRequest"/>
            <seealso cref="T:Awesomium.Core.LoginRequestEventArgs"/>
        </member>
        <member name="P:Awesomium.Core.WebLoginDialogInfo.RequestId">
            <summary>
            Gets the unique ID of the request.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebLoginDialogInfo.RequestURL">
            <summary>
            Gets the URL of the web-page requesting login.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebLoginDialogInfo.IsProxy">
            <summary>
            Gets if this is a proxy auth.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebLoginDialogInfo.Host">
            <summary>
            Gets the hostname of the server.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebLoginDialogInfo.Port">
            <summary>
            Gets the port of the server.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebLoginDialogInfo.Scheme">
            <summary>
            Gets the scheme of the server.
            </summary>
        </member>
        <member name="P:Awesomium.Core.WebLoginDialogInfo.Realm">
            <summary>
            Gets the realm of the server.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.WinAPI.IEnumSTATDATA">
            <summary>
                The IEnumSTATDATA interface is used to enumerate through an array of 
                STATDATA structures, which contain advisory connection information for 
                a data object. IEnumSTATDATA has the same methods as all enumerator 
                interfaces: Next, Skip, Reset, and Clone.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumSTATDATA.Next(System.Int32,Awesomium.Windows.WinAPI.STATDATA[],System.Int32[])">
            <summary>
                Retrieves the next celt items in the enumeration sequence. If there are 
                fewer than the requested number of elements left in the sequence, it 
                retrieves the remaining elements. The number of elements actually 
                retrieved is returned through pceltFetched (unless the caller passed 
                in NULL for that parameter).
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumSTATDATA.Skip(System.Int32)">
            <summary>
                Skips over the next specified number of elements in the enumeration sequence.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumSTATDATA.Reset">
            <summary>
                Resets the enumeration sequence to the beginning.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumSTATDATA.Clone(Awesomium.Windows.WinAPI.IEnumSTATDATA@)">
            <summary>
                Creates another enumerator that contains the same enumeration state as 
                the current one. Using this function, a client can record a particular 
                point in the enumeration sequence and then return to that point at a 
                later time. The new enumerator supports the same interface as the original one.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.WinAPI.IEnumFORMATETC">
            <summary>
                The IEnumFORMATETC interface is used to enumerate an array of FORMATETC 
                structures. IEnumFORMATETC has the same methods as all enumerator interfaces: 
                Next, Skip, Reset, and Clone.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumFORMATETC.Next(System.Int32,Awesomium.Windows.WinAPI.FORMATETC[],System.Int32[])">
            <summary>
                Retrieves the next celt items in the enumeration sequence. If there are 
                fewer than the requested number of elements left in the sequence, it 
                retrieves the remaining elements. The number of elements actually 
                retrieved is returned through pceltFetched (unless the caller passed 
                in NULL for that parameter).
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumFORMATETC.Skip(System.Int32)">
            <summary>
                Skips over the next specified number of elements in the enumeration sequence.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumFORMATETC.Reset">
            <summary>
                Resets the enumeration sequence to the beginning.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IEnumFORMATETC.Clone(Awesomium.Windows.WinAPI.IEnumFORMATETC@)">
            <summary>
                Creates another enumerator that contains the same enumeration state as 
                the current one. Using this function, a client can record a particular 
                point in the enumeration sequence and then return to that point at a 
                later time. The new enumerator supports the same interface as the original one.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.WinAPI.IAdviseSink">
            <summary>
                The IAdviseSink interface enables containers and other objects to 
                receive notifications of data changes, view changes, and compound-document 
                changes occurring in objects of interest. Container applications, for 
                example, require such notifications to keep cached presentations of their 
                linked and embedded objects up-to-date. Calls to IAdviseSink methods are 
                asynchronous, so the call is sent and then the next instruction is executed 
                without waiting for the call's return.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IAdviseSink.OnDataChange(Awesomium.Windows.WinAPI.FORMATETC@,Awesomium.Windows.WinAPI.STGMEDIUM@)">
            <summary>
                Called by the server to notify a data object's currently registered 
                advise sinks that data in the object has changed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
            <summary>
                Notifies an object's registered advise sinks that its view has changed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IAdviseSink.OnRename(System.IntPtr)">
            <summary>
                Called by the server to notify all registered advisory sinks that 
                the object has been renamed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IAdviseSink.OnSave">
            <summary>
                Called by the server to notify all registered advisory sinks that 
                the object has been saved.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IAdviseSink.OnClose">
            <summary>
                Called by the server to notify all registered advisory sinks that the 
                object has changed from the running to the loaded state.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.WinAPI.IDataObject">
            <summary>
                The IDataObject interface specifies methods that enable data transfer 
                and notification of changes in data. Data transfer methods specify 
                the format of the transferred data along with the medium through 
                which the data is to be transferred. Optionally, the data can be 
                rendered for a specific target device. In addition to methods for 
                retrieving and storing data, the IDataObject interface specifies 
                methods for enumerating available formats and managing connections 
                to advisory sinks for handling change notifications.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.GetData(Awesomium.Windows.WinAPI.FORMATETC@,Awesomium.Windows.WinAPI.STGMEDIUM@)">
            <summary>
                Called by a data consumer to obtain data from a source data object. 
                The GetData method renders the data described in the specified FORMATETC 
                structure and transfers it through the specified STGMEDIUM structure. 
                The caller then assumes responsibility for releasing the STGMEDIUM structure.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.GetDataHere(Awesomium.Windows.WinAPI.FORMATETC@,Awesomium.Windows.WinAPI.STGMEDIUM@)">
            <summary>
                Called by a data consumer to obtain data from a source data object. 
                This method differs from the GetData method in that the caller must 
                allocate and free the specified storage medium.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.QueryGetData(Awesomium.Windows.WinAPI.FORMATETC@)">
            <summary>
                Determines whether the data object is capable of rendering the data 
                described in the FORMATETC structure. Objects attempting a paste or 
                drop operation can call this method before calling IDataObject::GetData 
                to get an indication of whether the operation may be successful.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.GetCanonicalFormatEtc(Awesomium.Windows.WinAPI.FORMATETC@,Awesomium.Windows.WinAPI.FORMATETC@)">
            <summary>
                Provides a standard FORMATETC structure that is logically equivalent to one that is more 
                complex. You use this method to determine whether two different 
                FORMATETC structures would return the same data, removing the need 
                for duplicate rendering.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.SetData(Awesomium.Windows.WinAPI.FORMATETC@,Awesomium.Windows.WinAPI.STGMEDIUM@,System.Boolean)">
            <summary>
                Called by an object containing a data source to transfer data to 
                the object that implements this method.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.EnumFormatEtc(Awesomium.Windows.WinAPI.DATADIR)">
            <summary>
                Creates an object for enumerating the FORMATETC structures for a 
                data object. These structures are used in calls to IDataObject::GetData 
                or IDataObject::SetData. 
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.DAdvise(Awesomium.Windows.WinAPI.FORMATETC@,Awesomium.Windows.WinAPI.ADVF,Awesomium.Windows.WinAPI.IAdviseSink,System.Int32@)">
            <summary>
                Called by an object supporting an advise sink to create a connection between 
                a data object and the advise sink. This enables the advise sink to be 
                notified of changes in the data of the object.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.DUnadvise(System.Int32)">
            <summary>
                Destroys a notification connection that had been previously set up.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IDataObject.EnumDAdvise(Awesomium.Windows.WinAPI.IEnumSTATDATA@)">
            <summary>
                Creates an object that can be used to enumerate the current advisory connections.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.SynchronousWindowPosition">
            <summary>If the calling thread and the thread that owns the window are attached to different input queues, 
            the system posts the request to the thread that owns the window. This prevents the calling thread from 
            blocking its execution while other threads process the request.</summary>
            <remarks>SWP_ASYNCWINDOWPOS</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DeferErase">
            <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
            <remarks>SWP_DEFERERASE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DrawFrame">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
            <remarks>SWP_DRAWFRAME</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.FrameChanged">
            <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to 
            the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE 
            is sent only when the window's size is being changed.</summary>
            <remarks>SWP_FRAMECHANGED</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.HideWindow">
            <summary>Hides the window.</summary>
            <remarks>SWP_HIDEWINDOW</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotActivate">
            <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the 
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter 
            parameter).</summary>
            <remarks>SWP_NOACTIVATE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotCopyBits">
            <summary>Discards the entire contents of the client area. If this flag is not specified, the valid 
            contents of the client area are saved and copied back into the client area after the window is sized or 
            repositioned.</summary>
            <remarks>SWP_NOCOPYBITS</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreMove">
            <summary>Retains the current position (ignores X and Y parameters).</summary>
            <remarks>SWP_NOMOVE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotChangeOwnerZOrder">
            <summary>Does not change the owner window's position in the Z order.</summary>
            <remarks>SWP_NOOWNERZORDER</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotRedraw">
            <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to 
            the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent 
            window uncovered as a result of the window being moved. When this flag is set, the application must 
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
            <remarks>SWP_NOREDRAW</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotReposition">
            <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
            <remarks>SWP_NOREPOSITION</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.DoNotSendChangingEvent">
            <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
            <remarks>SWP_NOSENDCHANGING</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreResize">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
            <remarks>SWP_NOSIZE</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.IgnoreZOrder">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
            <remarks>SWP_NOZORDER</remarks>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.SetWindowPosFlags.ShowWindow">
            <summary>Displays the window.</summary>
            <remarks>SWP_SHOWWINDOW</remarks>
        </member>
        <member name="T:Awesomium.Windows.WinAPI.DeviceCap">
            <summary>
            GetDeviceCaps nIndex values.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.DeviceCap.BITSPIXEL">
            <summary>Number of bits per pixel
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.DeviceCap.PLANES">
            <summary>
            Number of planes
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WinAPI.DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.Utilities.SafeDeleteObject(System.IntPtr@)">
            <summary>GDI's DeleteObject</summary>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.ParseDisplayName(System.IntPtr,System.IntPtr,System.String,System.UInt32@,System.IntPtr@,System.UInt32@)">
            <summary>
            Translates a file object's or folder's display name into an item identifier list.
            Return value: error code, if any
            </summary>
            <param name="hwnd">Optional window handle</param>
            <param name="pbc">Optional bind context that controls the parsing operation. This parameter is normally set to NULL. </param>
            <param name="pszDisplayName">Null-terminated UNICODE string with the display name</param>
            <param name="pchEaten">Pointer to a ULONG value that receives the number of characters of the display name that was parsed.</param>
            <param name="ppidl"> Pointer to an ITEMIDLIST pointer that receives the item identifier list for the object.</param>
            <param name="pdwAttributes">Optional parameter that can be used to query for file attributes.this can be values from the SFGAO enum</param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.EnumObjects(System.IntPtr,Awesomium.Windows.WinAPI.ESHCONTF,System.IntPtr@)">
             <summary>
            Allows a client to determine the contents of a folder by creating an item identifier enumeration object and returning its IEnumIDList interface. 
            Return value: error code, if any
             </summary>
             <param name="hwnd">If user input is required to perform the enumeration, this window handle should be used by the enumeration object as the parent window to take user input.</param>
             <param name="grfFlags">Flags indicating which items to include in the  enumeration. For a list of possible values, see the SHCONTF enum. </param>
             <param name="ppenumIDList">Address that receives a pointer to the IEnumIDList interface of the enumeration object created by this method. </param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.BindToObject(System.IntPtr,System.IntPtr,System.Guid@,System.IntPtr@)">
            <summary>
            Retrieves an IShellFolder object for a subfolder.
            Return value: error code, if any
            </summary>
            <param name="pidl">Address of an ITEMIDLIST structure (PIDL) that identifies the subfolder.</param>
            <param name="pbc">Optional address of an IBindCtx interface on a bind context object to be used during this operation.</param>
            <param name="riid">Identifier of the interface to return. </param>
            <param name="ppv">Address that receives the interface pointer.</param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.BindToStorage(System.IntPtr,System.IntPtr,System.Guid@,System.IntPtr@)">
            <summary>
            Requests a pointer to an object's storage interface. 
            Return value: error code, if any
            </summary>
            <param name="pidl">Address of an ITEMIDLIST structure that identifies the subfolder relative to its parent folder. </param>
            <param name="pbc">Optional address of an IBindCtx interface on a bind context object to be  used during this operation.</param>
            <param name="riid">Interface identifier (IID) of the requested storage interface.</param>
            <param name="ppv"> Address that receives the interface pointer specified by riid.</param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.CompareIDs(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Determines the relative order of two file objects or folders, given 
            their item identifier lists. Return value: If this method is 
            successful, the CODE field of the HRESULT contains one of the 
            following values (the code can be retrived using the helper function
            GetHResultCode): Negative A negative return value indicates that the first item should precede the second (pidl1 &lt; pidl2). 
            A positive return value indicates that the first item should
            follow the second (pidl1 > pidl2).  Zero A return value of zero
            indicates that the two items are the same (pidl1 = pidl2). 
            </summary>
            <param name="lParam">Value that specifies how the comparison  should be performed. The lower Sixteen bits of lParam define the sorting  rule. 
             The upper sixteen bits of lParam are used for flags that modify the sorting rule. values can be from  the SHCIDS enum
            </param>
            <param name="pidl1">Pointer to the first item's ITEMIDLIST structure.</param>
            <param name="pidl2"> Pointer to the second item's ITEMIDLIST structure.</param>
            <returns></returns>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.CreateViewObject(System.IntPtr,System.Guid@,System.IntPtr@)">
            <summary>
            Requests an object that can be used to obtain information from or interact
            with a folder object.
            Return value: error code, if any
            </summary>
            <param name="hwndOwner">Handle to the owner window.</param>
            <param name="riid">Identifier of the requested interface.</param>
            <param name="ppv">Address of a pointer to the requested interface. </param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.GetAttributesOf(System.UInt32,System.IntPtr[],Awesomium.Windows.WinAPI.ESFGAO@)">
            <summary>
            Retrieves the attributes of one or more file objects or subfolders. 
            Return value: error code, if any
            </summary>
            <param name="cidl">Number of file objects from which to retrieve attributes. </param>
            <param name="apidl">Address of an array of pointers to ITEMIDLIST structures, each of which  uniquely identifies a file object relative to the parent folder.</param>
            <param name="rgfInOut">Address of a single ULONG value that, on entry contains the attributes that the caller is 
            requesting. On exit, this value contains the requested attributes that are common to all of the specified objects. this value can be from the SFGAO enum
            </param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.GetUIObjectOf(System.IntPtr,System.UInt32,System.IntPtr[],System.Guid@,System.UInt32,System.IntPtr@)">
            <summary>
            Retrieves an OLE interface that can be used to carry out actions on the 
            specified file objects or folders. Return value: error code, if any
            </summary>
            <param name="hwndOwner">Handle to the owner window that the client should specify if it displays a dialog box or message box.</param>
            <param name="cidl">Number of file objects or subfolders specified in the apidl parameter. </param>
            <param name="apidl">Address of an array of pointers to ITEMIDLIST  structures, each of which  uniquely identifies a file object or subfolder relative to the parent folder.</param>
            <param name="riid">Identifier of the COM interface object to return.</param>
            <param name="rgfReserved"> Reserved. </param>
            <param name="ppv">Pointer to the requested interface.</param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.GetDisplayNameOf(System.IntPtr,Awesomium.Windows.WinAPI.ESHGDN,Awesomium.Windows.WinAPI.STRRET@)">
            <summary>
            Retrieves the display name for the specified file object or subfolder. 
            Return value: error code, if any
            </summary>
            <param name="pidl">Address of an ITEMIDLIST structure (PIDL)  that uniquely identifies the file  object or subfolder relative to the parent  folder. </param>
            <param name="uFlags">Flags used to request the type of display name to return. For a list of possible values. </param>
            <param name="pName"> Address of a STRRET structure in which to return the display name.</param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IShellFolder.SetNameOf(System.IntPtr,System.IntPtr,System.String,Awesomium.Windows.WinAPI.ESHCONTF,System.IntPtr@)">
            <summary>
            Sets the display name of a file object or subfolder, changing the item
            identifier in the process.
            Return value: error code, if any
            </summary>
            <param name="hwnd"> Handle to the owner window of any dialog or message boxes that the client displays.</param>
            <param name="pidl"> Pointer to an ITEMIDLIST structure that uniquely identifies the file object or subfolder relative to the parent folder. </param>
            <param name="pszName"> Pointer to a null-terminated string that specifies the new display name.</param>
            <param name="uFlags">Flags indicating the type of name specified by  the lpszName parameter. For a list of possible values, see the description of the SHGNO enum.</param>
            <param name="ppidlOut"></param>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IExtractIcon.GetIconLocation(Awesomium.Windows.WinAPI.IExtractIconuFlags,System.Text.StringBuilder,System.Int32,System.Int32@,Awesomium.Windows.WinAPI.IExtractIconpwFlags@)">
            <summary>
            Gets the location and index of an icon.
            </summary>
            <param name="uFlags">One or more of the following values. This parameter can also be NULL.use GIL_ Consts</param>
            <param name="szIconFile">A pointer to a buffer that receives the icon location. The icon location is a null-terminated string that identifies the file that contains the icon.</param>
            <param name="cchMax">The size of the buffer, in characters, pointed to by pszIconFile.</param>
            <param name="piIndex">A pointer to an int that receives the index of the icon in the file pointed to by pszIconFile.</param>
            <param name="pwFlags">A pointer to a UINT value that receives zero or a combination of the following value</param>
            <returns></returns>
        </member>
        <member name="M:Awesomium.Windows.WinAPI.IExtractIcon.Extract(System.String,System.UInt32,System.IntPtr@,System.IntPtr@,System.UInt32)">
            <summary>
            Extracts an icon image from the specified location.
            </summary>
            <param name="pszFile">A pointer to a null-terminated string that specifies the icon location.</param>
            <param name="nIconIndex">The index of the icon in the file pointed to by pszFile.</param>
            <param name="phiconLarge">A pointer to an HICON value that receives the handle to the large icon. This parameter may be NULL.</param>
            <param name="phiconSmall">A pointer to an HICON value that receives the handle to the small icon. This parameter may be NULL.</param>
            <param name="nIconSize">The desired size of the icon, in pixels. The low word contains the size of the large icon, and the high word contains the size of the small icon. The size specified can be the width or height. The width of an icon always equals its height.</param>
            <returns>
            Returns S_OK if the function extracted the icon, or S_FALSE if the calling application should extract the icon.
            </returns>
        </member>
        <member name="F:Awesomium.Windows.IID.ApplicationAssociationRegistration">
            <summary>IID_IApplicationAssociationRegistration</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ConnectionPoint">
            <summary>IID_IConnectionPoint</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ConnectionPointContainer">
            <summary>IID_IConnectionPointContainer</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.EnumConnectionPoints">
            <summary>IID_IEnumConnectionPoints</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.EnumConnections">
            <summary>IID_IEnumConnections</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.EnumIdList">
            <summary>IID_IEnumIDList</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.EnumObjects">
            <summary>IID_IEnumObjects</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.FileDialog">
            <summary>IID_IFileDialog</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.FileDialogEvents">
            <summary>IID_IFileDialogEvents</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.FileOpenDialog">
            <summary>IID_IFileOpenDialog</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.FileSaveDialog">
            <summary>IID_IFileSaveDialog</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.HtmlDocument">
            <summary>IID_IHTMLDocument</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.HtmlDocument2">
            <summary>IID_IHTMLDocument2</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ModalWindow">
            <summary>IID_IModalWindow</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ObjectArray">
            <summary>IID_IObjectArray</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ObjectCollection">
            <summary>IID_IObjectCollection</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.PropertyNotifySink">
            <summary>IID_IPropertyNotifySink</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.PropertyStore">
            <summary>IID_IPropertyStore</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ServiceProvider">
            <summary>IID_IServiceProvider</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ShellFolder">
            <summary>IID_IShellFolder</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ShellLink">
            <summary>IID_IShellLink</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ShellItem">
            <summary>IID_IShellItem</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ShellItem2">
            <summary>IID_IShellItem2</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ShellItemArray">
            <summary>IID_IShellItemArray</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.TaskbarList">
            <summary>IID_ITaskbarList</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.TaskbarList2">
            <summary>IID_ITaskbarList2</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.Unknown">
            <summary>IID_IUnknown</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WebBrowser2">
            <summary>IID_IWebBrowser2</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WebBrowserEvents">
            <summary>DIID_DWebBrowserEvents</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WebBrowserEvents2">
            <summary>IID_DWebBrowserEvents2</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICBitmapDecoder">
            <summary>IID_IWICBitmapDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICBitmapFlipRotator">
            <summary>IID_IWICBitmapFlipRotator</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICBitmapFrameDecode">
            <summary>IID_IWICBitmapFrameDecode</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICBitmap">
            <summary>IID_IWICBitmap</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICBitmapSource">
            <summary>IID_IWICBitmapSource</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICFormatConverter">
            <summary>IID_IWICFormatConverter</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICImagingFactory">
            <summary>IID_IWICImagingFactory</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.WICStream">
            <summary>IID_IWICStream</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ApplicationDestinations">
            <summary>IID_IApplicationDestinations</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ApplicationDocumentLists">
            <summary>IID_IApplicationDocumentLists</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.CustomDestinationList">
            <summary>IID_ICustomDestinationList</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ObjectWithAppUserModelId">
            <summary>IID_IObjectWithAppUserModelID</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.ObjectWithProgId">
            <summary>IID_IObjectWithProgID</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.TaskbarList3">
            <summary>IID_ITaskbarList3</summary>
        </member>
        <member name="F:Awesomium.Windows.IID.TaskbarList4">
            <summary>IID_ITaskbarList4</summary>
        </member>
        <member name="F:Awesomium.Windows.SID.SWebBrowserApp">
            <summary>SID_SWebBrowserApp</summary>
        </member>
        <member name="F:Awesomium.Windows.CLSID.ApplicationAssociationRegistration">
            <summary>CLSID_ApplicationAssociationRegistration</summary>
            <remarks>IID_IApplicationAssociationRegistration</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.DragDropHelper">
            <summary>CLSID_DragDropHelper</summary>
        </member>
        <member name="F:Awesomium.Windows.CLSID.FileOpenDialog">
            <summary>CLSID_FileOpenDialog</summary>
            <remarks>IID_IFileOpenDialog</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.FileSaveDialog">
            <summary>CLSID_FileSaveDialog</summary>
            <remarks>IID_IFileSaveDialog</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.TaskbarList">
            <summary>CLSID_TaskbarList</summary>
            <remarks>IID_ITaskbarList</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.EnumerableObjectCollection">
            <summary>CLSID_EnumerableObjectCollection</summary>
            <remarks>IID_IEnumObjects.</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.ShellLink">
            <summary>CLSID_ShellLink</summary>
            <remarks>IID_IShellLink</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.WICImagingFactory">
            <summary>CLSID_WICImagingFactory</summary>
        </member>
        <member name="F:Awesomium.Windows.CLSID.DestinationList">
            <summary>CLSID_DestinationList</summary>
            <remarks>IID_ICustomDestinationList</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.ApplicationDestinations">
            <summary>CLSID_ApplicationDestinations</summary>
            <remarks>IID_IApplicationDestinations</remarks>
        </member>
        <member name="F:Awesomium.Windows.CLSID.ApplicationDocumentLists">
            <summary>CLSID_ApplicationDocumentLists</summary>
            <remarks>IID_IApplicationDocumentLists</remarks>
        </member>
        <member name="T:Awesomium.Windows.ComStream">
            <summary>
            Wraps an IStream interface pointer from COM into a form consumable by .Net.
            </summary>
            <remarks>
            This implementation is immutable, though it's possible that the underlying
            stream can be changed in another context.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ComStream.#ctor(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Wraps a native IStream interface into a CLR Stream subclass.
            </summary>
            <param name="stream">
            The stream that this object wraps.
            </param>
            <remarks>
            Note that the parameter is passed by ref.  On successful creation it is
            zeroed out to the caller.  This object becomes responsible for the lifetime
            management of the wrapped IStream.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.ManagedIStream">
            <summary>
            Wraps a managed stream instance into an interface pointer consumable by COM.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the ManagedIStream class with the specified managed Stream object.
            </summary>
            <param name="source">
            The stream that this IStream reference is wrapping.
            </param>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Creates a new stream object with its own seek pointer that
            references the same bytes as the original stream. 
            </summary>
            <param name="ppstm">
            When this method returns, contains the new stream object. This parameter is passed uninitialized.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Clone in the MSDN library.
            This class doesn't implement Clone.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Commit(System.Int32)">
            <summary>
            Ensures that any changes made to a stream object that is open in transacted
            mode are reflected in the parent storage. 
            </summary>
            <param name="grfCommitFlags">
            A value that controls how the changes for the stream object are committed. 
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Commit in the MSDN library.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the
            stream to the current seek pointer in another stream. 
            </summary>
            <param name="pstm">
            A reference to the destination stream. 
            </param>
            <param name="cb">
            The number of bytes to copy from the source stream. 
            </param>
            <param name="pcbRead">
            On successful return, contains the actual number of bytes read from the source.
            (Note the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.)
            </param>
            <param name="pcbWritten">
            On successful return, contains the actual number of bytes written to the destination.
            (Note the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.)
            </param>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Restricts access to a specified range of bytes in the stream. 
            </summary>
            <param name="libOffset">
            The byte offset for the beginning of the range. 
            </param>
            <param name="cb">
            The length of the range, in bytes, to restrict.
            </param>
            <param name="dwLockType">
            The requested restrictions on accessing the range.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::LockRegion in the MSDN library.
            This class doesn't implement LockRegion.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer. 
            </summary>
            <param name="pv">
            When this method returns, contains the data read from the stream. This parameter is passed uninitialized.
            </param>
            <param name="cb">
            The number of bytes to read from the stream object. 
            </param>
            <param name="pcbRead">
            A pointer to a ULONG variable that receives the actual number of bytes read from the stream object.
            </param>
            <remarks>
            For more information, see the existing documentation for ISequentialStream::Read in the MSDN library.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Revert">
            <summary>
            Discards all changes that have been made to a transacted stream since the last Commit call.
            </summary>
            <remarks>
            This class doesn't implement Revert.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the
            stream, to the end of the stream, or to the current seek pointer.
            </summary>
            <param name="dlibMove">
            The displacement to add to dwOrigin.
            </param>
            <param name="dwOrigin">
            The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file. 
            </param>
            <param name="plibNewPosition">
            On successful return, contains the offset of the seek pointer from the beginning of the stream.
            (Note the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.)
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Seek in the MSDN library.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.SetSize(System.Int64)">
            <summary>
            Changes the size of the stream object. 
            </summary>
            <param name="libNewSize">
            The new size of the stream as a number of bytes. 
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::SetSize in the MSDN library.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            Retrieves the STATSTG structure for this stream. 
            </summary>
            <param name="pstatstg">
            When this method returns, contains a STATSTG structure that describes this stream object.
            This parameter is passed uninitialized.
            </param>
            <param name="grfStatFlag">
            Members in the STATSTG structure that this method does not return, thus saving some memory allocation operations. 
            </param>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes the access restriction on a range of bytes previously restricted with the LockRegion method.
            </summary>
            <param name="libOffset">The byte offset for the beginning of the range.
            </param>
            <param name="cb">
            The length, in bytes, of the range to restrict.
            </param>
            <param name="dwLockType">
            The access restrictions previously placed on the range.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::UnlockRegion in the MSDN library.
            This class doesn't implement UnlockRegion.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
            <param name="pv">
            The buffer to write this stream to.
            </param>
            <param name="cb">
            The number of bytes to write to the stream. 
            </param>
            <param name="pcbWritten">
            On successful return, contains the actual number of bytes written to the stream object. 
            If the caller sets this pointer to null, this method does not provide the actual number
            of bytes written.
            </param>
        </member>
        <member name="M:Awesomium.Windows.ManagedIStream.Dispose">
            <summary>
            Releases resources controlled by this object.
            </summary>
            <remarks>
            Dispose can be called multiple times, but trying to use the object
            after it has been disposed will generally throw ObjectDisposedExceptions.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.SafeMILHandle.#ctor">
            <summary>
            Use this constructor if the handle isn't ready yet and later
            set the handle with SetHandle. SafeMILHandle owns the release
            of the handle.
            </summary>
            <SecurityNote>
               Critical: This derives from a class that has a link demand and inheritance demand
               TreatAsSafe: Ok to call constructor
             </SecurityNote>
        </member>
        <member name="M:Awesomium.Windows.SafeMILHandle.#ctor(System.IntPtr)">
            <summary>
            Use this constructor if the handle exists at construction time.
            SafeMILHandle owns the release of the parameter.
            </summary>
            <SecurityNote>
               Critical: This derives from a class that has a link demand and inheritance demand
             </SecurityNote>
        </member>
        <member name="M:Awesomium.Windows.SafeMILHandle.ReleaseHandle">
            <SecurityNote>
            Critical - calls unmanaged code, not treat as safe because you must
                       validate that handle is a valid COM object.
            </SecurityNote>
        </member>
        <member name="T:Awesomium.Windows.WicGUID">
            <summary>
            GUID Identifiers for the image container formats
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WicGUID.ContainerFormatBmp">
            <summary>GUID_ContainerFormatBmp</summary>
        </member>
        <member name="F:Awesomium.Windows.WicGUID.ContainerFormatPng">
            <summary>GUID_ContainerFormatPng</summary>
        </member>
        <member name="F:Awesomium.Windows.WicGUID.ContainerFormatIco">
            <summary>GUID_ContainerFormatIco</summary>
        </member>
        <member name="F:Awesomium.Windows.WicGUID.ContainerFormatJpeg">
            <summary>GUID_ContainerFormatJpeg</summary>
        </member>
        <member name="F:Awesomium.Windows.WicGUID.ContainerFormatTiff">
            <summary>GUID_ContainerFormatTiff</summary>
        </member>
        <member name="F:Awesomium.Windows.WicGUID.ContainerFormatGif">
            <summary>GUID_ContainerFormatGif</summary>
        </member>
        <member name="F:Awesomium.Windows.WicGUID.ContainerFormatWmp">
            <summary>GUID_ContainerFormatWmp</summary>
        </member>
        <member name="T:Awesomium.Windows.WicCATID">
            <summary>
            WIC Category Identifiers
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WicCATID.WICBitmapDecoders">
            <summary>CATID_WICBitmapDecoders</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCATID.WICBitmapEncoders">
            <summary>CATID_WICBitmapEncoders</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCATID.WICPixelFormats">
            <summary>CATID_WICPixelFormats</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCATID.WICFormatConverters">
            <summary>CATID_WICFormatConverters</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCATID.WICMetadataReader">
            <summary>CATID_WICMetadataReader</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCATID.WICMetadataWriter">
            <summary>CATID_WICMetadataWriter</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICBmpDecoder">
            <summary>CLSID_WICBmpDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICPngDecoder">
            <summary>CLSID_WICPngDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICIcoDecoder">
            <summary>CLSID_WICIcoDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICJpegDecoder">
            <summary>CLSID_WICJpegDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICGifDecoder">
            <summary>CLSID_WICGifDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICTiffDecoder">
            <summary>CLSID_WICTiffDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICWmpDecoder">
            <summary>CLSID_WICWmpDecoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICBmpEncoder">
            <summary>CLSID_WICBmpEncoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICPngEncoder">
            <summary>CLSID_WICPngEncoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICJpegEncoder">
            <summary>CLSID_WICJpegEncoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICGifEncoder">
            <summary>CLSID_WICGifEncoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICTiffEncoder">
            <summary>CLSID_WICTiffEncoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICWmpEncoder">
            <summary>CLSID_WICWmpEncoder</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICImagingCategories">
            <summary>CLSID_WICImagingCategories</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICDefaultFormatConverter">
            <summary>CLSID_WICDefaultFormatConverter</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICFormatConverterNChannel">
            <summary>CLSID_WICFormatConverterNChannel</summary>
        </member>
        <member name="F:Awesomium.Windows.WicCLSID.WICFormatConverterWMPhoto">
            <summary>CLSID_WICFormatConverterWMPhoto</summary>
        </member>
        <member name="T:Awesomium.Windows.WICPixelFormat">
            <summary>Pixel format GUIDs.</summary>
        </member>
        <member name="T:Awesomium.Windows.WICDecodeMetadata">
            <summary>WICDecodeMetadata*, WICDecodeOptions</summary>
        </member>
        <member name="T:Awesomium.Windows.WICBitmapPaletteType">
            <summary>
            WICBitmapPaletteType*
            </summary>
        </member>
        <member name="F:Awesomium.Windows.WICBitmapPaletteType.Custom">
            <summary>Arbitrary custom palette provided by caller.</summary>
        </member>
        <member name="F:Awesomium.Windows.WICBitmapPaletteType.MedianCut">
            <summary>Optimal palette generated using a median-cut algorithm.</summary>
        </member>
        <member name="F:Awesomium.Windows.WICBitmapPaletteType.FixedBW">
            <summary>Black and white palette.</summary>
        </member>
        <member name="F:Awesomium.Windows.WICBitmapPaletteType.FixedWebPalette">
            <summary>convenient web palette, same as WICBitmapPaletteTypeFixedHalftone216</summary>
        </member>
        <member name="T:Awesomium.Windows.WICBitmapTransform">
            <summary>
            WICBitmapTransform*, WICBitmapTransformOptions
            </summary>
        </member>
        <member name="T:Awesomium.Windows.WICBitmapCreateCacheOption">
            <summary>
            WICBitmap*
            </summary>
        </member>
        <member name="T:Awesomium.Windows.WICBitmapAlphaChannelOption">
            <summary>
            WICBitmap*
            </summary>
        </member>
    </members>
</doc>
